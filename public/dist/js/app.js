/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/App.vue?vue&type=script&lang=js&":
/*!***********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/App.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _components_Loading__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/components/Loading */ \"./resources/js/components/Loading.vue\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n // Load layout components dynamically.\n\nvar requireContext = __webpack_require__(\"./resources/js/layouts sync .*\\\\.vue$\");\n\nvar layouts = requireContext.keys().map(function (file) {\n  return [file.replace(/(^.\\/)|(\\.vue$)/g, ''), requireContext(file)];\n}).reduce(function (components, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      name = _ref2[0],\n      component = _ref2[1];\n\n  components[name] = component[\"default\"] || component;\n  return components;\n}, {});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  el: '#app',\n  components: {\n    Loading: _components_Loading__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n  },\n  data: function data() {\n    return {\n      layout: null,\n      defaultLayout: 'default'\n    };\n  },\n  metaInfo: function metaInfo() {\n    var appName = window.config.appName;\n    return {\n      title: appName,\n      titleTemplate: \"%s \\xB7 \".concat(appName)\n    };\n  },\n  mounted: function mounted() {\n    this.$loading = this.$refs.loading;\n  },\n  methods: {\n    /**\n     * Set the application layout.\n     *\n     * @param {String} layout\n     */\n    setLayout: function setLayout(layout) {\n      if (!layout || !layouts[layout]) {\n        layout = this.defaultLayout;\n      }\n\n      this.layout = layouts[layout];\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcmVzb3VyY2VzL2pzL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBWUE7O0FBQ0E7O0FBQ0Esb0NBQ0FBLEdBREEsQ0FDQTtFQUFBLE9BQ0EsNERBREE7QUFBQSxDQURBLEVBSUFDLE1BSkEsQ0FJQTtFQUFBO0VBQUE7RUFBQTs7RUFDQUM7RUFDQTtBQUNBLENBUEEsRUFPQSxFQVBBO0FBUUEsaUVBQWU7RUFDZkMsVUFEQTtFQUVBRDtJQUNBRSxTQUFBQSwyREFBQUE7RUFEQSxDQUZBO0VBS0FDO0lBQUE7TUFDQUMsWUFEQTtNQUVBQztJQUZBO0VBQUEsQ0FMQTtFQVNBQyxRQVRBLHNCQVNBO0lBQ0E7SUFDQTtNQUNBQyxjQURBO01BRUFDO0lBRkE7RUFJQSxDQWZBO0VBZ0JBQyxPQWhCQSxxQkFnQkE7SUFDQTtFQUNBLENBbEJBO0VBbUJBQztJQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDQUMsU0FOQSxxQkFNQVAsTUFOQSxFQU1BO01BQ0E7UUFDQUE7TUFDQTs7TUFDQTtJQUNBO0VBWEE7QUFuQkEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2pzL0FwcC52dWU/OTRiMCJdLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJhcHBcIj5cbiAgICA8bG9hZGluZyByZWY9XCJsb2FkaW5nXCIgLz5cblxuICAgIDx0cmFuc2l0aW9uIG5hbWU9XCJwYWdlXCIgbW9kZT1cIm91dC1pblwiPlxuICAgICAgPGNvbXBvbmVudCA6aXM9XCJsYXlvdXRcIiB2LWlmPVwibGF5b3V0XCIgLz5cbiAgICA8L3RyYW5zaXRpb24+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBMb2FkaW5nIGZyb20gJ34vY29tcG9uZW50cy9Mb2FkaW5nJ1xuLy8gTG9hZCBsYXlvdXQgY29tcG9uZW50cyBkeW5hbWljYWxseS5cbmNvbnN0IHJlcXVpcmVDb250ZXh0ID0gcmVxdWlyZS5jb250ZXh0KCd+L2xheW91dHMnLCBmYWxzZSwgLy4qXFwudnVlJC8pXG5jb25zdCBsYXlvdXRzID0gcmVxdWlyZUNvbnRleHQua2V5cygpXG4gIC5tYXAoZmlsZSA9PlxuICAgIFtmaWxlLnJlcGxhY2UoLyheLlxcLyl8KFxcLnZ1ZSQpL2csICcnKSwgcmVxdWlyZUNvbnRleHQoZmlsZSldXG4gIClcbiAgLnJlZHVjZSgoY29tcG9uZW50cywgW25hbWUsIGNvbXBvbmVudF0pID0+IHtcbiAgICBjb21wb25lbnRzW25hbWVdID0gY29tcG9uZW50LmRlZmF1bHQgfHwgY29tcG9uZW50XG4gICAgcmV0dXJuIGNvbXBvbmVudHNcbiAgfSwge30pXG5leHBvcnQgZGVmYXVsdCB7XG4gIGVsOiAnI2FwcCcsXG4gIGNvbXBvbmVudHM6IHtcbiAgICBMb2FkaW5nXG4gIH0sXG4gIGRhdGE6ICgpID0+ICh7XG4gICAgbGF5b3V0OiBudWxsLFxuICAgIGRlZmF1bHRMYXlvdXQ6ICdkZWZhdWx0J1xuICB9KSxcbiAgbWV0YUluZm8gKCkge1xuICAgIGNvbnN0IHsgYXBwTmFtZSB9ID0gd2luZG93LmNvbmZpZ1xuICAgIHJldHVybiB7XG4gICAgICB0aXRsZTogYXBwTmFtZSxcbiAgICAgIHRpdGxlVGVtcGxhdGU6IGAlcyDCtyAke2FwcE5hbWV9YFxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy4kbG9hZGluZyA9IHRoaXMuJHJlZnMubG9hZGluZ1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBhcHBsaWNhdGlvbiBsYXlvdXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbGF5b3V0XG4gICAgICovXG4gICAgc2V0TGF5b3V0IChsYXlvdXQpIHtcbiAgICAgIGlmICghbGF5b3V0IHx8ICFsYXlvdXRzW2xheW91dF0pIHtcbiAgICAgICAgbGF5b3V0ID0gdGhpcy5kZWZhdWx0TGF5b3V0XG4gICAgICB9XG4gICAgICB0aGlzLmxheW91dCA9IGxheW91dHNbbGF5b3V0XVxuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+Il0sIm5hbWVzIjpbIm1hcCIsInJlZHVjZSIsImNvbXBvbmVudHMiLCJlbCIsIkxvYWRpbmciLCJkYXRhIiwibGF5b3V0IiwiZGVmYXVsdExheW91dCIsIm1ldGFJbmZvIiwidGl0bGUiLCJ0aXRsZVRlbXBsYXRlIiwibW91bnRlZCIsIm1ldGhvZHMiLCJzZXRMYXlvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/App.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Child.vue?vue&type=script&lang=js&":
/*!************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Child.vue?vue&type=script&lang=js& ***!
  \************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'Child'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvQ2hpbGQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBU0EsaUVBQWU7RUFDZkE7QUFEQSIsInNvdXJjZXMiOlsid2VicGFjazovLy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9DaGlsZC52dWU/N2E2MyJdLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDx0cmFuc2l0aW9uIG5hbWU9XCJwYWdlXCIgbW9kZT1cIm91dC1pblwiPlxuICAgIDxzbG90PlxuICAgICAgPHJvdXRlci12aWV3IC8+XG4gICAgPC9zbG90PlxuICA8L3RyYW5zaXRpb24+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnQ2hpbGQnXG59XG48L3NjcmlwdD4iXSwibmFtZXMiOlsibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Child.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Loading.vue?vue&type=script&lang=js&":
/*!**************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Loading.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// https://github.com/nuxt/nuxt.js/blob/master/lib/app/components/nuxt-loading.vue\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  data: function data() {\n    return {\n      percent: 0,\n      show: false,\n      canSuccess: true,\n      duration: 3000,\n      height: '2px',\n      color: '#77b6ff',\n      failedColor: 'red'\n    };\n  },\n  methods: {\n    start: function start() {\n      var _this = this;\n\n      this.show = true;\n      this.canSuccess = true;\n\n      if (this._timer) {\n        clearInterval(this._timer);\n        this.percent = 0;\n      }\n\n      this._cut = 10000 / Math.floor(this.duration);\n      this._timer = setInterval(function () {\n        _this.increase(_this._cut * Math.random());\n\n        if (_this.percent > 95) {\n          _this.finish();\n        }\n      }, 100);\n      return this;\n    },\n    set: function set(num) {\n      this.show = true;\n      this.canSuccess = true;\n      this.percent = Math.floor(num);\n      return this;\n    },\n    get: function get() {\n      return Math.floor(this.percent);\n    },\n    increase: function increase(num) {\n      this.percent = this.percent + Math.floor(num);\n      return this;\n    },\n    decrease: function decrease(num) {\n      this.percent = this.percent - Math.floor(num);\n      return this;\n    },\n    finish: function finish() {\n      this.percent = 100;\n      this.hide();\n      return this;\n    },\n    pause: function pause() {\n      clearInterval(this._timer);\n      return this;\n    },\n    hide: function hide() {\n      var _this2 = this;\n\n      clearInterval(this._timer);\n      this._timer = null;\n      setTimeout(function () {\n        _this2.show = false;\n\n        _this2.$nextTick(function () {\n          setTimeout(function () {\n            _this2.percent = 0;\n          }, 200);\n        });\n      }, 500);\n      return this;\n    },\n    fail: function fail() {\n      this.canSuccess = false;\n      return this;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvTG9hZGluZy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFXQTtBQUNBLGlFQUFlO0VBQ2ZBO0lBQUE7TUFDQUMsVUFEQTtNQUVBQyxXQUZBO01BR0FDLGdCQUhBO01BSUFDLGNBSkE7TUFLQUMsYUFMQTtNQU1BQyxnQkFOQTtNQU9BQztJQVBBO0VBQUEsQ0FEQTtFQVdBQztJQUNBQyxLQURBLG1CQUNBO01BQUE7O01BQ0E7TUFDQTs7TUFDQTtRQUNBQztRQUNBO01BQ0E7O01BQ0E7TUFDQTtRQUNBOztRQUNBO1VBQ0E7UUFDQTtNQUNBLENBTEEsRUFLQSxHQUxBO01BTUE7SUFDQSxDQWhCQTtJQWlCQUMsR0FqQkEsZUFpQkFDLEdBakJBLEVBaUJBO01BQ0E7TUFDQTtNQUNBO01BQ0E7SUFDQSxDQXRCQTtJQXVCQUMsR0F2QkEsaUJBdUJBO01BQ0E7SUFDQSxDQXpCQTtJQTBCQUMsUUExQkEsb0JBMEJBRixHQTFCQSxFQTBCQTtNQUNBO01BQ0E7SUFDQSxDQTdCQTtJQThCQUcsUUE5QkEsb0JBOEJBSCxHQTlCQSxFQThCQTtNQUNBO01BQ0E7SUFDQSxDQWpDQTtJQWtDQUksTUFsQ0Esb0JBa0NBO01BQ0E7TUFDQTtNQUNBO0lBQ0EsQ0F0Q0E7SUF1Q0FDLEtBdkNBLG1CQXVDQTtNQUNBUDtNQUNBO0lBQ0EsQ0ExQ0E7SUEyQ0FRLElBM0NBLGtCQTJDQTtNQUFBOztNQUNBUjtNQUNBO01BQ0FTO1FBQ0E7O1FBQ0E7VUFDQUE7WUFDQTtVQUNBLENBRkEsRUFFQSxHQUZBO1FBR0EsQ0FKQTtNQUtBLENBUEEsRUFPQSxHQVBBO01BUUE7SUFDQSxDQXZEQTtJQXdEQUMsSUF4REEsa0JBd0RBO01BQ0E7TUFDQTtJQUNBO0VBM0RBO0FBWEEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvTG9hZGluZy52dWU/NTg4YiJdLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXYgOnN0eWxlPVwie1xuICAgIHdpZHRoOiBgJHtwZXJjZW50fSVgLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIG9wYWNpdHk6IHNob3cgPyAxIDogMCxcbiAgICAnYmFja2dyb3VuZC1jb2xvcic6IGNhblN1Y2Nlc3MgPyBjb2xvciA6IGZhaWxlZENvbG9yXG4gIH1cIiBjbGFzcz1cInByb2dyZXNzXCJcbiAgLz5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbnV4dC9udXh0LmpzL2Jsb2IvbWFzdGVyL2xpYi9hcHAvY29tcG9uZW50cy9udXh0LWxvYWRpbmcudnVlXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhdGE6ICgpID0+ICh7XG4gICAgcGVyY2VudDogMCxcbiAgICBzaG93OiBmYWxzZSxcbiAgICBjYW5TdWNjZXNzOiB0cnVlLFxuICAgIGR1cmF0aW9uOiAzMDAwLFxuICAgIGhlaWdodDogJzJweCcsXG4gICAgY29sb3I6ICcjNzdiNmZmJyxcbiAgICBmYWlsZWRDb2xvcjogJ3JlZCdcbiAgfSksXG5cbiAgbWV0aG9kczoge1xuICAgIHN0YXJ0ICgpIHtcbiAgICAgIHRoaXMuc2hvdyA9IHRydWVcbiAgICAgIHRoaXMuY2FuU3VjY2VzcyA9IHRydWVcbiAgICAgIGlmICh0aGlzLl90aW1lcikge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX3RpbWVyKVxuICAgICAgICB0aGlzLnBlcmNlbnQgPSAwXG4gICAgICB9XG4gICAgICB0aGlzLl9jdXQgPSAxMDAwMCAvIE1hdGguZmxvb3IodGhpcy5kdXJhdGlvbilcbiAgICAgIHRoaXMuX3RpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICB0aGlzLmluY3JlYXNlKHRoaXMuX2N1dCAqIE1hdGgucmFuZG9tKCkpXG4gICAgICAgIGlmICh0aGlzLnBlcmNlbnQgPiA5NSkge1xuICAgICAgICAgIHRoaXMuZmluaXNoKClcbiAgICAgICAgfVxuICAgICAgfSwgMTAwKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuICAgIHNldCAobnVtKSB7XG4gICAgICB0aGlzLnNob3cgPSB0cnVlXG4gICAgICB0aGlzLmNhblN1Y2Nlc3MgPSB0cnVlXG4gICAgICB0aGlzLnBlcmNlbnQgPSBNYXRoLmZsb29yKG51bSlcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcbiAgICBnZXQgKCkge1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5wZXJjZW50KVxuICAgIH0sXG4gICAgaW5jcmVhc2UgKG51bSkge1xuICAgICAgdGhpcy5wZXJjZW50ID0gdGhpcy5wZXJjZW50ICsgTWF0aC5mbG9vcihudW0pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgZGVjcmVhc2UgKG51bSkge1xuICAgICAgdGhpcy5wZXJjZW50ID0gdGhpcy5wZXJjZW50IC0gTWF0aC5mbG9vcihudW0pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgZmluaXNoICgpIHtcbiAgICAgIHRoaXMucGVyY2VudCA9IDEwMFxuICAgICAgdGhpcy5oaWRlKClcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcbiAgICBwYXVzZSAoKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuX3RpbWVyKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuICAgIGhpZGUgKCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl90aW1lcilcbiAgICAgIHRoaXMuX3RpbWVyID0gbnVsbFxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2hvdyA9IGZhbHNlXG4gICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGVyY2VudCA9IDBcbiAgICAgICAgICB9LCAyMDApXG4gICAgICAgIH0pXG4gICAgICB9LCA1MDApXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgZmFpbCAoKSB7XG4gICAgICB0aGlzLmNhblN1Y2Nlc3MgPSBmYWxzZVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuLnByb2dyZXNzIHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDBweDtcbiAgbGVmdDogMHB4O1xuICByaWdodDogMHB4O1xuICBoZWlnaHQ6IDJweDtcbiAgd2lkdGg6IDAlO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjJzLCBvcGFjaXR5IDAuNHM7XG4gIG9wYWNpdHk6IDE7XG4gIGJhY2tncm91bmQtY29sb3I6ICNlZmMxNGU7XG4gIHotaW5kZXg6IDk5OTk5OTtcbn1cbjwvc3R5bGU+Il0sIm5hbWVzIjpbImRhdGEiLCJwZXJjZW50Iiwic2hvdyIsImNhblN1Y2Nlc3MiLCJkdXJhdGlvbiIsImhlaWdodCIsImNvbG9yIiwiZmFpbGVkQ29sb3IiLCJtZXRob2RzIiwic3RhcnQiLCJjbGVhckludGVydmFsIiwic2V0IiwibnVtIiwiZ2V0IiwiaW5jcmVhc2UiLCJkZWNyZWFzZSIsImZpbmlzaCIsInBhdXNlIiwiaGlkZSIsInNldFRpbWVvdXQiLCJmYWlsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Loading.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/layouts/default.vue?vue&type=script&lang=js&":
/*!***********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/layouts/default.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'DefaultLayout'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcmVzb3VyY2VzL2pzL2xheW91dHMvZGVmYXVsdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFPQSxpRUFBZTtFQUNmQTtBQURBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3Jlc291cmNlcy9qcy9sYXlvdXRzL2RlZmF1bHQudnVlP2RjYzEiXSwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8ZGl2PlxuICAgIDxjaGlsZCAvPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdEZWZhdWx0TGF5b3V0J1xufVxuPC9zY3JpcHQ+XG4iXSwibmFtZXMiOlsibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/layouts/default.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/App.vue?vue&type=template&id=f348271a&":
/*!**********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/App.vue?vue&type=template&id=f348271a& ***!
  \**********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ render),\n/* harmony export */   \"staticRenderFns\": () => (/* binding */ staticRenderFns)\n/* harmony export */ });\nvar render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c(\"div\", {\n    attrs: {\n      id: \"app\"\n    }\n  }, [_c(\"loading\", {\n    ref: \"loading\"\n  }), _vm._v(\" \"), _c(\"transition\", {\n    attrs: {\n      name: \"page\",\n      mode: \"out-in\"\n    }\n  }, [_vm.layout ? _c(_vm.layout, {\n    tag: \"component\"\n  }) : _vm._e()], 1)], 1);\n};\n\nvar staticRenderFns = [];\nrender._withStripped = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9yZXNvdXJjZXMvanMvQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mMzQ4MjcxYSYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxNQUFNLEdBQUcsU0FBU0EsTUFBVCxHQUFrQjtFQUM3QixJQUFJQyxHQUFHLEdBQUcsSUFBVjtFQUFBLElBQ0VDLEVBQUUsR0FBR0QsR0FBRyxDQUFDRSxLQUFKLENBQVVELEVBRGpCOztFQUVBLE9BQU9BLEVBQUUsQ0FDUCxLQURPLEVBRVA7SUFBRUUsS0FBSyxFQUFFO01BQUVDLEVBQUUsRUFBRTtJQUFOO0VBQVQsQ0FGTyxFQUdQLENBQ0VILEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFBRUksR0FBRyxFQUFFO0VBQVAsQ0FBWixDQURKLEVBRUVMLEdBQUcsQ0FBQ00sRUFBSixDQUFPLEdBQVAsQ0FGRixFQUdFTCxFQUFFLENBQ0EsWUFEQSxFQUVBO0lBQUVFLEtBQUssRUFBRTtNQUFFSSxJQUFJLEVBQUUsTUFBUjtNQUFnQkMsSUFBSSxFQUFFO0lBQXRCO0VBQVQsQ0FGQSxFQUdBLENBQUNSLEdBQUcsQ0FBQ1MsTUFBSixHQUFhUixFQUFFLENBQUNELEdBQUcsQ0FBQ1MsTUFBTCxFQUFhO0lBQUVDLEdBQUcsRUFBRTtFQUFQLENBQWIsQ0FBZixHQUFvRFYsR0FBRyxDQUFDVyxFQUFKLEVBQXJELENBSEEsRUFJQSxDQUpBLENBSEosQ0FITyxFQWFQLENBYk8sQ0FBVDtBQWVELENBbEJEOztBQW1CQSxJQUFJQyxlQUFlLEdBQUcsRUFBdEI7QUFDQWIsTUFBTSxDQUFDYyxhQUFQLEdBQXVCLElBQXZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL0FwcC52dWU/NmJlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICB2YXIgX3ZtID0gdGhpcyxcbiAgICBfYyA9IF92bS5fc2VsZi5fY1xuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICB7IGF0dHJzOiB7IGlkOiBcImFwcFwiIH0gfSxcbiAgICBbXG4gICAgICBfYyhcImxvYWRpbmdcIiwgeyByZWY6IFwibG9hZGluZ1wiIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcInRyYW5zaXRpb25cIixcbiAgICAgICAgeyBhdHRyczogeyBuYW1lOiBcInBhZ2VcIiwgbW9kZTogXCJvdXQtaW5cIiB9IH0sXG4gICAgICAgIFtfdm0ubGF5b3V0ID8gX2MoX3ZtLmxheW91dCwgeyB0YWc6IFwiY29tcG9uZW50XCIgfSkgOiBfdm0uX2UoKV0sXG4gICAgICAgIDFcbiAgICAgICksXG4gICAgXSxcbiAgICAxXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iXSwibmFtZXMiOlsicmVuZGVyIiwiX3ZtIiwiX2MiLCJfc2VsZiIsImF0dHJzIiwiaWQiLCJyZWYiLCJfdiIsIm5hbWUiLCJtb2RlIiwibGF5b3V0IiwidGFnIiwiX2UiLCJzdGF0aWNSZW5kZXJGbnMiLCJfd2l0aFN0cmlwcGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/App.vue?vue&type=template&id=f348271a&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Child.vue?vue&type=template&id=66ab007e&":
/*!***********************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Child.vue?vue&type=template&id=66ab007e& ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ render),\n/* harmony export */   \"staticRenderFns\": () => (/* binding */ staticRenderFns)\n/* harmony export */ });\nvar render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c(\"transition\", {\n    attrs: {\n      name: \"page\",\n      mode: \"out-in\"\n    }\n  }, [_vm._t(\"default\", function () {\n    return [_c(\"router-view\")];\n  })], 2);\n};\n\nvar staticRenderFns = [];\nrender._withStripped = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9DaGlsZC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjZhYjAwN2UmLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsTUFBTSxHQUFHLFNBQVNBLE1BQVQsR0FBa0I7RUFDN0IsSUFBSUMsR0FBRyxHQUFHLElBQVY7RUFBQSxJQUNFQyxFQUFFLEdBQUdELEdBQUcsQ0FBQ0UsS0FBSixDQUFVRCxFQURqQjs7RUFFQSxPQUFPQSxFQUFFLENBQ1AsWUFETyxFQUVQO0lBQUVFLEtBQUssRUFBRTtNQUFFQyxJQUFJLEVBQUUsTUFBUjtNQUFnQkMsSUFBSSxFQUFFO0lBQXRCO0VBQVQsQ0FGTyxFQUdQLENBQ0VMLEdBQUcsQ0FBQ00sRUFBSixDQUFPLFNBQVAsRUFBa0IsWUFBWTtJQUM1QixPQUFPLENBQUNMLEVBQUUsQ0FBQyxhQUFELENBQUgsQ0FBUDtFQUNELENBRkQsQ0FERixDQUhPLEVBUVAsQ0FSTyxDQUFUO0FBVUQsQ0FiRDs7QUFjQSxJQUFJTSxlQUFlLEdBQUcsRUFBdEI7QUFDQVIsTUFBTSxDQUFDUyxhQUFQLEdBQXVCLElBQXZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvQ2hpbGQudnVlPzY0ZDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgdmFyIF92bSA9IHRoaXMsXG4gICAgX2MgPSBfdm0uX3NlbGYuX2NcbiAgcmV0dXJuIF9jKFxuICAgIFwidHJhbnNpdGlvblwiLFxuICAgIHsgYXR0cnM6IHsgbmFtZTogXCJwYWdlXCIsIG1vZGU6IFwib3V0LWluXCIgfSB9LFxuICAgIFtcbiAgICAgIF92bS5fdChcImRlZmF1bHRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW19jKFwicm91dGVyLXZpZXdcIildXG4gICAgICB9KSxcbiAgICBdLFxuICAgIDJcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSJdLCJuYW1lcyI6WyJyZW5kZXIiLCJfdm0iLCJfYyIsIl9zZWxmIiwiYXR0cnMiLCJuYW1lIiwibW9kZSIsIl90Iiwic3RhdGljUmVuZGVyRm5zIiwiX3dpdGhTdHJpcHBlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Child.vue?vue&type=template&id=66ab007e&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Loading.vue?vue&type=template&id=6ca9e6be&scoped=true&":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Loading.vue?vue&type=template&id=6ca9e6be&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ render),\n/* harmony export */   \"staticRenderFns\": () => (/* binding */ staticRenderFns)\n/* harmony export */ });\nvar render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c(\"div\", {\n    staticClass: \"progress\",\n    style: {\n      width: \"\".concat(_vm.percent, \"%\"),\n      height: _vm.height,\n      opacity: _vm.show ? 1 : 0,\n      \"background-color\": _vm.canSuccess ? _vm.color : _vm.failedColor\n    }\n  });\n};\n\nvar staticRenderFns = [];\nrender._withStripped = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9Mb2FkaW5nLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02Y2E5ZTZiZSZzY29wZWQ9dHJ1ZSYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxNQUFNLEdBQUcsU0FBU0EsTUFBVCxHQUFrQjtFQUM3QixJQUFJQyxHQUFHLEdBQUcsSUFBVjtFQUFBLElBQ0VDLEVBQUUsR0FBR0QsR0FBRyxDQUFDRSxLQUFKLENBQVVELEVBRGpCOztFQUVBLE9BQU9BLEVBQUUsQ0FBQyxLQUFELEVBQVE7SUFDZkUsV0FBVyxFQUFFLFVBREU7SUFFZkMsS0FBSyxFQUFFO01BQ0xDLEtBQUssWUFBS0wsR0FBRyxDQUFDTSxPQUFULE1BREE7TUFFTEMsTUFBTSxFQUFFUCxHQUFHLENBQUNPLE1BRlA7TUFHTEMsT0FBTyxFQUFFUixHQUFHLENBQUNTLElBQUosR0FBVyxDQUFYLEdBQWUsQ0FIbkI7TUFJTCxvQkFBb0JULEdBQUcsQ0FBQ1UsVUFBSixHQUFpQlYsR0FBRyxDQUFDVyxLQUFyQixHQUE2QlgsR0FBRyxDQUFDWTtJQUpoRDtFQUZRLENBQVIsQ0FBVDtBQVNELENBWkQ7O0FBYUEsSUFBSUMsZUFBZSxHQUFHLEVBQXRCO0FBQ0FkLE1BQU0sQ0FBQ2UsYUFBUCxHQUF1QixJQUF2QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0xvYWRpbmcudnVlPzgyODMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgdmFyIF92bSA9IHRoaXMsXG4gICAgX2MgPSBfdm0uX3NlbGYuX2NcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHtcbiAgICBzdGF0aWNDbGFzczogXCJwcm9ncmVzc1wiLFxuICAgIHN0eWxlOiB7XG4gICAgICB3aWR0aDogYCR7X3ZtLnBlcmNlbnR9JWAsXG4gICAgICBoZWlnaHQ6IF92bS5oZWlnaHQsXG4gICAgICBvcGFjaXR5OiBfdm0uc2hvdyA/IDEgOiAwLFxuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IF92bS5jYW5TdWNjZXNzID8gX3ZtLmNvbG9yIDogX3ZtLmZhaWxlZENvbG9yLFxuICAgIH0sXG4gIH0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9Il0sIm5hbWVzIjpbInJlbmRlciIsIl92bSIsIl9jIiwiX3NlbGYiLCJzdGF0aWNDbGFzcyIsInN0eWxlIiwid2lkdGgiLCJwZXJjZW50IiwiaGVpZ2h0Iiwib3BhY2l0eSIsInNob3ciLCJjYW5TdWNjZXNzIiwiY29sb3IiLCJmYWlsZWRDb2xvciIsInN0YXRpY1JlbmRlckZucyIsIl93aXRoU3RyaXBwZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Loading.vue?vue&type=template&id=6ca9e6be&scoped=true&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/layouts/default.vue?vue&type=template&id=06bc2b2d&":
/*!**********************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/layouts/default.vue?vue&type=template&id=06bc2b2d& ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ render),\n/* harmony export */   \"staticRenderFns\": () => (/* binding */ staticRenderFns)\n/* harmony export */ });\nvar render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c(\"div\", [_c(\"child\")], 1);\n};\n\nvar staticRenderFns = [];\nrender._withStripped = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9yZXNvdXJjZXMvanMvbGF5b3V0cy9kZWZhdWx0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wNmJjMmIyZCYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxNQUFNLEdBQUcsU0FBU0EsTUFBVCxHQUFrQjtFQUM3QixJQUFJQyxHQUFHLEdBQUcsSUFBVjtFQUFBLElBQ0VDLEVBQUUsR0FBR0QsR0FBRyxDQUFDRSxLQUFKLENBQVVELEVBRGpCOztFQUVBLE9BQU9BLEVBQUUsQ0FBQyxLQUFELEVBQVEsQ0FBQ0EsRUFBRSxDQUFDLE9BQUQsQ0FBSCxDQUFSLEVBQXVCLENBQXZCLENBQVQ7QUFDRCxDQUpEOztBQUtBLElBQUlFLGVBQWUsR0FBRyxFQUF0QjtBQUNBSixNQUFNLENBQUNLLGFBQVAsR0FBdUIsSUFBdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvbGF5b3V0cy9kZWZhdWx0LnZ1ZT9mNGI2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gIHZhciBfdm0gPSB0aGlzLFxuICAgIF9jID0gX3ZtLl9zZWxmLl9jXG4gIHJldHVybiBfYyhcImRpdlwiLCBbX2MoXCJjaGlsZFwiKV0sIDEpXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9Il0sIm5hbWVzIjpbInJlbmRlciIsIl92bSIsIl9jIiwiX3NlbGYiLCJzdGF0aWNSZW5kZXJGbnMiLCJfd2l0aFN0cmlwcGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/layouts/default.vue?vue&type=template&id=06bc2b2d&\n");

/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\");\n/* harmony import */ var _router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/router */ \"./resources/js/router/index.js\");\n/* harmony import */ var _App__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/App */ \"./resources/js/App.vue\");\n/* harmony import */ var vue_js_modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vue-js-modal */ \"./node_modules/vue-js-modal/dist/index.js\");\n/* harmony import */ var vue_js_modal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(vue_js_modal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~/components */ \"./resources/js/components/index.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvue__WEBPACK_IMPORTED_MODULE_4__[\"default\"].config.productionTip = false;\nvue__WEBPACK_IMPORTED_MODULE_4__[\"default\"].use((vue_js_modal__WEBPACK_IMPORTED_MODULE_2___default()));\n/* eslint-disable no-new */\n\nnew vue__WEBPACK_IMPORTED_MODULE_4__[\"default\"](_objectSpread({\n  router: _router__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n}, _App__WEBPACK_IMPORTED_MODULE_1__[\"default\"]));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUFBLGdFQUFBLEdBQTJCLEtBQTNCO0FBQ0FBLCtDQUFBLENBQVFHLHFEQUFSO0FBRUE7O0FBQ0EsSUFBSUgsMkNBQUo7RUFDRUMsTUFBTSxFQUFOQSwrQ0FBTUE7QUFEUixHQUVLQyw0Q0FGTCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9hcHAuanM/Y2VkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcbmltcG9ydCByb3V0ZXIgZnJvbSAnfi9yb3V0ZXInXG5pbXBvcnQgQXBwIGZyb20gJ34vQXBwJ1xuaW1wb3J0IFZNb2RhbCBmcm9tICd2dWUtanMtbW9kYWwnXG5cblxuaW1wb3J0ICd+L2NvbXBvbmVudHMnXG5cblZ1ZS5jb25maWcucHJvZHVjdGlvblRpcCA9IGZhbHNlXG5WdWUudXNlKFZNb2RhbCk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLW5ldyAqL1xubmV3IFZ1ZSh7XG4gIHJvdXRlcixcbiAgLi4uQXBwXG59KVxuIl0sIm5hbWVzIjpbIlZ1ZSIsInJvdXRlciIsIkFwcCIsIlZNb2RhbCIsImNvbmZpZyIsInByb2R1Y3Rpb25UaXAiLCJ1c2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/js/components/index.js":
/*!******************************************!*\
  !*** ./resources/js/components/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\");\n/* harmony import */ var _Child_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Child.vue */ \"./resources/js/components/Child.vue\");\n\n // Components that are registered globaly.\n\n[_Child_vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"]].forEach(function (Component) {\n  vue__WEBPACK_IMPORTED_MODULE_1__[\"default\"].component(Component.name, Component);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtDQUdBOztBQUNBLENBQ0lDLGtEQURKLEVBRUVDLE9BRkYsQ0FFVSxVQUFBQyxTQUFTLEVBQUk7RUFDckJILHFEQUFBLENBQWNHLFNBQVMsQ0FBQ0UsSUFBeEIsRUFBOEJGLFNBQTlCO0FBQ0QsQ0FKRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2luZGV4LmpzPzkzNTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXG5pbXBvcnQgQ2hpbGQgZnJvbSAnLi9DaGlsZC52dWUnXG5cbi8vIENvbXBvbmVudHMgdGhhdCBhcmUgcmVnaXN0ZXJlZCBnbG9iYWx5LlxuW1xuICAgIENoaWxkXG5dLmZvckVhY2goQ29tcG9uZW50ID0+IHtcbiAgVnVlLmNvbXBvbmVudChDb21wb25lbnQubmFtZSwgQ29tcG9uZW50KVxufSkiXSwibmFtZXMiOlsiVnVlIiwiQ2hpbGQiLCJmb3JFYWNoIiwiQ29tcG9uZW50IiwiY29tcG9uZW50IiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/components/index.js\n");

/***/ }),

/***/ "./resources/js/middleware/example.js":
/*!********************************************!*\
  !*** ./resources/js/middleware/example.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/*#__PURE__*/(function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(to, from, next) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            next();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n})());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvbWlkZGxld2FyZS9leGFtcGxlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OzsrQ0FDQTs7Ozs7O0FBQUE7RUFBQSxzRUFBZSxpQkFBT0EsRUFBUCxFQUFXQyxJQUFYLEVBQWlCQyxJQUFqQjtJQUFBO01BQUE7UUFBQTtVQUFBO1lBQ2JBLElBQUk7O1VBRFM7VUFBQTtZQUFBO1FBQUE7TUFBQTtJQUFBO0VBQUEsQ0FBZjs7RUFBQTtJQUFBO0VBQUE7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9taWRkbGV3YXJlL2V4YW1wbGUuanM/Mjk4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jICh0bywgZnJvbSwgbmV4dCkgPT4ge1xuICBuZXh0KClcbn1cbiJdLCJuYW1lcyI6WyJ0byIsImZyb20iLCJuZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/middleware/example.js\n");

/***/ }),

/***/ "./resources/js/router/index.js":
/*!**************************************!*\
  !*** ./resources/js/router/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\");\n/* harmony import */ var vue_meta__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue-meta */ \"./node_modules/vue-meta/dist/vue-meta.esm.js\");\n/* harmony import */ var _routes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./routes */ \"./resources/js/router/routes.js\");\n/* harmony import */ var vue_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vue-router */ \"./node_modules/vue-router/dist/vue-router.esm.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\n\nvue__WEBPACK_IMPORTED_MODULE_2__[\"default\"].use(vue_meta__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\nvue__WEBPACK_IMPORTED_MODULE_2__[\"default\"].use(vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]); // The middleware for every page of the application.\n\nvar globalMiddleware = []; // Load middleware modules dynamically.\n\nvar routeMiddleware = resolveMiddleware(__webpack_require__(\"./resources/js/middleware sync .*\\\\.js$\"));\nvar router = createRouter();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (router);\n/**\n * Create a new router instance.\n *\n * @return {Router}\n */\n\nfunction createRouter() {\n  var router = new vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n    scrollBehavior: scrollBehavior,\n    mode: 'history',\n    routes: _routes__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n  });\n  router.beforeEach(beforeEach);\n  router.afterEach(afterEach);\n  return router;\n}\n/**\n * Global router guard.\n *\n * @param {Route} to\n * @param {Route} from\n * @param {Function} next\n */\n\n\nfunction beforeEach(_x, _x2, _x3) {\n  return _beforeEach.apply(this, arguments);\n}\n/**\n * @param  {Array} components\n * @return {Promise<void>\n */\n\n\nfunction _beforeEach() {\n  _beforeEach = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(to, from, next) {\n    var components, middleware;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            components = [];\n            _context.prev = 1;\n            _context.next = 4;\n            return resolveComponents(router.getMatchedComponents(_objectSpread({}, to)));\n\n          case 4:\n            components = _context.sent;\n            _context.next = 12;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](1);\n\n            if (!/^Loading( CSS)? chunk (\\d)+ failed\\./.test(_context.t0.message)) {\n              _context.next = 12;\n              break;\n            }\n\n            window.location.reload(true);\n            return _context.abrupt(\"return\");\n\n          case 12:\n            if (!(components.length === 0)) {\n              _context.next = 14;\n              break;\n            }\n\n            return _context.abrupt(\"return\", next());\n\n          case 14:\n            // Start the loading bar.\n            if (components[components.length - 1].loading !== false) {\n              router.app.$nextTick(function () {\n                return router.app.$loading.start();\n              });\n            } // Get the middleware for all the matched components.\n\n\n            middleware = getMiddleware(components); // Load async data for all the matched components.\n\n            _context.next = 18;\n            return asyncData(components);\n\n          case 18:\n            // Call each middleware.\n            callMiddleware(middleware, to, from, function () {\n              // Set the application layout only if \"next()\" was called with no args.\n              if (arguments.length === 0) {\n                router.app.setLayout(components[0].layout || '');\n              }\n\n              next.apply(void 0, arguments);\n            });\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 7]]);\n  }));\n  return _beforeEach.apply(this, arguments);\n}\n\nfunction asyncData(_x4) {\n  return _asyncData.apply(this, arguments);\n}\n/**\n * Global after hook.\n *\n * @param {Route} to\n * @param {Route} from\n * @param {Function} next\n */\n\n\nfunction _asyncData() {\n  _asyncData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(components) {\n    var _loop, i, _ret;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(i) {\n              var component, dataFn, _asyncData2;\n\n              return _regeneratorRuntime().wrap(function _loop$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      component = components[i];\n\n                      if (component.asyncData) {\n                        _context2.next = 3;\n                        break;\n                      }\n\n                      return _context2.abrupt(\"return\", \"continue\");\n\n                    case 3:\n                      dataFn = component.data;\n                      _context2.prev = 4;\n                      _context2.next = 7;\n                      return component.asyncData();\n\n                    case 7:\n                      _asyncData2 = _context2.sent;\n\n                      component.data = function () {\n                        return _objectSpread(_objectSpread({}, dataFn ? dataFn.apply(this) : {}), _asyncData2);\n                      };\n\n                      _context2.next = 15;\n                      break;\n\n                    case 11:\n                      _context2.prev = 11;\n                      _context2.t0 = _context2[\"catch\"](4);\n                      component.layout = 'error';\n                      console.error('Failed to load asyncData', _context2.t0);\n\n                    case 15:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _loop, null, [[4, 11]]);\n            });\n            i = 0;\n\n          case 2:\n            if (!(i < components.length)) {\n              _context3.next = 10;\n              break;\n            }\n\n            return _context3.delegateYield(_loop(i), \"t0\", 4);\n\n          case 4:\n            _ret = _context3.t0;\n\n            if (!(_ret === \"continue\")) {\n              _context3.next = 7;\n              break;\n            }\n\n            return _context3.abrupt(\"continue\", 7);\n\n          case 7:\n            i++;\n            _context3.next = 2;\n            break;\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _asyncData.apply(this, arguments);\n}\n\nfunction afterEach(_x5, _x6, _x7) {\n  return _afterEach.apply(this, arguments);\n}\n/**\n * Call each middleware.\n *\n * @param {Array} middleware\n * @param {Route} to\n * @param {Route} from\n * @param {Function} next\n */\n\n\nfunction _afterEach() {\n  _afterEach = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(to, from, next) {\n    return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return router.app.$nextTick();\n\n          case 2:\n            router.app.$loading.finish();\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _afterEach.apply(this, arguments);\n}\n\nfunction callMiddleware(middleware, to, from, next) {\n  var stack = middleware.reverse();\n\n  var _next = function _next() {\n    // Stop if \"_next\" was called with an argument or the stack is empty.\n    if (arguments.length > 0 || stack.length === 0) {\n      if (arguments.length > 0) {\n        router.app.$loading.finish();\n      }\n\n      return next.apply(void 0, arguments);\n    }\n\n    var _parseMiddleware = parseMiddleware(stack.pop()),\n        middleware = _parseMiddleware.middleware,\n        params = _parseMiddleware.params;\n\n    if (typeof middleware === 'function') {\n      middleware(to, from, _next, params);\n    } else if (routeMiddleware[middleware]) {\n      routeMiddleware[middleware](to, from, _next, params);\n    } else {\n      throw Error(\"Undefined middleware [\".concat(middleware, \"]\"));\n    }\n  };\n\n  _next();\n}\n/**\n * @param  {String|Function} middleware\n * @return {Object}\n */\n\n\nfunction parseMiddleware(middleware) {\n  if (typeof middleware === 'function') {\n    return {\n      middleware: middleware\n    };\n  }\n\n  var _middleware$split = middleware.split(':'),\n      _middleware$split2 = _slicedToArray(_middleware$split, 2),\n      name = _middleware$split2[0],\n      params = _middleware$split2[1];\n\n  return {\n    middleware: name,\n    params: params\n  };\n}\n/**\n * Resolve async components.\n *\n * @param  {Array} components\n * @return {Array}\n */\n\n\nfunction resolveComponents(components) {\n  return Promise.all(components.map(function (component) {\n    return typeof component === 'function' ? component() : component;\n  }));\n}\n/**\n * Merge the the global middleware with the components middleware.\n *\n * @param  {Array} components\n * @return {Array}\n */\n\n\nfunction getMiddleware(components) {\n  var middleware = [].concat(globalMiddleware);\n  components.filter(function (c) {\n    return c.middleware;\n  }).forEach(function (component) {\n    if (Array.isArray(component.middleware)) {\n      middleware.push.apply(middleware, _toConsumableArray(component.middleware));\n    } else {\n      middleware.push(component.middleware);\n    }\n  });\n  return middleware;\n}\n/**\n * Scroll Behavior\n *\n * @link https://router.vuejs.org/en/advanced/scroll-behavior.html\n *\n * @param  {Route} to\n * @param  {Route} from\n * @param  {Object|undefined} savedPosition\n * @return {Object}\n */\n\n\nfunction scrollBehavior(to, from, savedPosition) {\n  if (savedPosition) {\n    return savedPosition;\n  }\n\n  if (to.hash) {\n    return {\n      selector: to.hash\n    };\n  }\n\n  var _router$getMatchedCom = router.getMatchedComponents(_objectSpread({}, to)).slice(-1),\n      _router$getMatchedCom2 = _slicedToArray(_router$getMatchedCom, 1),\n      component = _router$getMatchedCom2[0];\n\n  if (component && component.scrollToTop === false) {\n    return {};\n  }\n\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      resolve({\n        x: 0,\n        y: 0\n      });\n    }, 190);\n  });\n}\n/**\n * @param  {Object} requireContext\n * @return {Object}\n */\n\n\nfunction resolveMiddleware(requireContext) {\n  return requireContext.keys().map(function (file) {\n    return [file.replace(/(^.\\/)|(\\.js$)/g, ''), requireContext(file)];\n  }).reduce(function (guards, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        name = _ref2[0],\n        guard = _ref2[1];\n\n    return _objectSpread(_objectSpread({}, guards), {}, _defineProperty({}, name, guard[\"default\"]));\n  }, {});\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/router/index.js\n");

/***/ }),

/***/ "./resources/js/router/routes.js":
/*!***************************************!*\
  !*** ./resources/js/router/routes.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction page(path) {\n  return function () {\n    return __webpack_require__(\"./resources/js/pages lazy recursive ^\\\\.\\\\/.*$\")(\"./\".concat(path)).then(function (m) {\n      return m[\"default\"] || m;\n    });\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([{\n  path: '/',\n  name: 'welcome',\n  component: page('welcome.vue')\n}, {\n  path: '*',\n  component: page('errors/404.vue')\n}]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcm91dGVyL3JvdXRlcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsSUFBVCxDQUFlQyxJQUFmLEVBQXFCO0VBQ25CLE9BQU87SUFBQSxPQUFNLGtGQUE2Q0EsSUFBN0MsR0FBcURDLElBQXJELENBQTBELFVBQUFDLENBQUM7TUFBQSxPQUFJQSxDQUFDLFdBQUQsSUFBYUEsQ0FBakI7SUFBQSxDQUEzRCxDQUFOO0VBQUEsQ0FBUDtBQUNEOztBQUVELGlFQUFlLENBQ2I7RUFBRUYsSUFBSSxFQUFFLEdBQVI7RUFBYUcsSUFBSSxFQUFFLFNBQW5CO0VBQThCQyxTQUFTLEVBQUVMLElBQUksQ0FBQyxhQUFEO0FBQTdDLENBRGEsRUFHYjtFQUFFQyxJQUFJLEVBQUUsR0FBUjtFQUFhSSxTQUFTLEVBQUVMLElBQUksQ0FBQyxnQkFBRDtBQUE1QixDQUhhLENBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcm91dGVyL3JvdXRlcy5qcz80ODI2Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHBhZ2UgKHBhdGgpIHtcbiAgcmV0dXJuICgpID0+IGltcG9ydCgvKiB3ZWJwYWNrQ2h1bmtOYW1lOiAnJyAqLyBgfi9wYWdlcy8ke3BhdGh9YCkudGhlbihtID0+IG0uZGVmYXVsdCB8fCBtKVxufVxuXG5leHBvcnQgZGVmYXVsdCBbXG4gIHsgcGF0aDogJy8nLCBuYW1lOiAnd2VsY29tZScsIGNvbXBvbmVudDogcGFnZSgnd2VsY29tZS52dWUnKSB9LFxuXG4gIHsgcGF0aDogJyonLCBjb21wb25lbnQ6IHBhZ2UoJ2Vycm9ycy80MDQudnVlJykgfVxuXVxuIl0sIm5hbWVzIjpbInBhZ2UiLCJwYXRoIiwidGhlbiIsIm0iLCJuYW1lIiwiY29tcG9uZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/router/routes.js\n");

/***/ }),

/***/ "./node_modules/deepmerge/dist/cjs.js":
/*!********************************************!*\
  !*** ./node_modules/deepmerge/dist/cjs.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn target.propertyIsEnumerable(symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvY2pzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUUsSUFBSTtBQUNOOztBQUVBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZXBtZXJnZS9kaXN0L2Nqcy5qcz82ODZmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGlzTWVyZ2VhYmxlT2JqZWN0ID0gZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxufTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0cmV0dXJuIHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBSZWdFeHBdJ1xuXHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHZhbHVlLCBvcHRpb25zKSB7XG5cdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0PyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9ucylcblx0XHQ6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0fSlcbn1cblxuZnVuY3Rpb24gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpIHtcblx0aWYgKCFvcHRpb25zLmN1c3RvbU1lcmdlKSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZVxuXHR9XG5cdHZhciBjdXN0b21NZXJnZSA9IG9wdGlvbnMuY3VzdG9tTWVyZ2Uoa2V5KTtcblx0cmV0dXJuIHR5cGVvZiBjdXN0b21NZXJnZSA9PT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbU1lcmdlIDogZGVlcG1lcmdlXG59XG5cbmZ1bmN0aW9uIGdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSB7XG5cdHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzXG5cdFx0PyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uKHN5bWJvbCkge1xuXHRcdFx0cmV0dXJuIHRhcmdldC5wcm9wZXJ0eUlzRW51bWVyYWJsZShzeW1ib2wpXG5cdFx0fSlcblx0XHQ6IFtdXG59XG5cbmZ1bmN0aW9uIGdldEtleXModGFyZ2V0KSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyh0YXJnZXQpLmNvbmNhdChnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpXG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5SXNPbk9iamVjdChvYmplY3QsIHByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHByb3BlcnR5IGluIG9iamVjdFxuXHR9IGNhdGNoKF8pIHtcblx0XHRyZXR1cm4gZmFsc2Vcblx0fVxufVxuXG4vLyBQcm90ZWN0cyBmcm9tIHByb3RvdHlwZSBwb2lzb25pbmcgYW5kIHVuZXhwZWN0ZWQgbWVyZ2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluLlxuZnVuY3Rpb24gcHJvcGVydHlJc1Vuc2FmZSh0YXJnZXQsIGtleSkge1xuXHRyZXR1cm4gcHJvcGVydHlJc09uT2JqZWN0KHRhcmdldCwga2V5KSAvLyBQcm9wZXJ0aWVzIGFyZSBzYWZlIHRvIG1lcmdlIGlmIHRoZXkgZG9uJ3QgZXhpc3QgaW4gdGhlIHRhcmdldCB5ZXQsXG5cdFx0JiYgIShPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkgLy8gdW5zYWZlIGlmIHRoZXkgZXhpc3QgdXAgdGhlIHByb3RvdHlwZSBjaGFpbixcblx0XHRcdCYmIE9iamVjdC5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRhcmdldCwga2V5KSkgLy8gYW5kIGFsc28gdW5zYWZlIGlmIHRoZXkncmUgbm9uZW51bWVyYWJsZS5cbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0dmFyIGRlc3RpbmF0aW9uID0ge307XG5cdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRnZXRLZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh0YXJnZXRba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSk7XG5cdH1cblx0Z2V0S2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0aWYgKHByb3BlcnR5SXNVbnNhZmUodGFyZ2V0LCBrZXkpKSB7XG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cblx0XHRpZiAocHJvcGVydHlJc09uT2JqZWN0KHRhcmdldCwga2V5KSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGdldE1lcmdlRnVuY3Rpb24oa2V5LCBvcHRpb25zKSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdG9wdGlvbnMuYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblx0b3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCA9IG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgfHwgaXNNZXJnZWFibGVPYmplY3Q7XG5cdC8vIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIGlzIGFkZGVkIHRvIGBvcHRpb25zYCBzbyB0aGF0IGN1c3RvbSBhcnJheU1lcmdlKClcblx0Ly8gaW1wbGVtZW50YXRpb25zIGNhbiB1c2UgaXQuIFRoZSBjYWxsZXIgbWF5IG5vdCByZXBsYWNlIGl0LlxuXHRvcHRpb25zLmNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQ7XG5cblx0dmFyIHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG5cdHZhciB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuXHR2YXIgc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCA9IHNvdXJjZUlzQXJyYXkgPT09IHRhcmdldElzQXJyYXk7XG5cblx0aWYgKCFzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoKSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIGlmIChzb3VyY2VJc0FycmF5KSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMuYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9ucykge1xuXHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXknKVxuXHR9XG5cblx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zKVxuXHR9LCB7fSlcbn07XG5cbnZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwbWVyZ2VfMTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/deepmerge/dist/cjs.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz82NWU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ }),

/***/ "./node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-9.use[0]!./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Loading.vue?vue&type=style&index=0&id=6ca9e6be&scoped=true&lang=css&":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-9.use[0]!./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Loading.vue?vue&type=style&index=0&id=6ca9e6be&scoped=true&lang=css& ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P2Nsb25lZFJ1bGVTZXQtOS51c2VbMF0hLi9ub2RlX21vZHVsZXMvbGFyYXZlbC1taXgvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtOS51c2VbMV0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtOS51c2VbMl0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0xvYWRpbmcudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NmNhOWU2YmUmc2NvcGVkPXRydWUmbGFuZz1jc3MmLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0xvYWRpbmcudnVlPzM2MDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-9.use[0]!./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Loading.vue?vue&type=style&index=0&id=6ca9e6be&scoped=true&lang=css&\n");

/***/ }),

/***/ "./node_modules/vue-js-modal/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/vue-js-modal/dist/index.js ***!
  \*************************************************/
/***/ ((module) => {

eval("!function(t,e){ true?module.exports=e():0}(window,function(){return i={},o.m=n=[function(t,e,n){var i=n(7);\"string\"==typeof i&&(i=[[t.i,i,\"\"]]),i.locals&&(t.exports=i.locals);(0,n(4).default)(\"d763679c\",i,!1,{})},function(t,e,n){var i=n(10);\"string\"==typeof i&&(i=[[t.i,i,\"\"]]),i.locals&&(t.exports=i.locals);(0,n(4).default)(\"6b9cc0e0\",i,!1,{})},function(t,e,n){var i=n(12);\"string\"==typeof i&&(i=[[t.i,i,\"\"]]),i.locals&&(t.exports=i.locals);(0,n(4).default)(\"663c004e\",i,!1,{})},function(t,e){t.exports=function(n){var s=[];return s.toString=function(){return this.map(function(t){var e=function(t,e){var n=t[1]||\"\",i=t[3];if(!i)return n;if(e&&\"function\"==typeof btoa){var o=function(t){return\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+\" */\"}(i),r=i.sources.map(function(t){return\"/*# sourceURL=\"+i.sourceRoot+t+\" */\"});return[n].concat(r).concat([o]).join(\"\\n\")}return[n].join(\"\\n\")}(t,n);return t[2]?\"@media \"+t[2]+\"{\"+e+\"}\":e}).join(\"\")},s.i=function(t,e){\"string\"==typeof t&&(t=[[null,t,\"\"]]);for(var n={},i=0;i<this.length;i++){var o=this[i][0];\"number\"==typeof o&&(n[o]=!0)}for(i=0;i<t.length;i++){var r=t[i];\"number\"==typeof r[0]&&n[r[0]]||(e&&!r[2]?r[2]=e:e&&(r[2]=\"(\"+r[2]+\") and (\"+e+\")\"),s.push(r))}},s}},function(t,e,n){\"use strict\";function l(t,e){for(var n=[],i={},o=0;o<e.length;o++){var r=e[o],s=r[0],a={id:t+\":\"+o,css:r[1],media:r[2],sourceMap:r[3]};i[s]?i[s].parts.push(a):n.push(i[s]={id:s,parts:[a]})}return n}n.r(e),n.d(e,\"default\",function(){return v});var i=\"undefined\"!=typeof document;if(\"undefined\"!=typeof DEBUG&&DEBUG&&!i)throw new Error(\"vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\");var u={},o=i&&(document.head||document.getElementsByTagName(\"head\")[0]),r=null,s=0,c=!1,a=function(){},d=null,h=\"data-vue-ssr-id\",f=\"undefined\"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());function v(s,t,e,n){c=e,d=n||{};var a=l(s,t);return p(a),function(t){for(var e=[],n=0;n<a.length;n++){var i=a[n];(o=u[i.id]).refs--,e.push(o)}t?p(a=l(s,t)):a=[];for(n=0;n<e.length;n++){var o;if(0===(o=e[n]).refs){for(var r=0;r<o.parts.length;r++)o.parts[r]();delete u[o.id]}}}}function p(t){for(var e=0;e<t.length;e++){var n=t[e],i=u[n.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](n.parts[o]);for(;o<n.parts.length;o++)i.parts.push(b(n.parts[o]));i.parts.length>n.parts.length&&(i.parts.length=n.parts.length)}else{var r=[];for(o=0;o<n.parts.length;o++)r.push(b(n.parts[o]));u[n.id]={id:n.id,refs:1,parts:r}}}}function m(){var t=document.createElement(\"style\");return t.type=\"text/css\",o.appendChild(t),t}function b(e){var n,i,t=document.querySelector(\"style[\"+h+'~=\"'+e.id+'\"]');if(t){if(c)return a;t.parentNode.removeChild(t)}if(f){var o=s++;t=r=r||m(),n=w.bind(null,t,o,!1),i=w.bind(null,t,o,!0)}else t=m(),n=function(t,e){var n=e.css,i=e.media,o=e.sourceMap;i&&t.setAttribute(\"media\",i);d.ssrId&&t.setAttribute(h,e.id);o&&(n+=\"\\n/*# sourceURL=\"+o.sources[0]+\" */\",n+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+\" */\");if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,t),i=function(){t.parentNode.removeChild(t)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else i()}}var g,y=(g=[],function(t,e){return g[t]=e,g.filter(Boolean).join(\"\\n\")});function w(t,e,n,i){var o=n?\"\":i.css;if(t.styleSheet)t.styleSheet.cssText=y(e,o);else{var r=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}},function(t,z,e){\"use strict\";(function(t){var i=function(){if(\"undefined\"!=typeof Map)return Map;function i(t,n){var i=-1;return t.some(function(t,e){return t[0]===n&&(i=e,!0)}),i}return Object.defineProperty(t.prototype,\"size\",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var e=i(this.__entries__,t),n=this.__entries__[e];return n&&n[1]},t.prototype.set=function(t,e){var n=i(this.__entries__,t);~n?this.__entries__[n][1]=e:this.__entries__.push([t,e])},t.prototype.delete=function(t){var e=this.__entries__,n=i(e,t);~n&&e.splice(n,1)},t.prototype.has=function(t){return!!~i(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0)},t.prototype.forEach=function(t,e){void 0===e&&(e=null);for(var n=0,i=this.__entries__;n<i.length;n++){var o=i[n];t.call(e,o[1],o[0])}},t;function t(){this.__entries__=[]}}(),n=\"undefined\"!=typeof window&&\"undefined\"!=typeof document&&window.document===document,e=void 0!==t&&t.Math===Math?t:\"undefined\"!=typeof self&&self.Math===Math?self:\"undefined\"!=typeof window&&window.Math===Math?window:Function(\"return this\")(),l=\"function\"==typeof requestAnimationFrame?requestAnimationFrame.bind(e):function(t){return setTimeout(function(){return t(Date.now())},1e3/60)},u=2;var o=[\"top\",\"right\",\"bottom\",\"left\",\"width\",\"height\",\"size\",\"weight\"],r=\"undefined\"!=typeof MutationObserver,s=(a.prototype.addObserver=function(t){~this.observers_.indexOf(t)||this.observers_.push(t),this.connected_||this.connect_()},a.prototype.removeObserver=function(t){var e=this.observers_,n=e.indexOf(t);~n&&e.splice(n,1),!e.length&&this.connected_&&this.disconnect_()},a.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},a.prototype.updateObservers_=function(){var t=this.observers_.filter(function(t){return t.gatherActive(),t.hasActive()});return t.forEach(function(t){return t.broadcastActive()}),0<t.length},a.prototype.connect_=function(){n&&!this.connected_&&(document.addEventListener(\"transitionend\",this.onTransitionEnd_),window.addEventListener(\"resize\",this.refresh),r?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener(\"DOMSubtreeModified\",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},a.prototype.disconnect_=function(){n&&this.connected_&&(document.removeEventListener(\"transitionend\",this.onTransitionEnd_),window.removeEventListener(\"resize\",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener(\"DOMSubtreeModified\",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},a.prototype.onTransitionEnd_=function(t){var e=t.propertyName,n=void 0===e?\"\":e;o.some(function(t){return!!~n.indexOf(t)})&&this.refresh()},a.getInstance=function(){return this.instance_||(this.instance_=new a),this.instance_},a.instance_=null,a);function a(){function t(){r&&(r=!1,i()),s&&n()}function e(){l(t)}function n(){var t=Date.now();if(r){if(t-a<u)return;s=!0}else s=!(r=!0),setTimeout(e,o);a=t}var i,o,r,s,a;this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=(i=this.refresh.bind(this),s=r=!(o=20),a=0,n)}var c=function(t,e){for(var n=0,i=Object.keys(e);n<i.length;n++){var o=i[n];Object.defineProperty(t,o,{value:e[o],enumerable:!1,writable:!1,configurable:!0})}return t},h=function(t){return t&&t.ownerDocument&&t.ownerDocument.defaultView||e},f=g(0,0,0,0);function v(t){return parseFloat(t)||0}function p(n){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];return t.reduce(function(t,e){return t+v(n[\"border-\"+e+\"-width\"])},0)}function d(t){var e=t.clientWidth,n=t.clientHeight;if(!e&&!n)return f;var i,o=h(t).getComputedStyle(t),r=function(t){for(var e={},n=0,i=[\"top\",\"right\",\"bottom\",\"left\"];n<i.length;n++){var o=i[n],r=t[\"padding-\"+o];e[o]=v(r)}return e}(o),s=r.left+r.right,a=r.top+r.bottom,l=v(o.width),u=v(o.height);if(\"border-box\"===o.boxSizing&&(Math.round(l+s)!==e&&(l-=p(o,\"left\",\"right\")+s),Math.round(u+a)!==n&&(u-=p(o,\"top\",\"bottom\")+a)),(i=t)!==h(i).document.documentElement){var c=Math.round(l+s)-e,d=Math.round(u+a)-n;1!==Math.abs(c)&&(l-=c),1!==Math.abs(d)&&(u-=d)}return g(r.left,r.top,l,u)}var m=\"undefined\"!=typeof SVGGraphicsElement?function(t){return t instanceof h(t).SVGGraphicsElement}:function(t){return t instanceof h(t).SVGElement&&\"function\"==typeof t.getBBox};function b(t){return n?m(t)?g(0,0,(e=t.getBBox()).width,e.height):d(t):f;var e}function g(t,e,n,i){return{x:t,y:e,width:n,height:i}}var y=(w.prototype.isActive=function(){var t=b(this.target);return(this.contentRect_=t).width!==this.broadcastWidth||t.height!==this.broadcastHeight},w.prototype.broadcastRect=function(){var t=this.contentRect_;return this.broadcastWidth=t.width,this.broadcastHeight=t.height,t},w);function w(t){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=g(0,0,0,0),this.target=t}var _=function(t,e){var n,i,o,r,s,a,l,u=(i=(n=e).x,o=n.y,r=n.width,s=n.height,a=\"undefined\"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,l=Object.create(a.prototype),c(l,{x:i,y:o,width:r,height:s,top:o,right:i+r,bottom:s+o,left:i}),l);c(this,{target:t,contentRect:u})},E=(x.prototype.observe=function(t){if(!arguments.length)throw new TypeError(\"1 argument required, but only 0 present.\");if(\"undefined\"!=typeof Element&&Element instanceof Object){if(!(t instanceof h(t).Element))throw new TypeError('parameter 1 is not of type \"Element\".');var e=this.observations_;e.has(t)||(e.set(t,new y(t)),this.controller_.addObserver(this),this.controller_.refresh())}},x.prototype.unobserve=function(t){if(!arguments.length)throw new TypeError(\"1 argument required, but only 0 present.\");if(\"undefined\"!=typeof Element&&Element instanceof Object){if(!(t instanceof h(t).Element))throw new TypeError('parameter 1 is not of type \"Element\".');var e=this.observations_;e.has(t)&&(e.delete(t),e.size||this.controller_.removeObserver(this))}},x.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},x.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach(function(t){t.isActive()&&e.activeObservations_.push(t)})},x.prototype.broadcastActive=function(){if(this.hasActive()){var t=this.callbackCtx_,e=this.activeObservations_.map(function(t){return new _(t.target,t.broadcastRect())});this.callback_.call(t,e,t),this.clearActive()}},x.prototype.clearActive=function(){this.activeObservations_.splice(0)},x.prototype.hasActive=function(){return 0<this.activeObservations_.length},x);function x(t,e,n){if(this.activeObservations_=[],this.observations_=new i,\"function\"!=typeof t)throw new TypeError(\"The callback provided as parameter 1 is not a function.\");this.callback_=t,this.controller_=e,this.callbackCtx_=n}var T=new(\"undefined\"!=typeof WeakMap?WeakMap:i),O=function t(e){if(!(this instanceof t))throw new TypeError(\"Cannot call a class as a function.\");if(!arguments.length)throw new TypeError(\"1 argument required, but only 0 present.\");var n=s.getInstance(),i=new E(e,n,this);T.set(this,i)};[\"observe\",\"unobserve\",\"disconnect\"].forEach(function(e){O.prototype[e]=function(){var t;return(t=T.get(this))[e].apply(t,arguments)}});var S=void 0!==e.ResizeObserver?e.ResizeObserver:O;z.a=S}).call(this,e(8))},function(t,e,n){\"use strict\";var i=n(0);n.n(i).a},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,\"\\n.vue-modal-top,\\n.vue-modal-bottom,\\n.vue-modal-left,\\n.vue-modal-right,\\n.vue-modal-topRight,\\n.vue-modal-topLeft,\\n.vue-modal-bottomLeft,\\n.vue-modal-bottomRight {\\n  display: block;\\n  overflow: hidden;\\n  position: absolute;\\n  background: transparent;\\n  z-index: 9999999;\\n}\\n.vue-modal-topRight,\\n.vue-modal-topLeft,\\n.vue-modal-bottomLeft,\\n.vue-modal-bottomRight {\\n  width: 12px;\\n  height: 12px;\\n}\\n.vue-modal-top {\\n  right: 12;\\n  top: 0;\\n  width: 100%;\\n  height: 12px;\\n  cursor: n-resize;\\n}\\n.vue-modal-bottom {\\n  left: 0;\\n  bottom: 0;\\n  width: 100%;\\n  height: 12px;\\n  cursor: s-resize;\\n}\\n.vue-modal-left {\\n  left: 0;\\n  top: 0;\\n  width: 12px;\\n  height: 100%;\\n  cursor: w-resize;\\n}\\n.vue-modal-right {\\n  right: 0;\\n  top: 0;\\n  width: 12px;\\n  height: 100%;\\n  cursor: e-resize;\\n}\\n.vue-modal-topRight {\\n  right: 0;\\n  top: 0;\\n  background: transparent;\\n  cursor: ne-resize;\\n}\\n.vue-modal-topLeft {\\n  left: 0;\\n  top: 0;\\n  cursor: nw-resize;\\n}\\n.vue-modal-bottomLeft {\\n  left: 0;\\n  bottom: 0;\\n  cursor: sw-resize;\\n}\\n.vue-modal-bottomRight {\\n  right: 0;\\n  bottom: 0;\\n  cursor: se-resize;\\n}\\n#vue-modal-triangle::after {\\n  display: block;\\n  position: absolute;\\n  content: '';\\n  background: transparent;\\n  left: 0;\\n  top: 0;\\n  width: 0;\\n  height: 0;\\n  border-bottom: 10px solid #ddd;\\n  border-left: 10px solid transparent;\\n}\\n#vue-modal-triangle.clicked::after {\\n  border-bottom: 10px solid #369be9;\\n}\\n\",\"\"])},function(t,e){var n;n=function(){return this}();try{n=n||new Function(\"return this\")()}catch(t){\"object\"==typeof window&&(n=window)}t.exports=n},function(t,e,n){\"use strict\";var i=n(1);n.n(i).a},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,\"\\n.vm--block-scroll {\\n  overflow: hidden;\\n  width: 100vw;\\n}\\n.vm--container {\\n  position: fixed;\\n  box-sizing: border-box;\\n  left: 0;\\n  top: 0;\\n  width: 100%;\\n  height: 100vh;\\n  z-index: 999;\\n}\\n.vm--overlay {\\n  position: fixed;\\n  box-sizing: border-box;\\n  left: 0;\\n  top: 0;\\n  width: 100%;\\n  height: 100vh;\\n  background: rgba(0, 0, 0, 0.2);\\n  /* z-index: 999; */\\n  opacity: 1;\\n}\\n.vm--container.scrollable {\\n  height: 100%;\\n  min-height: 100vh;\\n  overflow-y: auto;\\n  -webkit-overflow-scrolling: touch;\\n}\\n.vm--modal {\\n  position: relative;\\n  overflow: hidden;\\n  box-sizing: border-box;\\n\\n  background-color: white;\\n  border-radius: 3px;\\n  box-shadow: 0 20px 60px -2px rgba(27, 33, 58, 0.4);\\n}\\n.vm--container.scrollable .vm--modal {\\n  margin-bottom: 2px;\\n}\\n.vm--top-right-slot {\\n  display: block;\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n}\\n.vm-transition--overlay-enter-active,\\n.vm-transition--overlay-leave-active {\\n  transition: all 50ms;\\n}\\n.vm-transition--overlay-enter,\\n.vm-transition--overlay-leave-active {\\n  opacity: 0;\\n}\\n.vm-transition--modal-enter-active,\\n.vm-transition--modal-leave-active {\\n  transition: all 400ms;\\n}\\n.vm-transition--modal-enter,\\n.vm-transition--modal-leave-active {\\n  opacity: 0;\\n  transform: translateY(-20px);\\n}\\n.vm-transition--default-enter-active,\\n.vm-transition--default-leave-active {\\n  transition: all 2ms;\\n}\\n.vm-transition--default-enter,\\n.vm-transition--default-leave-active {\\n  opacity: 0;\\n}\\n\",\"\"])},function(t,e,n){\"use strict\";var i=n(2);n.n(i).a},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,\"\\n.vue-dialog {\\n  font-size: 14px;\\n}\\n.vue-dialog div {\\n  box-sizing: border-box;\\n}\\n.vue-dialog-content {\\n  flex: 1 0 auto;\\n  width: 100%;\\n  padding: 14px;\\n}\\n.vue-dialog-content-title {\\n  font-weight: 600;\\n  padding-bottom: 14px;\\n}\\n.vue-dialog-buttons {\\n  display: flex;\\n  flex: 0 1 auto;\\n  width: 100%;\\n  border-top: 1px solid #eee;\\n}\\n.vue-dialog-buttons-none {\\n  width: 100%;\\n  padding-bottom: 14px;\\n}\\n.vue-dialog-button {\\n  font-size: inherit;\\n  background: transparent;\\n  padding: 0;\\n  margin: 0;\\n  border: 0;\\n  cursor: pointer;\\n  box-sizing: border-box;\\n  line-height: 40px;\\n  height: 40px;\\n  color: inherit;\\n  font: inherit;\\n  outline: none;\\n}\\n.vue-dialog-button:hover {\\n  background: #f9f9f9;\\n}\\n.vue-dialog-button:active {\\n  background: #f3f3f3;\\n}\\n.vue-dialog-button:not(:first-of-type) {\\n  border-left: 1px solid #eee;\\n}\\n\",\"\"])},function(t,e,n){\"use strict\";n.r(e),n.d(e,\"Modal\",function(){return W}),n.d(e,\"Dialog\",function(){return X}),n.d(e,\"version\",function(){return J});function i(){var e=this,t=e.$createElement,n=e._self._c||t;return e.visible?n(\"div\",{class:e.containerClass},[n(\"transition\",{attrs:{name:e.guaranteedOverlayTransition},on:{\"before-enter\":e.beforeOverlayTransitionEnter,\"after-enter\":e.afterOverlayTransitionEnter,\"before-leave\":e.beforeOverlayTransitionLeave,\"after-leave\":e.afterOverlayTransitionLeave}},[e.visibility.overlay?n(\"div\",{staticClass:\"vm--overlay\",attrs:{\"data-modal\":e.name,\"aria-expanded\":e.visibility.overlay.toString()},on:{click:function(t){return t.target!==t.currentTarget?null:(t.stopPropagation(),e.onOverlayClick(t))}}},[n(\"div\",{staticClass:\"vm--top-right-slot\"},[e._t(\"top-right\")],2)]):e._e()]),e._v(\" \"),n(\"transition\",{attrs:{name:e.guaranteedModalTransition},on:{\"before-enter\":e.beforeModalTransitionEnter,\"after-enter\":e.afterModalTransitionEnter,\"before-leave\":e.beforeModalTransitionLeave,\"after-leave\":e.afterModalTransitionLeave}},[e.visibility.modal?n(\"div\",{ref:\"modal\",class:e.modalClass,style:e.modalStyle,attrs:{\"aria-expanded\":e.visibility.modal.toString(),role:\"dialog\",\"aria-modal\":\"true\"}},[e._t(\"default\"),e._v(\" \"),e.resizable&&!e.isAutoHeight?n(\"resizer\",{attrs:{\"min-width\":e.minWidth,\"min-height\":e.minHeight,\"max-width\":e.maxWidth,\"max-height\":e.maxHeight,\"viewport-height\":e.viewportHeight,\"viewport-width\":e.viewportWidth,\"resize-indicator\":e.resizeIndicator,\"resize-edges\":e.resizeEdges},on:{resize:e.onModalResize}}):e._e()],2):e._e()])],1):e._e()}function o(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",[this.resizeEdges.includes(\"t\")?n(\"div\",{staticClass:\"vue-modal-top\"}):t._e(),t._v(\" \"),this.resizeEdges.includes(\"b\")?n(\"div\",{staticClass:\"vue-modal-bottom\"}):t._e(),t._v(\" \"),this.resizeEdges.includes(\"l\")?n(\"div\",{staticClass:\"vue-modal-left\"}):t._e(),t._v(\" \"),this.resizeEdges.includes(\"r\")?n(\"div\",{staticClass:\"vue-modal-right\"}):t._e(),t._v(\" \"),this.resizeEdges.includes(\"tr\")?n(\"div\",{staticClass:\"vue-modal-topRight\"}):t._e(),t._v(\" \"),this.resizeEdges.includes(\"tl\")?n(\"div\",{staticClass:\"vue-modal-topLeft\"}):t._e(),t._v(\" \"),this.resizeEdges.includes(\"br\")?n(\"div\",{class:t.className,attrs:{id:t.getID}}):t._e(),t._v(\" \"),this.resizeEdges.includes(\"bl\")?n(\"div\",{staticClass:\"vue-modal-bottomLeft\"}):t._e()])}o._withStripped=i._withStripped=!0;function h(t,e,n){return n<t?t:e<n?e:n}function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(t){o=!0,r=t}finally{try{i||null==a.return||a.return()}finally{if(o)throw r}}return n}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}()}function u(){var t=window.innerWidth,e=document.documentElement.clientWidth;return t&&e?Math.min(t,e):e||t}function a(t){return t.split(\";\").map(function(t){return t.trim()}).filter(Boolean).map(function(t){return t.split(\":\")}).reduce(function(t,e){var n=s(e,2);return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);\"function\"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),i.forEach(function(t){r(e,t,n[t])})}return e}({},t,r({},n[0],n[1]))},{})}function f(t){return t.touches&&0<t.touches.length?t.touches[0]:t}var v=[\"INPUT\",\"TEXTAREA\",\"SELECT\"],c=function(t){var e=0<arguments.length&&void 0!==t?t:0;return function(){return(e++).toString()}}(),l={name:\"VueJsModalResizer\",props:{minHeight:{type:Number,default:0},minWidth:{type:Number,default:0},maxWidth:{type:Number,default:Number.MAX_SAFE_INTEGER},maxHeight:{type:Number,default:Number.MAX_SAFE_INTEGER},viewportWidth:{type:Number,required:!0},viewportHeight:{type:Number,required:!0},resizeIndicator:{type:Boolean,default:!0},resizeEdges:{type:Array,required:!0}},data:function(){return{clicked:!1,targetClass:\"\",size:{},initialX:0,initialY:0}},mounted:function(){this.$el.addEventListener(\"mousedown\",this.start,!1)},computed:{className:function(){return[\"vue-modal-bottomRight\",{clicked:this.clicked}]},getID:function(){return this.resizeIndicator?\"vue-modal-triangle\":\"\"}},methods:{start:function(t){this.targetClass=t.target.className,this.clicked=!0,this.initialX=t.clientX,this.initialY=t.clientY,window.addEventListener(\"mousemove\",this.mousemove,!1),window.addEventListener(\"mouseup\",this.stop,!1),t.stopPropagation(),t.preventDefault()},stop:function(){this.clicked=!1,this.clicked=!1,this.targetClass=\"\",this.initialX=0,this.initialY=0,window.removeEventListener(\"mousemove\",this.mousemove,!1),window.removeEventListener(\"mouseup\",this.stop,!1),this.$emit(\"resize-stop\",{element:this.$el.parentElement,size:this.size})},mousemove:function(t){this.resize(t)},resize:function(t){var e=this.$el.parentElement,n=t.clientX,i=t.clientY,o=parseInt(e.style.width.replace(\"px\",\"\")),r=parseInt(e.style.height.replace(\"px\",\"\"));if(!(t.clientX>this.viewportWidth||t.clientX<0)&&!(t.clientY>this.viewportHeight||t.clientY<0)&&e){switch(this.targetClass){case\"vue-modal-right\":n-=e.offsetLeft,i=r;break;case\"vue-modal-left\":i=r,n=o+(this.initialX-t.clientX);break;case\"vue-modal-top\":n=o,i=r+(this.initialY-t.clientY);break;case\"vue-modal-bottom\":n=o,i-=e.offsetTop;break;case\"vue-modal-bottomRight\":n-=e.offsetLeft,i-=e.offsetTop;break;case\"vue-modal-topRight\":n-=e.offsetLeft,i=r+(this.initialY-t.clientY);break;case\"vue-modal-bottomLeft\":n=o+(this.initialX-t.clientX),i-=e.offsetTop;break;case\"vue-modal-topLeft\":n=o+(this.initialX-t.clientX),i=r+(this.initialY-t.clientY);break;default:console.error(\"Incorrrect/no resize direction.\")}var s=Math.min(u(),this.maxWidth),a=Math.min(window.innerHeight,this.maxHeight);n=h(this.minWidth,s,n),i=h(this.minHeight,a,i),this.initialX=t.clientX,this.initialY=t.clientY,this.size={width:n,height:i};var l={width:n-o,height:i-r};e.style.width=n+\"px\",e.style.height=i+\"px\",this.$emit(\"resize\",{element:e,size:this.size,direction:this.targetClass,dimGrowth:l})}}}};n(6);function d(t,e,n,i,o,r,s,a){var l,u=\"function\"==typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=n,u._compiled=!0),i&&(u.functional=!0),r&&(u._scopeId=\"data-v-\"+r),s?(l=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||\"undefined\"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(s)},u._ssrRegister=l):o&&(l=a?function(){o.call(this,this.$root.$options.shadowRoot)}:o),l)if(u.functional){u._injectStyles=l;var c=u.render;u.render=function(t,e){return l.call(e),c(t,e)}}else{var d=u.beforeCreate;u.beforeCreate=d?[].concat(d,l):[l]}return{exports:t,options:u}}var p=d(l,o,[],!1,null,null,null);p.options.__file=\"src/components/Resizer.vue\";var m=p.exports;function b(t){return(b=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t})(t)}function g(t){switch(b(t)){case\"number\":return{type:\"px\",value:t};case\"string\":return function(e){if(\"auto\"===e)return{type:e,value:0};var t=_.find(function(t){return t.regexp.test(e)});return t?{type:t.name,value:parseFloat(e)}:{type:\"\",value:e}}(t);default:return{type:\"\",value:t}}}function y(t){if(\"string\"!=typeof t)return 0<=t;var e=g(t);return(\"%\"===e.type||\"px\"===e.type)&&0<e.value}var w=\"[-+]?[0-9]*.?[0-9]+\",_=[{name:\"px\",regexp:new RegExp(\"^\".concat(w,\"px$\"))},{name:\"%\",regexp:new RegExp(\"^\".concat(w,\"%$\"))},{name:\"px\",regexp:new RegExp(\"^\".concat(w,\"$\"))}],E=n(5),x=\"undefined\"!=typeof window&&window.ResizeObserver?ResizeObserver:E.a;function T(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function O(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||\"[object Arguments]\"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance\")}()}function S(t){return e='button:not([disabled]), select:not([disabled]), a[href]:not([disabled]), area[href]:not([disabled]), [contentEditable=\"\"]:not([disabled]), [contentEditable=\"true\"]:not([disabled]), [contentEditable=\"TRUE\"]:not([disabled]), textarea:not([disabled]), iframe:not([disabled]), input:not([disabled]), summary:not([disabled]), [tabindex]:not([tabindex=\"-1\"])',O(t.querySelectorAll(e)||[]);var e}function z(t){return t==document.activeElement}var M=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.root=null,this.elements=[],this.onKeyDown=this.onKeyDown.bind(this),this.enable=this.enable.bind(this),this.disable=this.disable.bind(this),this.firstElement=this.firstElement.bind(this),this.lastElement=this.lastElement.bind(this)}var e,n,i;return e=t,(n=[{key:\"lastElement\",value:function(){return this.elements[this.elements.length-1]||null}},{key:\"firstElement\",value:function(){return this.elements[0]||null}},{key:\"onKeyDown\",value:function(t){var e;if(\"Tab\"===(e=t).key||9===e.keyCode)return t.shiftKey&&z(this.firstElement())?(this.lastElement().focus(),void t.preventDefault()):!document.activeElement||z(this.lastElement())?(this.firstElement().focus(),void t.preventDefault()):void 0}},{key:\"enabled\",value:function(){return!!this.root}},{key:\"enable\",value:function(t){if(t){this.root=t,this.elements=S(this.root);var e=this.firstElement();e&&e.focus(),this.root.addEventListener(\"keydown\",this.onKeyDown)}}},{key:\"disable\",value:function(){this.root.removeEventListener(\"keydown\",this.onKeyDown),this.root=null}}])&&T(e.prototype,n),i&&T(e,i),t}();function L(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function k(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(t){o=!0,r=t}finally{try{i||null==a.return||a.return()}finally{if(o)throw r}}return n}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}()}var R=\"vm-transition--default\",C=\"enter\",$=\"entering\",A=\"leave\",j=\"leavng\",H={name:\"VueJsModal\",props:{name:{required:!0,type:String},resizable:{type:Boolean,default:!1},resizeEdges:{default:function(){return[\"r\",\"br\",\"b\",\"bl\",\"l\",\"tl\",\"t\",\"tr\"]},validator:function(e){return[\"r\",\"br\",\"b\",\"bl\",\"l\",\"tl\",\"t\",\"tr\"].filter(function(t){return-1!==e.indexOf(t)}).length===e.length},type:Array},centerResize:{type:Boolean,default:!0},resizeIndicator:{type:Boolean,default:!0},adaptive:{type:Boolean,default:!1},draggable:{type:[Boolean,String],default:!1},scrollable:{type:Boolean,default:!1},focusTrap:{type:Boolean,default:!1},reset:{type:Boolean,default:!1},overlayTransition:{type:String,default:\"vm-transition--overlay\"},transition:{type:String,default:\"vm-transition--modal\"},clickToClose:{type:Boolean,default:!0},classes:{type:[String,Array],default:function(){return[]}},styles:{type:[String,Array,Object]},minWidth:{type:Number,default:0,validator:function(t){return 0<=t}},minHeight:{type:Number,default:0,validator:function(t){return 0<=t}},maxWidth:{type:Number,default:Number.MAX_SAFE_INTEGER},maxHeight:{type:Number,default:Number.MAX_SAFE_INTEGER},width:{type:[Number,String],default:600,validator:function(t){return\"auto\"===t||y(t)}},height:{type:[Number,String],default:300,validator:function(t){return\"auto\"===t||y(t)}},shiftX:{type:Number,default:.5,validator:function(t){return 0<=t&&t<=1}},shiftY:{type:Number,default:.5,validator:function(t){return 0<=t&&t<=1}}},components:{Resizer:m},data:function(){return{visible:!1,visibility:{modal:!1,overlay:!1},overlayTransitionState:null,modalTransitionState:null,shiftLeft:0,shiftTop:0,modal:{width:0,widthType:\"px\",height:0,heightType:\"px\",renderedHeight:0},viewportHeight:0,viewportWidth:0}},created:function(){this.setInitialSize()},beforeMount:function(){this.$modal.subscription.$on(\"toggle\",this.onToggle),window.addEventListener(\"resize\",this.onWindowResize),window.addEventListener(\"orientationchange\",this.onWindowResize),this.onWindowResize(),this.scrollable&&!this.isAutoHeight&&console.warn('Modal \"'.concat(this.name,'\" has scrollable flag set to true ')+'but height is not \"auto\" ('.concat(this.height,\")\")),this.clickToClose&&window.addEventListener(\"keyup\",this.onEscapeKeyUp)},mounted:function(){var n=this;this.resizeObserver=new x(function(t){if(0<t.length){var e=k(t,1)[0];n.modal.renderedHeight=e.contentRect.height}}),this.$focusTrap=new M},beforeDestroy:function(){this.$modal.subscription.$off(\"toggle\",this.onToggle),window.removeEventListener(\"resize\",this.onWindowResize),window.removeEventListener(\"orientationchange\",this.onWindowResize),this.clickToClose&&window.removeEventListener(\"keyup\",this.onEscapeKeyUp),document.body.classList.remove(\"vm--block-scroll\")},computed:{guaranteedOverlayTransition:function(){return this.overlayTransition||R},guaranteedModalTransition:function(){return this.transition||R},isAutoHeight:function(){return\"auto\"===this.modal.heightType},position:function(){var t=this.viewportHeight,e=this.viewportWidth,n=this.shiftLeft,i=this.shiftTop,o=this.shiftX,r=this.shiftY,s=this.trueModalWidth,a=this.trueModalHeight,l=e-s,u=Math.max(t-a,0),c=i+r*u;return{left:parseInt(h(0,l,n+o*l)),top:!a&&this.isAutoHeight?void 0:parseInt(h(0,u,c))}},trueModalWidth:function(){var t=this.viewportWidth,e=this.modal,n=this.adaptive,i=this.minWidth,o=this.maxWidth,r=\"%\"===e.widthType?t/100*e.width:e.width;if(n){var s=Math.max(i,Math.min(t,o));return h(i,s,r)}return r},trueModalHeight:function(){var t=this.viewportHeight,e=this.modal,n=this.isAutoHeight,i=this.adaptive,o=this.minHeight,r=this.maxHeight,s=\"%\"===e.heightType?t/100*e.height:e.height;if(n)return this.modal.renderedHeight;if(i){var a=Math.max(o,Math.min(t,r));return h(o,a,s)}return s},autoHeight:function(){return this.adaptive&&this.modal.renderedHeight>=this.viewportHeight?Math.max(this.minHeight,this.viewportHeight)+\"px\":\"auto\"},containerClass:function(){return[\"vm--container\",this.scrollable&&this.isAutoHeight&&\"scrollable\"]},modalClass:function(){return[\"vm--modal\",this.classes]},stylesProp:function(){return\"string\"==typeof this.styles?a(this.styles):this.styles},modalStyle:function(){return[this.stylesProp,{top:this.position.top+\"px\",left:this.position.left+\"px\",width:this.trueModalWidth+\"px\",height:this.isAutoHeight?this.autoHeight:this.trueModalHeight+\"px\"}]},isComponentReadyToBeDestroyed:function(){return this.overlayTransitionState===A&&this.modalTransitionState===A}},watch:{isComponentReadyToBeDestroyed:function(t){t&&(this.visible=!1)}},methods:{startTransitionEnter:function(){this.visibility.overlay=!0,this.visibility.modal=!0},startTransitionLeave:function(){this.visibility.overlay=!1,this.visibility.modal=!1},beforeOverlayTransitionEnter:function(){this.overlayTransitionState=$},afterOverlayTransitionEnter:function(){this.overlayTransitionState=C},beforeOverlayTransitionLeave:function(){this.overlayTransitionState=j},afterOverlayTransitionLeave:function(){this.overlayTransitionState=A},beforeModalTransitionEnter:function(){var t=this;this.modalTransitionState=$,this.$nextTick(function(){t.resizeObserver.observe(t.$refs.modal)})},afterModalTransitionEnter:function(){this.modalTransitionState=C,this.draggable&&this.addDraggableListeners(),this.focusTrap&&this.$focusTrap.enable(this.$refs.modal);var t=this.createModalEvent({state:\"opened\"});this.$emit(\"opened\",t)},beforeModalTransitionLeave:function(){this.modalTransitionState=j,this.resizeObserver.unobserve(this.$refs.modal),this.$focusTrap.enabled()&&this.$focusTrap.disable()},afterModalTransitionLeave:function(){this.modalTransitionState=A;var t=this.createModalEvent({state:\"closed\"});this.$emit(\"closed\",t)},onToggle:function(t,e,n){if(this.name===t){var i=void 0===e?!this.visible:e;this.toggle(i,n)}},setInitialSize:function(){var t=g(this.width),e=g(this.height);this.modal.width=t.value,this.modal.widthType=t.type,this.modal.height=e.value,this.modal.heightType=e.type},onEscapeKeyUp:function(t){27===t.which&&this.visible&&this.$modal.hide(this.name)},onWindowResize:function(){this.viewportWidth=u(),this.viewportHeight=window.innerHeight,this.ensureShiftInWindowBounds()},createModalEvent:function(t){var e=0<arguments.length&&void 0!==t?t:{};return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);\"function\"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),i.forEach(function(t){L(e,t,n[t])})}return e}({name:this.name,ref:this.$refs.modal||null},e)},onModalResize:function(t){this.modal.widthType=\"px\",this.modal.width=t.size.width,this.modal.heightType=\"px\",this.modal.height=t.size.height,this.centerResize||(this.shiftLeft=this.getResizedShiftLeft(t),this.shiftTop=this.getResizedShiftTop(t));var e=this.modal.size;this.$emit(\"resize\",this.createModalEvent({size:e}))},getResizedShiftLeft:function(t){this.viewportHeight,this.viewportWidth,this.trueModalWidth,this.trueModalHeight;var e=this.shiftLeft;switch(t.direction){case\"vue-modal-topRight\":case\"vue-modal-bottomRight\":case\"vue-modal-right\":e+=.5*t.dimGrowth.width;break;case\"vue-modal-bottomLeft\":case\"vue-modal-topLeft\":case\"vue-modal-left\":e-=.5*t.dimGrowth.width;break;case\"vue-modal-top\":case\"vue-modal-bottom\":break;default:console.error(\"Could not Find Resize Direction In ShiftLeft\")}return e},getResizedShiftTop:function(t){this.viewportHeight,this.viewportWidth,this.trueModalWidth,this.trueModalHeight;var e=this.shiftTop;switch(t.direction){case\"vue-modal-bottom\":case\"vue-modal-bottomRight\":case\"vue-modal-bottomLeft\":e+=.5*t.dimGrowth.height;break;case\"vue-modal-top\":case\"vue-modal-topRight\":case\"vue-modal-topLeft\":e-=.5*t.dimGrowth.height;break;case\"vue-modal-left\":case\"vue-modal-right\":break;default:console.error(\"Could not Find Resize Direction In ShiftTop\")}return e},open:function(t){var e=this;this.reset&&(this.setInitialSize(),this.shiftLeft=0,this.shiftTop=0),this.scrollable&&document.body.classList.add(\"vm--block-scroll\");var n=!1,i=this.createModalEvent({cancel:function(){n=!0},state:\"before-open\",params:t});this.$emit(\"before-open\",i),n?this.scrollable&&document.body.classList.remove(\"vm--block-scroll\"):(\"undefined\"!=typeof document&&document.activeElement&&\"BODY\"!==document.activeElement.tagName&&document.activeElement.blur&&document.activeElement.blur(),this.visible=!0,this.$nextTick(function(){e.startTransitionEnter()}))},close:function(t){this.scrollable&&document.body.classList.remove(\"vm--block-scroll\");var e=!1,n=this.createModalEvent({cancel:function(){e=!0},state:\"before-close\",params:t});this.$emit(\"before-close\",n),e||this.startTransitionLeave()},toggle:function(t,e){this.visible!==t&&(t?this.open(e):this.close(e))},getDraggableElement:function(){return!0===this.draggable?this.$refs.modal:\"string\"==typeof this.draggable?this.$refs.modal.querySelector(this.draggable):null},onOverlayClick:function(){this.clickToClose&&this.toggle(!1)},addDraggableListeners:function(){var s=this,t=this.getDraggableElement();if(t){var a=0,l=0,u=0,c=0,e=function(t){var e=t.target;if(!(n=e)||-1===v.indexOf(n.nodeName)){var n,i=f(t),o=i.clientX,r=i.clientY;document.addEventListener(\"mousemove\",d),document.addEventListener(\"touchmove\",d),document.addEventListener(\"mouseup\",h),document.addEventListener(\"touchend\",h),a=o,l=r,u=s.shiftLeft,c=s.shiftTop}},d=function(t){var e=f(t),n=e.clientX,i=e.clientY;s.shiftLeft=u+n-a,s.shiftTop=c+i-l,t.preventDefault()},h=function t(e){s.ensureShiftInWindowBounds(),document.removeEventListener(\"mousemove\",d),document.removeEventListener(\"touchmove\",d),document.removeEventListener(\"mouseup\",t),document.removeEventListener(\"touchend\",t),e.preventDefault()};t.addEventListener(\"mousedown\",e),t.addEventListener(\"touchstart\",e)}},ensureShiftInWindowBounds:function(){var t=this.viewportHeight,e=this.viewportWidth,n=this.shiftLeft,i=this.shiftTop,o=this.shiftX,r=this.shiftY,s=this.trueModalWidth,a=this.trueModalHeight,l=e-s,u=Math.max(t-a,0),c=n+o*l,d=i+r*u;this.shiftLeft-=c-h(0,l,c),this.shiftTop-=d-h(0,u,d)}}},N=(n(9),d(H,i,[],!1,null,null,null));N.options.__file=\"src/components/Modal.vue\";function D(){var n=this,t=n.$createElement,i=n._self._c||t;return i(n.$modal.context.componentName,{tag:\"component\",attrs:{name:\"dialog\",height:\"auto\",classes:[\"vue-dialog\",this.params.class],width:n.width,\"shift-y\":.3,adaptive:!0,\"focus-trap\":!0,clickToClose:n.clickToClose,transition:n.transition},on:{\"before-open\":n.beforeOpened,\"before-close\":n.beforeClosed,opened:function(t){return n.$emit(\"opened\",t)},closed:function(t){return n.$emit(\"closed\",t)}}},[i(\"div\",{staticClass:\"vue-dialog-content\"},[n.params.title?i(\"div\",{staticClass:\"vue-dialog-content-title\",domProps:{innerHTML:n._s(n.params.title||\"\")}}):n._e(),n._v(\" \"),n.params.component?i(n.params.component,n._b({tag:\"component\"},\"component\",n.params.props,!1)):i(\"div\",{domProps:{innerHTML:n._s(n.params.text||\"\")}})],1),n._v(\" \"),n.buttons?i(\"div\",{staticClass:\"vue-dialog-buttons\"},n._l(n.buttons,function(t,e){return i(\"button\",{key:e,class:t.class||\"vue-dialog-button\",style:n.buttonStyle,attrs:{type:\"button\",tabindex:\"0\"},domProps:{innerHTML:n._s(t.title)},on:{click:function(t){return t.stopPropagation(),n.click(e,t)}}},[n._v(n._s(t.title))])}),0):i(\"div\",{staticClass:\"vue-dialog-buttons-none\"})])}var W=N.exports;D._withStripped=!0;var I={name:\"VueJsDialog\",props:{width:{type:[Number,String],default:400},clickToClose:{type:Boolean,default:!0},transition:{type:String}},data:function(){return{params:{}}},computed:{buttons:function(){return this.params.buttons||[]},buttonStyle:function(){return{flex:\"1 1 \".concat(100/this.buttons.length,\"%\")}}},methods:{beforeOpened:function(t){this.params=t.params||{},this.$emit(\"before-opened\",t)},beforeClosed:function(t){this.params={},this.$emit(\"before-closed\",t)},click:function(t,e,n){var i=2<arguments.length&&void 0!==n?n:\"click\",o=this.buttons[t],r=null==o?void 0:o.handler;\"function\"==typeof r&&r(t,e,{source:i})}}},P=(n(11),d(I,D,[],!1,null,null,null));P.options.__file=\"src/components/Dialog.vue\";function B(){var n=this,t=n.$createElement,i=n._self._c||t;return i(\"div\",{attrs:{id:\"modals-container\"}},n._l(n.modals,function(e){return i(\"modal\",n._g(n._b({key:e.id,on:{closed:function(t){return n.remove(e.id)}}},\"modal\",e.modalAttrs,!1),e.modalListeners),[i(e.component,n._g(n._b({tag:\"component\",on:{close:function(t){return n.$modal.hide(e.modalAttrs.name,t)}}},\"component\",e.componentAttrs,!1),n.$listeners))],1)}),1)}var X=P.exports;function Y(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}B._withStripped=!0;var G=d({data:function(){return{modals:[]}},created:function(){this.$root.__modalContainer=this},mounted:function(){var t=this;this.$modal.subscription.$on(\"hide-all\",function(){t.modals=[]})},methods:{add:function(t,e,n,i){var o=this,r=1<arguments.length&&void 0!==e?e:{},s=2<arguments.length&&void 0!==n?n:{},a=3<arguments.length&&void 0!==i?i:{},l=c(),u=s.name||\"dynamic_modal_\"+l;this.modals.push({id:l,modalAttrs:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);\"function\"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),i.forEach(function(t){Y(e,t,n[t])})}return e}({},s,{name:u}),modalListeners:a,component:t,componentAttrs:r}),this.$nextTick(function(){o.$modal.show(u)})},remove:function(e){var t=this.modals.findIndex(function(t){return t.id===e});-1!==t&&this.modals.splice(t,1)}}},B,[],!1,null,null,null);G.options.__file=\"src/components/ModalsContainer.vue\";var U=G.exports;function F(t){return(F=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t})(t)}function q(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var V=function(i,t){function o(t,e,n,i){var o,r=2<arguments.length&&void 0!==n?n:{},s=3<arguments.length?i:void 0,a=null===(o=c.root)||void 0===o?void 0:o.__modalContainer,l=u.dynamicDefaults||{};null!=a&&a.add(t,e,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);\"function\"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),i.forEach(function(t){q(e,t,n[t])})}return e}({},l,r),s)}var u=1<arguments.length&&void 0!==t?t:{},r=new i,c={root:null,componentName:u.componentName||\"Modal\"};return{context:c,subscription:r,show:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var i=e[0];switch(F(i)){case\"string\":(function(t,e){r.$emit(\"toggle\",t,!0,e)}).apply(void 0,e);break;case\"object\":case\"function\":o.apply(void 0,e);break;default:console.warn(\"[vue-js-modal] $modal() received an unsupported argument as a first argument.\",i)}},hide:function(t,e){r.$emit(\"toggle\",t,!1,e)},hideAll:function(){r.$emit(\"hide-all\")},toggle:function(t,e){r.$emit(\"toggle\",t,void 0,e)},setDynamicModalContainer:function(t){c.root=t;var e,n=(e=document.createElement(\"div\"),document.body.appendChild(e),e);new i({parent:t,render:function(t){return t(U)}}).$mount(n)}}},K={install:function(e,t){var n=1<arguments.length&&void 0!==t?t:{};if(!e.prototype.$modal){var i=new V(e,n);if(Object.defineProperty(e.prototype,\"$modal\",{get:function(){if(this instanceof e){var t=this.$root;i.context.root||i.setDynamicModalContainer(t)}return i}}),e.component(i.context.componentName,W),n.dialog){var o=n.dialogComponentName||\"VDialog\";e.component(o,X)}}}},J=\"__VERSION__\";e.default=K}],o.c=i,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)o.d(n,i,function(t){return e[t]}.bind(null,i));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,\"a\",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p=\"/dist/\",o(o.s=13);function o(t){if(i[t])return i[t].exports;var e=i[t]={i:t,l:!1,exports:{}};return n[t].call(e.exports,e,e.exports,o),e.l=!0,e.exports}var n,i});\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-js-modal/dist/index.js\n");

/***/ }),

/***/ "./resources/js/App.vue":
/*!******************************!*\
  !*** ./resources/js/App.vue ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _App_vue_vue_type_template_id_f348271a___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=template&id=f348271a& */ \"./resources/js/App.vue?vue&type=template&id=f348271a&\");\n/* harmony import */ var _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./App.vue?vue&type=script&lang=js& */ \"./resources/js/App.vue?vue&type=script&lang=js&\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _App_vue_vue_type_template_id_f348271a___WEBPACK_IMPORTED_MODULE_0__.render,\n  _App_vue_vue_type_template_id_f348271a___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"resources/js/App.vue\"\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvQXBwLnZ1ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtGO0FBQzNCO0FBQ0w7OztBQUdsRDtBQUNBLENBQTBGO0FBQzFGLGdCQUFnQix1R0FBVTtBQUMxQixFQUFFLHlFQUFNO0FBQ1IsRUFBRSwyRUFBTTtBQUNSLEVBQUUsb0ZBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSSxLQUFVLEVBQUUsWUFpQmY7QUFDRDtBQUNBLGlFQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL0FwcC52dWU/OWZkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZjM0ODI3MWEmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL3Zhci93d3cvaHRtbC9rYW5iYW4tYm9hcmQvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnZjM0ODI3MWEnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnZjM0ODI3MWEnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnZjM0ODI3MWEnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZjM0ODI3MWEmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignZjM0ODI3MWEnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInJlc291cmNlcy9qcy9BcHAudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/App.vue\n");

/***/ }),

/***/ "./resources/js/components/Child.vue":
/*!*******************************************!*\
  !*** ./resources/js/components/Child.vue ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Child_vue_vue_type_template_id_66ab007e___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Child.vue?vue&type=template&id=66ab007e& */ \"./resources/js/components/Child.vue?vue&type=template&id=66ab007e&\");\n/* harmony import */ var _Child_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Child.vue?vue&type=script&lang=js& */ \"./resources/js/components/Child.vue?vue&type=script&lang=js&\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _Child_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _Child_vue_vue_type_template_id_66ab007e___WEBPACK_IMPORTED_MODULE_0__.render,\n  _Child_vue_vue_type_template_id_66ab007e___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"resources/js/components/Child.vue\"\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9DaGlsZC52dWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvRjtBQUMzQjtBQUNMOzs7QUFHcEQ7QUFDQSxDQUE2RjtBQUM3RixnQkFBZ0IsdUdBQVU7QUFDMUIsRUFBRSwyRUFBTTtBQUNSLEVBQUUsNkVBQU07QUFDUixFQUFFLHNGQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUksS0FBVSxFQUFFLFlBaUJmO0FBQ0Q7QUFDQSxpRUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0NoaWxkLnZ1ZT8xNDBmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQ2hpbGQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY2YWIwMDdlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0NoaWxkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQ2hpbGQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvdmFyL3d3dy9odG1sL2thbmJhbi1ib2FyZC9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc2NmFiMDA3ZScpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc2NmFiMDA3ZScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc2NmFiMDA3ZScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vQ2hpbGQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY2YWIwMDdlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzY2YWIwMDdlJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJyZXNvdXJjZXMvanMvY29tcG9uZW50cy9DaGlsZC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/components/Child.vue\n");

/***/ }),

/***/ "./resources/js/components/Loading.vue":
/*!*********************************************!*\
  !*** ./resources/js/components/Loading.vue ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Loading_vue_vue_type_template_id_6ca9e6be_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Loading.vue?vue&type=template&id=6ca9e6be&scoped=true& */ \"./resources/js/components/Loading.vue?vue&type=template&id=6ca9e6be&scoped=true&\");\n/* harmony import */ var _Loading_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Loading.vue?vue&type=script&lang=js& */ \"./resources/js/components/Loading.vue?vue&type=script&lang=js&\");\n/* harmony import */ var _Loading_vue_vue_type_style_index_0_id_6ca9e6be_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Loading.vue?vue&type=style&index=0&id=6ca9e6be&scoped=true&lang=css& */ \"./resources/js/components/Loading.vue?vue&type=style&index=0&id=6ca9e6be&scoped=true&lang=css&\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  _Loading_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _Loading_vue_vue_type_template_id_6ca9e6be_scoped_true___WEBPACK_IMPORTED_MODULE_0__.render,\n  _Loading_vue_vue_type_template_id_6ca9e6be_scoped_true___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,\n  false,\n  null,\n  \"6ca9e6be\",\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"resources/js/components/Loading.vue\"\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9Mb2FkaW5nLnZ1ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFrRztBQUN2QztBQUNMO0FBQ3RELENBQTJGOzs7QUFHM0Y7QUFDNkY7QUFDN0YsZ0JBQWdCLHVHQUFVO0FBQzFCLEVBQUUsNkVBQU07QUFDUixFQUFFLDJGQUFNO0FBQ1IsRUFBRSxvR0FBZTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLEtBQVUsRUFBRSxZQWlCZjtBQUNEO0FBQ0EsaUVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9Mb2FkaW5nLnZ1ZT9hODQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTG9hZGluZy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NmNhOWU2YmUmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vTG9hZGluZy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0xvYWRpbmcudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0xvYWRpbmcudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NmNhOWU2YmUmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjZjYTllNmJlXCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL3Zhci93d3cvaHRtbC9rYW5iYW4tYm9hcmQvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNmNhOWU2YmUnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNmNhOWU2YmUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNmNhOWU2YmUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0xvYWRpbmcudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTZjYTllNmJlJnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzZjYTllNmJlJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJyZXNvdXJjZXMvanMvY29tcG9uZW50cy9Mb2FkaW5nLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/components/Loading.vue\n");

/***/ }),

/***/ "./resources/js/layouts/default.vue":
/*!******************************************!*\
  !*** ./resources/js/layouts/default.vue ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _default_vue_vue_type_template_id_06bc2b2d___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./default.vue?vue&type=template&id=06bc2b2d& */ \"./resources/js/layouts/default.vue?vue&type=template&id=06bc2b2d&\");\n/* harmony import */ var _default_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./default.vue?vue&type=script&lang=js& */ \"./resources/js/layouts/default.vue?vue&type=script&lang=js&\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _default_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _default_vue_vue_type_template_id_06bc2b2d___WEBPACK_IMPORTED_MODULE_0__.render,\n  _default_vue_vue_type_template_id_06bc2b2d___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"resources/js/layouts/default.vue\"\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvbGF5b3V0cy9kZWZhdWx0LnZ1ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNGO0FBQzNCO0FBQ0w7OztBQUd0RDtBQUNBLENBQTZGO0FBQzdGLGdCQUFnQix1R0FBVTtBQUMxQixFQUFFLDZFQUFNO0FBQ1IsRUFBRSwrRUFBTTtBQUNSLEVBQUUsd0ZBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSSxLQUFVLEVBQUUsWUFpQmY7QUFDRDtBQUNBLGlFQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2xheW91dHMvZGVmYXVsdC52dWU/MmRjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2RlZmF1bHQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTA2YmMyYjJkJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2RlZmF1bHQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9kZWZhdWx0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL3Zhci93d3cvaHRtbC9rYW5iYW4tYm9hcmQvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnMDZiYzJiMmQnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMDZiYzJiMmQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMDZiYzJiMmQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL2RlZmF1bHQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTA2YmMyYjJkJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzA2YmMyYjJkJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJyZXNvdXJjZXMvanMvbGF5b3V0cy9kZWZhdWx0LnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/layouts/default.vue\n");

/***/ }),

/***/ "./resources/js/App.vue?vue&type=script&lang=js&":
/*!*******************************************************!*\
  !*** ./resources/js/App.vue?vue&type=script&lang=js& ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/App.vue?vue&type=script&lang=js&\");\n /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkwsQ0FBQyxpRUFBZSw4TEFBRyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL0FwcC52dWU/YTJjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTUudXNlWzBdIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/App.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./resources/js/components/Child.vue?vue&type=script&lang=js&":
/*!********************************************************************!*\
  !*** ./resources/js/components/Child.vue?vue&type=script&lang=js& ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Child_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Child.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Child.vue?vue&type=script&lang=js&\");\n /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Child_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9DaGlsZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1NLENBQUMsaUVBQWUsZ01BQUcsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0NoaWxkLnZ1ZT81MDk1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNS51c2VbMF0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9DaGlsZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNS51c2VbMF0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9DaGlsZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/components/Child.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./resources/js/components/Loading.vue?vue&type=script&lang=js&":
/*!**********************************************************************!*\
  !*** ./resources/js/components/Loading.vue?vue&type=script&lang=js& ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Loading_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Loading.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Loading.vue?vue&type=script&lang=js&\");\n /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Loading_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9Mb2FkaW5nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcU0sQ0FBQyxpRUFBZSxrTUFBRyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvTG9hZGluZy52dWU/YmNjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTUudXNlWzBdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTG9hZGluZy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNS51c2VbMF0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Mb2FkaW5nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/components/Loading.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./resources/js/layouts/default.vue?vue&type=script&lang=js&":
/*!*******************************************************************!*\
  !*** ./resources/js/layouts/default.vue?vue&type=script&lang=js& ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_default_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./default.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/layouts/default.vue?vue&type=script&lang=js&\");\n /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_default_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvbGF5b3V0cy9kZWZhdWx0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcU0sQ0FBQyxpRUFBZSxrTUFBRyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2xheW91dHMvZGVmYXVsdC52dWU/ZmM0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTUudXNlWzBdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vZGVmYXVsdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNS51c2VbMF0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9kZWZhdWx0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/layouts/default.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./resources/js/App.vue?vue&type=template&id=f348271a&":
/*!*************************************************************!*\
  !*** ./resources/js/App.vue?vue&type=template&id=f348271a& ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_f348271a___WEBPACK_IMPORTED_MODULE_0__.render),
/* harmony export */   "staticRenderFns": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_f348271a___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_f348271a___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=template&id=f348271a& */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/App.vue?vue&type=template&id=f348271a&");


/***/ }),

/***/ "./resources/js/components/Child.vue?vue&type=template&id=66ab007e&":
/*!**************************************************************************!*\
  !*** ./resources/js/components/Child.vue?vue&type=template&id=66ab007e& ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Child_vue_vue_type_template_id_66ab007e___WEBPACK_IMPORTED_MODULE_0__.render),
/* harmony export */   "staticRenderFns": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Child_vue_vue_type_template_id_66ab007e___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Child_vue_vue_type_template_id_66ab007e___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Child.vue?vue&type=template&id=66ab007e& */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Child.vue?vue&type=template&id=66ab007e&");


/***/ }),

/***/ "./resources/js/components/Loading.vue?vue&type=template&id=6ca9e6be&scoped=true&":
/*!****************************************************************************************!*\
  !*** ./resources/js/components/Loading.vue?vue&type=template&id=6ca9e6be&scoped=true& ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Loading_vue_vue_type_template_id_6ca9e6be_scoped_true___WEBPACK_IMPORTED_MODULE_0__.render),
/* harmony export */   "staticRenderFns": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Loading_vue_vue_type_template_id_6ca9e6be_scoped_true___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Loading_vue_vue_type_template_id_6ca9e6be_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Loading.vue?vue&type=template&id=6ca9e6be&scoped=true& */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Loading.vue?vue&type=template&id=6ca9e6be&scoped=true&");


/***/ }),

/***/ "./resources/js/layouts/default.vue?vue&type=template&id=06bc2b2d&":
/*!*************************************************************************!*\
  !*** ./resources/js/layouts/default.vue?vue&type=template&id=06bc2b2d& ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_default_vue_vue_type_template_id_06bc2b2d___WEBPACK_IMPORTED_MODULE_0__.render),
/* harmony export */   "staticRenderFns": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_default_vue_vue_type_template_id_06bc2b2d___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_default_vue_vue_type_template_id_06bc2b2d___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./default.vue?vue&type=template&id=06bc2b2d& */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/layouts/default.vue?vue&type=template&id=06bc2b2d&");


/***/ }),

/***/ "./resources/js/components/Loading.vue?vue&type=style&index=0&id=6ca9e6be&scoped=true&lang=css&":
/*!******************************************************************************************************!*\
  !*** ./resources/js/components/Loading.vue?vue&type=style&index=0&id=6ca9e6be&scoped=true&lang=css& ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_clonedRuleSet_9_use_0_node_modules_laravel_mix_node_modules_css_loader_dist_cjs_js_clonedRuleSet_9_use_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_9_use_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Loading_vue_vue_type_style_index_0_id_6ca9e6be_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-9.use[0]!../../../node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Loading.vue?vue&type=style&index=0&id=6ca9e6be&scoped=true&lang=css& */ "./node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-9.use[0]!./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Loading.vue?vue&type=style&index=0&id=6ca9e6be&scoped=true&lang=css&");


/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ normalizeComponent)\n/* harmony export */ });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent(\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */,\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options =\n    typeof scriptExports === 'function' ? scriptExports.options : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) {\n    // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () {\n          injectStyles.call(\n            this,\n            (options.functional ? this.parent : this).$root.$options.shadowRoot\n          )\n        }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functional component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection(h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanM/YWUwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyIC8qIHNlcnZlciBvbmx5ICovLFxuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPVxuICAgIHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7XG4gICAgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpbmplY3RTdHlsZXMuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAob3B0aW9ucy5mdW5jdGlvbmFsID8gdGhpcy5wYXJlbnQgOiB0aGlzKS4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290XG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24oaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaykgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/lib/runtime/componentNormalizer.js\n");

/***/ }),

/***/ "./node_modules/vue-meta/dist/vue-meta.esm.js":
/*!****************************************************!*\
  !*** ./node_modules/vue-meta/dist/vue-meta.esm.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! deepmerge */ \"./node_modules/deepmerge/dist/cjs.js\");\n/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(deepmerge__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * vue-meta v2.4.0\n * (c) 2020\n * - Declan de Wet\n * - Sébastien Chopin (@Atinux)\n * - Pim (@pimlie)\n * - All the amazing contributors\n * @license MIT\n */\n\n\n\nvar version = \"2.4.0\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = o[Symbol.iterator]();\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\n/**\n * checks if passed argument is an array\n * @param  {any}  arg - the object to check\n * @return {Boolean} - true if `arg` is an array\n */\nfunction isArray(arg) {\n  return Array.isArray(arg);\n}\nfunction isUndefined(arg) {\n  return typeof arg === 'undefined';\n}\nfunction isObject(arg) {\n  return _typeof(arg) === 'object';\n}\nfunction isPureObject(arg) {\n  return _typeof(arg) === 'object' && arg !== null;\n}\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nfunction hasGlobalWindowFn() {\n  try {\n    return !isUndefined(window);\n  } catch (e) {\n    return false;\n  }\n}\nvar hasGlobalWindow = hasGlobalWindowFn();\n\nvar _global = hasGlobalWindow ? window : __webpack_require__.g;\n\nvar console = _global.console || {};\nfunction warn(str) {\n  /* istanbul ignore next */\n  if (!console || !console.warn) {\n    return;\n  }\n\n  console.warn(str);\n}\nvar showWarningNotSupported = function showWarningNotSupported() {\n  return warn('This vue app/component has no vue-meta configuration');\n};\n\n/**\n * These are constant variables used throughout the application.\n */\n// set some sane defaults\nvar defaultInfo = {\n  title: undefined,\n  titleChunk: '',\n  titleTemplate: '%s',\n  htmlAttrs: {},\n  bodyAttrs: {},\n  headAttrs: {},\n  base: [],\n  link: [],\n  meta: [],\n  style: [],\n  script: [],\n  noscript: [],\n  __dangerouslyDisableSanitizers: [],\n  __dangerouslyDisableSanitizersByTagID: {}\n};\nvar rootConfigKey = '_vueMeta'; // This is the name of the component option that contains all the information that\n// gets converted to the various meta tags & attributes for the page.\n\nvar keyName = 'metaInfo'; // This is the attribute vue-meta arguments on elements to know which it should\n// manage and which it should ignore.\n\nvar attribute = 'data-vue-meta'; // This is the attribute that goes on the `html` tag to inform `vue-meta`\n// that the server has already generated the meta tags for the initial render.\n\nvar ssrAttribute = 'data-vue-meta-server-rendered'; // This is the property that tells vue-meta to overwrite (instead of append)\n// an item in a tag list. For example, if you have two `meta` tag list items\n// that both have `vmid` of \"description\", then vue-meta will overwrite the\n// shallowest one with the deepest one.\n\nvar tagIDKeyName = 'vmid'; // This is the key name for possible meta templates\n\nvar metaTemplateKeyName = 'template'; // This is the key name for the content-holding property\n\nvar contentKeyName = 'content'; // The id used for the ssr app\n\nvar ssrAppId = 'ssr'; // How long meta update\n\nvar debounceWait = 10; // How long meta update\n\nvar waitOnDestroyed = true;\nvar defaultOptions = {\n  keyName: keyName,\n  attribute: attribute,\n  ssrAttribute: ssrAttribute,\n  tagIDKeyName: tagIDKeyName,\n  contentKeyName: contentKeyName,\n  metaTemplateKeyName: metaTemplateKeyName,\n  waitOnDestroyed: waitOnDestroyed,\n  debounceWait: debounceWait,\n  ssrAppId: ssrAppId\n}; // might be a bit ugly, but minimizes the browser bundles a bit\n\nvar defaultInfoKeys = Object.keys(defaultInfo); // The metaInfo property keys which are used to disable escaping\n\nvar disableOptionKeys = [defaultInfoKeys[12], defaultInfoKeys[13]]; // List of metaInfo property keys which are configuration options (and dont generate html)\n\nvar metaInfoOptionKeys = [defaultInfoKeys[1], defaultInfoKeys[2], 'changed'].concat(disableOptionKeys); // List of metaInfo property keys which only generates attributes and no tags\n\nvar metaInfoAttributeKeys = [defaultInfoKeys[3], defaultInfoKeys[4], defaultInfoKeys[5]]; // HTML elements which support the onload event\n\nvar tagsSupportingOnload = ['link', 'style', 'script']; // HTML elements which dont have a head tag (shortened to our needs)\n// see: https://www.w3.org/TR/html52/document-metadata.html\n\nvar tagsWithoutEndTag = ['base', 'meta', 'link']; // HTML elements which can have inner content (shortened to our needs)\n\nvar tagsWithInnerContent = ['noscript', 'script', 'style']; // Attributes which are inserted as childNodes instead of HTMLAttribute\n\nvar tagAttributeAsInnerContent = ['innerHTML', 'cssText', 'json'];\nvar tagProperties = ['once', 'skip', 'template']; // Attributes which should be added with data- prefix\n\nvar commonDataAttributes = ['body', 'pbody']; // from: https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L202\n\nvar booleanHtmlAttributes = ['allowfullscreen', 'amp', 'amp-boilerplate', 'async', 'autofocus', 'autoplay', 'checked', 'compact', 'controls', 'declare', 'default', 'defaultchecked', 'defaultmuted', 'defaultselected', 'defer', 'disabled', 'enabled', 'formnovalidate', 'hidden', 'indeterminate', 'inert', 'ismap', 'itemscope', 'loop', 'multiple', 'muted', 'nohref', 'noresize', 'noshade', 'novalidate', 'nowrap', 'open', 'pauseonexit', 'readonly', 'required', 'reversed', 'scoped', 'seamless', 'selected', 'sortable', 'truespeed', 'typemustmatch', 'visible'];\n\nvar batchId = null;\nfunction triggerUpdate(_ref, rootVm, hookName) {\n  var debounceWait = _ref.debounceWait;\n\n  // if an update was triggered during initialization or when an update was triggered by the\n  // metaInfo watcher, set initialized to null\n  // then we keep falsy value but know we need to run a triggerUpdate after initialization\n  if (!rootVm[rootConfigKey].initialized && (rootVm[rootConfigKey].initializing || hookName === 'watcher')) {\n    rootVm[rootConfigKey].initialized = null;\n  }\n\n  if (rootVm[rootConfigKey].initialized && !rootVm[rootConfigKey].pausing) {\n    // batch potential DOM updates to prevent extraneous re-rendering\n    // eslint-disable-next-line no-void\n    batchUpdate(function () {\n      return void rootVm.$meta().refresh();\n    }, debounceWait);\n  }\n}\n/**\n * Performs a batched update.\n *\n * @param  {(null|Number)} id - the ID of this update\n * @param  {Function} callback - the update to perform\n * @return {Number} id - a new ID\n */\n\nfunction batchUpdate(callback, timeout) {\n  timeout = timeout === undefined ? 10 : timeout;\n\n  if (!timeout) {\n    callback();\n    return;\n  }\n\n  clearTimeout(batchId);\n  batchId = setTimeout(function () {\n    callback();\n  }, timeout);\n  return batchId;\n}\n\n/*\n * To reduce build size, this file provides simple polyfills without\n * overly excessive type checking and without modifying\n * the global Array.prototype\n * The polyfills are automatically removed in the commonjs build\n * Also, only files in client/ & shared/ should use these functions\n * files in server/ still use normal js function\n */\nfunction find(array, predicate, thisArg) {\n  if ( !Array.prototype.find) {\n    // idx needs to be a Number, for..in returns string\n    for (var idx = 0; idx < array.length; idx++) {\n      if (predicate.call(thisArg, array[idx], idx, array)) {\n        return array[idx];\n      }\n    }\n\n    return;\n  }\n\n  return array.find(predicate, thisArg);\n}\nfunction findIndex(array, predicate, thisArg) {\n  if ( !Array.prototype.findIndex) {\n    // idx needs to be a Number, for..in returns string\n    for (var idx = 0; idx < array.length; idx++) {\n      if (predicate.call(thisArg, array[idx], idx, array)) {\n        return idx;\n      }\n    }\n\n    return -1;\n  }\n\n  return array.findIndex(predicate, thisArg);\n}\nfunction toArray(arg) {\n  if ( !Array.from) {\n    return Array.prototype.slice.call(arg);\n  }\n\n  return Array.from(arg);\n}\nfunction includes(array, value) {\n  if ( !Array.prototype.includes) {\n    for (var idx in array) {\n      if (array[idx] === value) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return array.includes(value);\n}\n\nvar querySelector = function querySelector(arg, el) {\n  return (el || document).querySelectorAll(arg);\n};\nfunction getTag(tags, tag) {\n  if (!tags[tag]) {\n    tags[tag] = document.getElementsByTagName(tag)[0];\n  }\n\n  return tags[tag];\n}\nfunction getElementsKey(_ref) {\n  var body = _ref.body,\n      pbody = _ref.pbody;\n  return body ? 'body' : pbody ? 'pbody' : 'head';\n}\nfunction queryElements(parentNode, _ref2, attributes) {\n  var appId = _ref2.appId,\n      attribute = _ref2.attribute,\n      type = _ref2.type,\n      tagIDKeyName = _ref2.tagIDKeyName;\n  attributes = attributes || {};\n  var queries = [\"\".concat(type, \"[\").concat(attribute, \"=\\\"\").concat(appId, \"\\\"]\"), \"\".concat(type, \"[data-\").concat(tagIDKeyName, \"]\")].map(function (query) {\n    for (var key in attributes) {\n      var val = attributes[key];\n      var attributeValue = val && val !== true ? \"=\\\"\".concat(val, \"\\\"\") : '';\n      query += \"[data-\".concat(key).concat(attributeValue, \"]\");\n    }\n\n    return query;\n  });\n  return toArray(querySelector(queries.join(', '), parentNode));\n}\nfunction removeElementsByAppId(_ref3, appId) {\n  var attribute = _ref3.attribute;\n  toArray(querySelector(\"[\".concat(attribute, \"=\\\"\").concat(appId, \"\\\"]\"))).map(function (el) {\n    return el.remove();\n  });\n}\nfunction removeAttribute(el, attributeName) {\n  el.removeAttribute(attributeName);\n}\n\nfunction hasMetaInfo(vm) {\n  vm = vm || this;\n  return vm && (vm[rootConfigKey] === true || isObject(vm[rootConfigKey]));\n} // a component is in a metaInfo branch when itself has meta info or one of its (grand-)children has\n\nfunction inMetaInfoBranch(vm) {\n  vm = vm || this;\n  return vm && !isUndefined(vm[rootConfigKey]);\n}\n\nfunction pause(rootVm, refresh) {\n  rootVm[rootConfigKey].pausing = true;\n  return function () {\n    return resume(rootVm, refresh);\n  };\n}\nfunction resume(rootVm, refresh) {\n  rootVm[rootConfigKey].pausing = false;\n\n  if (refresh || refresh === undefined) {\n    return rootVm.$meta().refresh();\n  }\n}\n\nfunction addNavGuards(rootVm) {\n  var router = rootVm.$router; // return when nav guards already added or no router exists\n\n  if (rootVm[rootConfigKey].navGuards || !router) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  rootVm[rootConfigKey].navGuards = true;\n  router.beforeEach(function (to, from, next) {\n    pause(rootVm);\n    next();\n  });\n  router.afterEach(function () {\n    rootVm.$nextTick(function () {\n      var _resume = resume(rootVm),\n          metaInfo = _resume.metaInfo;\n\n      if (metaInfo && isFunction(metaInfo.afterNavigation)) {\n        metaInfo.afterNavigation(metaInfo);\n      }\n    });\n  });\n}\n\nvar appId = 1;\nfunction createMixin(Vue, options) {\n  // for which Vue lifecycle hooks should the metaInfo be refreshed\n  var updateOnLifecycleHook = ['activated', 'deactivated', 'beforeMount'];\n  var wasServerRendered = false; // watch for client side component updates\n\n  return {\n    beforeCreate: function beforeCreate() {\n      var _this2 = this;\n\n      var rootKey = '$root';\n      var $root = this[rootKey];\n      var $options = this.$options;\n      var devtoolsEnabled = Vue.config.devtools;\n      Object.defineProperty(this, '_hasMetaInfo', {\n        configurable: true,\n        get: function get() {\n          // Show deprecation warning once when devtools enabled\n          if (devtoolsEnabled && !$root[rootConfigKey].deprecationWarningShown) {\n            warn('VueMeta DeprecationWarning: _hasMetaInfo has been deprecated and will be removed in a future version. Please use hasMetaInfo(vm) instead');\n            $root[rootConfigKey].deprecationWarningShown = true;\n          }\n\n          return hasMetaInfo(this);\n        }\n      });\n\n      if (this === $root) {\n        $root.$once('hook:beforeMount', function () {\n          wasServerRendered = this.$el && this.$el.nodeType === 1 && this.$el.hasAttribute('data-server-rendered'); // In most cases when you have a SSR app it will be the first app thats gonna be\n          // initiated, if we cant detect the data-server-rendered attribute from Vue but we\n          // do see our own ssrAttribute then _assume_ the Vue app with appId 1 is the ssr app\n          // attempted fix for #404 & #562, but we rly need to refactor how we pass appIds from\n          // ssr to the client\n\n          if (!wasServerRendered && $root[rootConfigKey] && $root[rootConfigKey].appId === 1) {\n            var htmlTag = getTag({}, 'html');\n            wasServerRendered = htmlTag && htmlTag.hasAttribute(options.ssrAttribute);\n          }\n        });\n      } // Add a marker to know if it uses metaInfo\n      // _vnode is used to know that it's attached to a real component\n      // useful if we use some mixin to add some meta tags (like nuxt-i18n)\n\n\n      if (isUndefined($options[options.keyName]) || $options[options.keyName] === null) {\n        return;\n      }\n\n      if (!$root[rootConfigKey]) {\n        $root[rootConfigKey] = {\n          appId: appId\n        };\n        appId++;\n\n        if (devtoolsEnabled && $root.$options[options.keyName]) {\n          // use nextTick so the children should be added to $root\n          this.$nextTick(function () {\n            // find the first child that lists fnOptions\n            var child = find($root.$children, function (c) {\n              return c.$vnode && c.$vnode.fnOptions;\n            });\n\n            if (child && child.$vnode.fnOptions[options.keyName]) {\n              warn(\"VueMeta has detected a possible global mixin which adds a \".concat(options.keyName, \" property to all Vue components on the page. This could cause severe performance issues. If possible, use $meta().addApp to add meta information instead\"));\n            }\n          });\n        }\n      } // to speed up updates we keep track of branches which have a component with vue-meta info defined\n      // if _vueMeta = true it has info, if _vueMeta = false a child has info\n\n\n      if (!this[rootConfigKey]) {\n        this[rootConfigKey] = true;\n        var parent = this.$parent;\n\n        while (parent && parent !== $root) {\n          if (isUndefined(parent[rootConfigKey])) {\n            parent[rootConfigKey] = false;\n          }\n\n          parent = parent.$parent;\n        }\n      } // coerce function-style metaInfo to a computed prop so we can observe\n      // it on creation\n\n\n      if (isFunction($options[options.keyName])) {\n        $options.computed = $options.computed || {};\n        $options.computed.$metaInfo = $options[options.keyName];\n\n        if (!this.$isServer) {\n          // if computed $metaInfo exists, watch it for updates & trigger a refresh\n          // when it changes (i.e. automatically handle async actions that affect metaInfo)\n          // credit for this suggestion goes to [Sébastien Chopin](https://github.com/Atinux)\n          this.$on('hook:created', function () {\n            this.$watch('$metaInfo', function () {\n              triggerUpdate(options, this[rootKey], 'watcher');\n            });\n          });\n        }\n      } // force an initial refresh on page load and prevent other lifecycleHooks\n      // to triggerUpdate until this initial refresh is finished\n      // this is to make sure that when a page is opened in an inactive tab which\n      // has throttled rAF/timers we still immediately set the page title\n\n\n      if (isUndefined($root[rootConfigKey].initialized)) {\n        $root[rootConfigKey].initialized = this.$isServer;\n\n        if (!$root[rootConfigKey].initialized) {\n          if (!$root[rootConfigKey].initializedSsr) {\n            $root[rootConfigKey].initializedSsr = true;\n            this.$on('hook:beforeMount', function () {\n              var $root = this[rootKey]; // if this Vue-app was server rendered, set the appId to 'ssr'\n              // only one SSR app per page is supported\n\n              if (wasServerRendered) {\n                $root[rootConfigKey].appId = options.ssrAppId;\n              }\n            });\n          } // we use the mounted hook here as on page load\n\n\n          this.$on('hook:mounted', function () {\n            var $root = this[rootKey];\n\n            if ($root[rootConfigKey].initialized) {\n              return;\n            } // used in triggerUpdate to check if a change was triggered\n            // during initialization\n\n\n            $root[rootConfigKey].initializing = true; // refresh meta in nextTick so all child components have loaded\n\n            this.$nextTick(function () {\n              var _$root$$meta$refresh = $root.$meta().refresh(),\n                  tags = _$root$$meta$refresh.tags,\n                  metaInfo = _$root$$meta$refresh.metaInfo; // After ssr hydration (identifier by tags === false) check\n              // if initialized was set to null in triggerUpdate. That'd mean\n              // that during initilazation changes where triggered which need\n              // to be applied OR a metaInfo watcher was triggered before the\n              // current hook was called\n              // (during initialization all changes are blocked)\n\n\n              if (tags === false && $root[rootConfigKey].initialized === null) {\n                this.$nextTick(function () {\n                  return triggerUpdate(options, $root, 'init');\n                });\n              }\n\n              $root[rootConfigKey].initialized = true;\n              delete $root[rootConfigKey].initializing; // add the navigation guards if they havent been added yet\n              // they are needed for the afterNavigation callback\n\n              if (!options.refreshOnceOnNavigation && metaInfo.afterNavigation) {\n                addNavGuards($root);\n              }\n            });\n          }); // add the navigation guards if requested\n\n          if (options.refreshOnceOnNavigation) {\n            addNavGuards($root);\n          }\n        }\n      }\n\n      this.$on('hook:destroyed', function () {\n        var _this = this;\n\n        // do not trigger refresh:\n        // - when user configured to not wait for transitions on destroyed\n        // - when the component doesnt have a parent\n        // - doesnt have metaInfo defined\n        if (!this.$parent || !hasMetaInfo(this)) {\n          return;\n        }\n\n        delete this._hasMetaInfo;\n        this.$nextTick(function () {\n          if (!options.waitOnDestroyed || !_this.$el || !_this.$el.offsetParent) {\n            triggerUpdate(options, _this.$root, 'destroyed');\n            return;\n          } // Wait that element is hidden before refreshing meta tags (to support animations)\n\n\n          var interval = setInterval(function () {\n            if (_this.$el && _this.$el.offsetParent !== null) {\n              /* istanbul ignore next line */\n              return;\n            }\n\n            clearInterval(interval);\n            triggerUpdate(options, _this.$root, 'destroyed');\n          }, 50);\n        });\n      }); // do not trigger refresh on the server side\n\n      if (this.$isServer) {\n        /* istanbul ignore next */\n        return;\n      } // no need to add this hooks on server side\n\n\n      updateOnLifecycleHook.forEach(function (lifecycleHook) {\n        _this2.$on(\"hook:\".concat(lifecycleHook), function () {\n          triggerUpdate(options, this[rootKey], lifecycleHook);\n        });\n      });\n    }\n  };\n}\n\nfunction setOptions(options) {\n  // combine options\n  options = isObject(options) ? options : {}; // The options are set like this so they can\n  // be minified by terser while keeping the\n  // user api intact\n  // terser --mangle-properties keep_quoted=strict\n\n  /* eslint-disable dot-notation */\n\n  return {\n    keyName: options['keyName'] || defaultOptions.keyName,\n    attribute: options['attribute'] || defaultOptions.attribute,\n    ssrAttribute: options['ssrAttribute'] || defaultOptions.ssrAttribute,\n    tagIDKeyName: options['tagIDKeyName'] || defaultOptions.tagIDKeyName,\n    contentKeyName: options['contentKeyName'] || defaultOptions.contentKeyName,\n    metaTemplateKeyName: options['metaTemplateKeyName'] || defaultOptions.metaTemplateKeyName,\n    debounceWait: isUndefined(options['debounceWait']) ? defaultOptions.debounceWait : options['debounceWait'],\n    waitOnDestroyed: isUndefined(options['waitOnDestroyed']) ? defaultOptions.waitOnDestroyed : options['waitOnDestroyed'],\n    ssrAppId: options['ssrAppId'] || defaultOptions.ssrAppId,\n    refreshOnceOnNavigation: !!options['refreshOnceOnNavigation']\n  };\n  /* eslint-enable dot-notation */\n}\nfunction getOptions(options) {\n  var optionsCopy = {};\n\n  for (var key in options) {\n    optionsCopy[key] = options[key];\n  }\n\n  return optionsCopy;\n}\n\nfunction ensureIsArray(arg, key) {\n  if (!key || !isObject(arg)) {\n    return isArray(arg) ? arg : [];\n  }\n\n  if (!isArray(arg[key])) {\n    arg[key] = [];\n  }\n\n  return arg;\n}\n\nvar serverSequences = [[/&/g, '&amp;'], [/</g, '&lt;'], [/>/g, '&gt;'], [/\"/g, '&quot;'], [/'/g, '&#x27;']];\nvar clientSequences = [[/&/g, \"&\"], [/</g, \"<\"], [/>/g, \">\"], [/\"/g, \"\\\"\"], [/'/g, \"'\"]]; // sanitizes potentially dangerous characters\n\nfunction escape(info, options, escapeOptions, escapeKeys) {\n  var tagIDKeyName = options.tagIDKeyName;\n  var _escapeOptions$doEsca = escapeOptions.doEscape,\n      doEscape = _escapeOptions$doEsca === void 0 ? function (v) {\n    return v;\n  } : _escapeOptions$doEsca;\n  var escaped = {};\n\n  for (var key in info) {\n    var value = info[key]; // no need to escape configuration options\n\n    if (includes(metaInfoOptionKeys, key)) {\n      escaped[key] = value;\n      continue;\n    } // do not use destructuring for disableOptionKeys, it increases transpiled size\n    // due to var checks while we are guaranteed the structure of the cb\n\n\n    var disableKey = disableOptionKeys[0];\n\n    if (escapeOptions[disableKey] && includes(escapeOptions[disableKey], key)) {\n      // this info[key] doesnt need to escaped if the option is listed in __dangerouslyDisableSanitizers\n      escaped[key] = value;\n      continue;\n    }\n\n    var tagId = info[tagIDKeyName];\n\n    if (tagId) {\n      disableKey = disableOptionKeys[1]; // keys which are listed in __dangerouslyDisableSanitizersByTagID for the current vmid do not need to be escaped\n\n      if (escapeOptions[disableKey] && escapeOptions[disableKey][tagId] && includes(escapeOptions[disableKey][tagId], key)) {\n        escaped[key] = value;\n        continue;\n      }\n    }\n\n    if (isString(value)) {\n      escaped[key] = doEscape(value);\n    } else if (isArray(value)) {\n      escaped[key] = value.map(function (v) {\n        if (isPureObject(v)) {\n          return escape(v, options, escapeOptions, true);\n        }\n\n        return doEscape(v);\n      });\n    } else if (isPureObject(value)) {\n      escaped[key] = escape(value, options, escapeOptions, true);\n    } else {\n      escaped[key] = value;\n    }\n\n    if (escapeKeys) {\n      var escapedKey = doEscape(key);\n\n      if (key !== escapedKey) {\n        escaped[escapedKey] = escaped[key];\n        delete escaped[key];\n      }\n    }\n  }\n\n  return escaped;\n}\nfunction escapeMetaInfo(options, info, escapeSequences) {\n  escapeSequences = escapeSequences || []; // do not use destructuring for seq, it increases transpiled size\n  // due to var checks while we are guaranteed the structure of the cb\n\n  var escapeOptions = {\n    doEscape: function doEscape(value) {\n      return escapeSequences.reduce(function (val, seq) {\n        return val.replace(seq[0], seq[1]);\n      }, value);\n    }\n  };\n  disableOptionKeys.forEach(function (disableKey, index) {\n    if (index === 0) {\n      ensureIsArray(info, disableKey);\n    } else if (index === 1) {\n      for (var key in info[disableKey]) {\n        ensureIsArray(info[disableKey], key);\n      }\n    }\n\n    escapeOptions[disableKey] = info[disableKey];\n  }); // begin sanitization\n\n  return escape(info, options, escapeOptions);\n}\n\nfunction applyTemplate(_ref, headObject, template, chunk) {\n  var component = _ref.component,\n      metaTemplateKeyName = _ref.metaTemplateKeyName,\n      contentKeyName = _ref.contentKeyName;\n\n  if (template === true || headObject[metaTemplateKeyName] === true) {\n    // abort, template was already applied\n    return false;\n  }\n\n  if (isUndefined(template) && headObject[metaTemplateKeyName]) {\n    template = headObject[metaTemplateKeyName];\n    headObject[metaTemplateKeyName] = true;\n  } // return early if no template defined\n\n\n  if (!template) {\n    // cleanup faulty template properties\n    delete headObject[metaTemplateKeyName];\n    return false;\n  }\n\n  if (isUndefined(chunk)) {\n    chunk = headObject[contentKeyName];\n  }\n\n  headObject[contentKeyName] = isFunction(template) ? template.call(component, chunk) : template.replace(/%s/g, chunk);\n  return true;\n}\n\nfunction _arrayMerge(_ref, target, source) {\n  var component = _ref.component,\n      tagIDKeyName = _ref.tagIDKeyName,\n      metaTemplateKeyName = _ref.metaTemplateKeyName,\n      contentKeyName = _ref.contentKeyName;\n  // we concat the arrays without merging objects contained in,\n  // but we check for a `vmid` property on each object in the array\n  // using an O(1) lookup associative array exploit\n  var destination = [];\n\n  if (!target.length && !source.length) {\n    return destination;\n  }\n\n  target.forEach(function (targetItem, targetIndex) {\n    // no tagID so no need to check for duplicity\n    if (!targetItem[tagIDKeyName]) {\n      destination.push(targetItem);\n      return;\n    }\n\n    var sourceIndex = findIndex(source, function (item) {\n      return item[tagIDKeyName] === targetItem[tagIDKeyName];\n    });\n    var sourceItem = source[sourceIndex]; // source doesnt contain any duplicate vmid's, we can keep targetItem\n\n    if (sourceIndex === -1) {\n      destination.push(targetItem);\n      return;\n    } // when sourceItem explictly defines contentKeyName or innerHTML as undefined, its\n    // an indication that we need to skip the default behaviour or child has preference over parent\n    // which means we keep the targetItem and ignore/remove the sourceItem\n\n\n    if (contentKeyName in sourceItem && sourceItem[contentKeyName] === undefined || 'innerHTML' in sourceItem && sourceItem.innerHTML === undefined) {\n      destination.push(targetItem); // remove current index from source array so its not concatenated to destination below\n\n      source.splice(sourceIndex, 1);\n      return;\n    } // we now know that targetItem is a duplicate and we should ignore it in favor of sourceItem\n    // if source specifies null as content then ignore both the target as the source\n\n\n    if (sourceItem[contentKeyName] === null || sourceItem.innerHTML === null) {\n      // remove current index from source array so its not concatenated to destination below\n      source.splice(sourceIndex, 1);\n      return;\n    } // now we only need to check if the target has a template to combine it with the source\n\n\n    var targetTemplate = targetItem[metaTemplateKeyName];\n\n    if (!targetTemplate) {\n      return;\n    }\n\n    var sourceTemplate = sourceItem[metaTemplateKeyName];\n\n    if (!sourceTemplate) {\n      // use parent template and child content\n      applyTemplate({\n        component: component,\n        metaTemplateKeyName: metaTemplateKeyName,\n        contentKeyName: contentKeyName\n      }, sourceItem, targetTemplate); // set template to true to indicate template was already applied\n\n      sourceItem.template = true;\n      return;\n    }\n\n    if (!sourceItem[contentKeyName]) {\n      // use parent content and child template\n      applyTemplate({\n        component: component,\n        metaTemplateKeyName: metaTemplateKeyName,\n        contentKeyName: contentKeyName\n      }, sourceItem, undefined, targetItem[contentKeyName]);\n    }\n  });\n  return destination.concat(source);\n}\nvar warningShown = false;\nfunction merge(target, source, options) {\n  options = options || {}; // remove properties explicitly set to false so child components can\n  // optionally _not_ overwrite the parents content\n  // (for array properties this is checked in arrayMerge)\n\n  if (source.title === undefined) {\n    delete source.title;\n  }\n\n  metaInfoAttributeKeys.forEach(function (attrKey) {\n    if (!source[attrKey]) {\n      return;\n    }\n\n    for (var key in source[attrKey]) {\n      if (key in source[attrKey] && source[attrKey][key] === undefined) {\n        if (includes(booleanHtmlAttributes, key) && !warningShown) {\n          warn('VueMeta: Please note that since v2 the value undefined is not used to indicate boolean attributes anymore, see migration guide for details');\n          warningShown = true;\n        }\n\n        delete source[attrKey][key];\n      }\n    }\n  });\n  return deepmerge__WEBPACK_IMPORTED_MODULE_0___default()(target, source, {\n    arrayMerge: function arrayMerge(t, s) {\n      return _arrayMerge(options, t, s);\n    }\n  });\n}\n\nfunction getComponentMetaInfo(options, component) {\n  return getComponentOption(options || {}, component, defaultInfo);\n}\n/**\n * Returns the `opts.option` $option value of the given `opts.component`.\n * If methods are encountered, they will be bound to the component context.\n * If `opts.deep` is true, will recursively merge all child component\n * `opts.option` $option values into the returned result.\n *\n * @param  {Object} opts - options\n * @param  {Object} opts.component - Vue component to fetch option data from\n * @param  {Boolean} opts.deep - look for data in child components as well?\n * @param  {Function} opts.arrayMerge - how should arrays be merged?\n * @param  {String} opts.keyName - the name of the option to look for\n * @param  {Object} [result={}] - result so far\n * @return {Object} result - final aggregated result\n */\n\nfunction getComponentOption(options, component, result) {\n  result = result || {};\n\n  if (component._inactive) {\n    return result;\n  }\n\n  options = options || {};\n  var _options = options,\n      keyName = _options.keyName;\n  var $metaInfo = component.$metaInfo,\n      $options = component.$options,\n      $children = component.$children; // only collect option data if it exists\n\n  if ($options[keyName]) {\n    // if $metaInfo exists then [keyName] was defined as a function\n    // and set to the computed prop $metaInfo in the mixin\n    // using the computed prop should be a small performance increase\n    // because Vue caches those internally\n    var data = $metaInfo || $options[keyName]; // only merge data with result when its an object\n    // eg it could be a function when metaInfo() returns undefined\n    // dueo to the or statement above\n\n    if (isObject(data)) {\n      result = merge(result, data, options);\n    }\n  } // collect & aggregate child options if deep = true\n\n\n  if ($children.length) {\n    $children.forEach(function (childComponent) {\n      // check if the childComponent is in a branch\n      // return otherwise so we dont walk all component branches unnecessarily\n      if (!inMetaInfoBranch(childComponent)) {\n        return;\n      }\n\n      result = getComponentOption(options, childComponent, result);\n    });\n  }\n\n  return result;\n}\n\nvar callbacks = [];\nfunction isDOMComplete(d) {\n  return (d || document).readyState === 'complete';\n}\nfunction addCallback(query, callback) {\n  if (arguments.length === 1) {\n    callback = query;\n    query = '';\n  }\n\n  callbacks.push([query, callback]);\n}\nfunction addCallbacks(_ref, type, tags, autoAddListeners) {\n  var tagIDKeyName = _ref.tagIDKeyName;\n  var hasAsyncCallback = false;\n  tags.forEach(function (tag) {\n    if (!tag[tagIDKeyName] || !tag.callback) {\n      return;\n    }\n\n    hasAsyncCallback = true;\n    addCallback(\"\".concat(type, \"[data-\").concat(tagIDKeyName, \"=\\\"\").concat(tag[tagIDKeyName], \"\\\"]\"), tag.callback);\n  });\n\n  if (!autoAddListeners || !hasAsyncCallback) {\n    return hasAsyncCallback;\n  }\n\n  return addListeners();\n}\nfunction addListeners() {\n  if (isDOMComplete()) {\n    applyCallbacks();\n    return;\n  } // Instead of using a MutationObserver, we just apply\n\n  /* istanbul ignore next */\n\n\n  document.onreadystatechange = function () {\n    applyCallbacks();\n  };\n}\nfunction applyCallbacks(matchElement) {\n  callbacks.forEach(function (args) {\n    // do not use destructuring for args, it increases transpiled size\n    // due to var checks while we are guaranteed the structure of the cb\n    var query = args[0];\n    var callback = args[1];\n    var selector = \"\".concat(query, \"[onload=\\\"this.__vm_l=1\\\"]\");\n    var elements = [];\n\n    if (!matchElement) {\n      elements = toArray(querySelector(selector));\n    }\n\n    if (matchElement && matchElement.matches(selector)) {\n      elements = [matchElement];\n    }\n\n    elements.forEach(function (element) {\n      /* __vm_cb: whether the load callback has been called\n       * __vm_l: set by onload attribute, whether the element was loaded\n       * __vm_ev: whether the event listener was added or not\n       */\n      if (element.__vm_cb) {\n        return;\n      }\n\n      var onload = function onload() {\n        /* Mark that the callback for this element has already been called,\n         * this prevents the callback to run twice in some (rare) conditions\n         */\n        element.__vm_cb = true;\n        /* onload needs to be removed because we only need the\n         * attribute after ssr and if we dont remove it the node\n         * will fail isEqualNode on the client\n         */\n\n        removeAttribute(element, 'onload');\n        callback(element);\n      };\n      /* IE9 doesnt seem to load scripts synchronously,\n       * causing a script sometimes/often already to be loaded\n       * when we add the event listener below (thus adding an onload event\n       * listener has no use because it will never be triggered).\n       * Therefore we add the onload attribute during ssr, and\n       * check here if it was already loaded or not\n       */\n\n\n      if (element.__vm_l) {\n        onload();\n        return;\n      }\n\n      if (!element.__vm_ev) {\n        element.__vm_ev = true;\n        element.addEventListener('load', onload);\n      }\n    });\n  });\n}\n\n// instead of adding it to the html\n\nvar attributeMap = {};\n/**\n * Updates the document's html tag attributes\n *\n * @param  {Object} attrs - the new document html attributes\n * @param  {HTMLElement} tag - the HTMLElement tag to update with new attrs\n */\n\nfunction updateAttribute(appId, options, type, attrs, tag) {\n  var _ref = options || {},\n      attribute = _ref.attribute;\n\n  var vueMetaAttrString = tag.getAttribute(attribute);\n\n  if (vueMetaAttrString) {\n    attributeMap[type] = JSON.parse(decodeURI(vueMetaAttrString));\n    removeAttribute(tag, attribute);\n  }\n\n  var data = attributeMap[type] || {};\n  var toUpdate = []; // remove attributes from the map\n  // which have been removed for this appId\n\n  for (var attr in data) {\n    if (data[attr] !== undefined && appId in data[attr]) {\n      toUpdate.push(attr);\n\n      if (!attrs[attr]) {\n        delete data[attr][appId];\n      }\n    }\n  }\n\n  for (var _attr in attrs) {\n    var attrData = data[_attr];\n\n    if (!attrData || attrData[appId] !== attrs[_attr]) {\n      toUpdate.push(_attr);\n\n      if (attrs[_attr] !== undefined) {\n        data[_attr] = data[_attr] || {};\n        data[_attr][appId] = attrs[_attr];\n      }\n    }\n  }\n\n  for (var _i = 0, _toUpdate = toUpdate; _i < _toUpdate.length; _i++) {\n    var _attr2 = _toUpdate[_i];\n    var _attrData = data[_attr2];\n    var attrValues = [];\n\n    for (var _appId in _attrData) {\n      Array.prototype.push.apply(attrValues, [].concat(_attrData[_appId]));\n    }\n\n    if (attrValues.length) {\n      var attrValue = includes(booleanHtmlAttributes, _attr2) && attrValues.some(Boolean) ? '' : attrValues.filter(function (v) {\n        return v !== undefined;\n      }).join(' ');\n      tag.setAttribute(_attr2, attrValue);\n    } else {\n      removeAttribute(tag, _attr2);\n    }\n  }\n\n  attributeMap[type] = data;\n}\n\n/**\n * Updates the document title\n *\n * @param  {String} title - the new title of the document\n */\nfunction updateTitle(title) {\n  if (!title && title !== '') {\n    return;\n  }\n\n  document.title = title;\n}\n\n/**\n * Updates meta tags inside <head> and <body> on the client. Borrowed from `react-helmet`:\n * https://github.com/nfl/react-helmet/blob/004d448f8de5f823d10f838b02317521180f34da/src/Helmet.js#L195-L245\n *\n * @param  {('meta'|'base'|'link'|'style'|'script'|'noscript')} type - the name of the tag\n * @param  {(Array<Object>|Object)} tags - an array of tag objects or a single object in case of base\n * @return {Object} - a representation of what tags changed\n */\n\nfunction updateTag(appId, options, type, tags, head, body) {\n  var _ref = options || {},\n      attribute = _ref.attribute,\n      tagIDKeyName = _ref.tagIDKeyName;\n\n  var dataAttributes = commonDataAttributes.slice();\n  dataAttributes.push(tagIDKeyName);\n  var newElements = [];\n  var queryOptions = {\n    appId: appId,\n    attribute: attribute,\n    type: type,\n    tagIDKeyName: tagIDKeyName\n  };\n  var currentElements = {\n    head: queryElements(head, queryOptions),\n    pbody: queryElements(body, queryOptions, {\n      pbody: true\n    }),\n    body: queryElements(body, queryOptions, {\n      body: true\n    })\n  };\n\n  if (tags.length > 1) {\n    // remove duplicates that could have been found by merging tags\n    // which include a mixin with metaInfo and that mixin is used\n    // by multiple components on the same page\n    var found = [];\n    tags = tags.filter(function (x) {\n      var k = JSON.stringify(x);\n      var res = !includes(found, k);\n      found.push(k);\n      return res;\n    });\n  }\n\n  tags.forEach(function (tag) {\n    if (tag.skip) {\n      return;\n    }\n\n    var newElement = document.createElement(type);\n\n    if (!tag.once) {\n      newElement.setAttribute(attribute, appId);\n    }\n\n    Object.keys(tag).forEach(function (attr) {\n      /* istanbul ignore next */\n      if (includes(tagProperties, attr)) {\n        return;\n      }\n\n      if (attr === 'innerHTML') {\n        newElement.innerHTML = tag.innerHTML;\n        return;\n      }\n\n      if (attr === 'json') {\n        newElement.innerHTML = JSON.stringify(tag.json);\n        return;\n      }\n\n      if (attr === 'cssText') {\n        if (newElement.styleSheet) {\n          /* istanbul ignore next */\n          newElement.styleSheet.cssText = tag.cssText;\n        } else {\n          newElement.appendChild(document.createTextNode(tag.cssText));\n        }\n\n        return;\n      }\n\n      if (attr === 'callback') {\n        newElement.onload = function () {\n          return tag[attr](newElement);\n        };\n\n        return;\n      }\n\n      var _attr = includes(dataAttributes, attr) ? \"data-\".concat(attr) : attr;\n\n      var isBooleanAttribute = includes(booleanHtmlAttributes, attr);\n\n      if (isBooleanAttribute && !tag[attr]) {\n        return;\n      }\n\n      var value = isBooleanAttribute ? '' : tag[attr];\n      newElement.setAttribute(_attr, value);\n    });\n    var oldElements = currentElements[getElementsKey(tag)]; // Remove a duplicate tag from domTagstoRemove, so it isn't cleared.\n\n    var indexToDelete;\n    var hasEqualElement = oldElements.some(function (existingTag, index) {\n      indexToDelete = index;\n      return newElement.isEqualNode(existingTag);\n    });\n\n    if (hasEqualElement && (indexToDelete || indexToDelete === 0)) {\n      oldElements.splice(indexToDelete, 1);\n    } else {\n      newElements.push(newElement);\n    }\n  });\n  var oldElements = [];\n\n  for (var _type in currentElements) {\n    Array.prototype.push.apply(oldElements, currentElements[_type]);\n  } // remove old elements\n\n\n  oldElements.forEach(function (element) {\n    element.parentNode.removeChild(element);\n  }); // insert new elements\n\n  newElements.forEach(function (element) {\n    if (element.hasAttribute('data-body')) {\n      body.appendChild(element);\n      return;\n    }\n\n    if (element.hasAttribute('data-pbody')) {\n      body.insertBefore(element, body.firstChild);\n      return;\n    }\n\n    head.appendChild(element);\n  });\n  return {\n    oldTags: oldElements,\n    newTags: newElements\n  };\n}\n\n/**\n * Performs client-side updates when new meta info is received\n *\n * @param  {Object} newInfo - the meta info to update to\n */\n\nfunction updateClientMetaInfo(appId, options, newInfo) {\n  options = options || {};\n  var _options = options,\n      ssrAttribute = _options.ssrAttribute,\n      ssrAppId = _options.ssrAppId; // only cache tags for current update\n\n  var tags = {};\n  var htmlTag = getTag(tags, 'html'); // if this is a server render, then dont update\n\n  if (appId === ssrAppId && htmlTag.hasAttribute(ssrAttribute)) {\n    // remove the server render attribute so we can update on (next) changes\n    removeAttribute(htmlTag, ssrAttribute); // add load callbacks if the\n\n    var addLoadListeners = false;\n    tagsSupportingOnload.forEach(function (type) {\n      if (newInfo[type] && addCallbacks(options, type, newInfo[type])) {\n        addLoadListeners = true;\n      }\n    });\n\n    if (addLoadListeners) {\n      addListeners();\n    }\n\n    return false;\n  } // initialize tracked changes\n\n\n  var tagsAdded = {};\n  var tagsRemoved = {};\n\n  for (var type in newInfo) {\n    // ignore these\n    if (includes(metaInfoOptionKeys, type)) {\n      continue;\n    }\n\n    if (type === 'title') {\n      // update the title\n      updateTitle(newInfo.title);\n      continue;\n    }\n\n    if (includes(metaInfoAttributeKeys, type)) {\n      var tagName = type.substr(0, 4);\n      updateAttribute(appId, options, type, newInfo[type], getTag(tags, tagName));\n      continue;\n    } // tags should always be an array, ignore if it isnt\n\n\n    if (!isArray(newInfo[type])) {\n      continue;\n    }\n\n    var _updateTag = updateTag(appId, options, type, newInfo[type], getTag(tags, 'head'), getTag(tags, 'body')),\n        oldTags = _updateTag.oldTags,\n        newTags = _updateTag.newTags;\n\n    if (newTags.length) {\n      tagsAdded[type] = newTags;\n      tagsRemoved[type] = oldTags;\n    }\n  }\n\n  return {\n    tagsAdded: tagsAdded,\n    tagsRemoved: tagsRemoved\n  };\n}\n\nvar appsMetaInfo;\nfunction addApp(rootVm, appId, options) {\n  return {\n    set: function set(metaInfo) {\n      return setMetaInfo(rootVm, appId, options, metaInfo);\n    },\n    remove: function remove() {\n      return removeMetaInfo(rootVm, appId, options);\n    }\n  };\n}\nfunction setMetaInfo(rootVm, appId, options, metaInfo) {\n  // if a vm exists _and_ its mounted then immediately update\n  if (rootVm && rootVm.$el) {\n    return updateClientMetaInfo(appId, options, metaInfo);\n  } // store for later, the info\n  // will be set on the first refresh\n\n\n  appsMetaInfo = appsMetaInfo || {};\n  appsMetaInfo[appId] = metaInfo;\n}\nfunction removeMetaInfo(rootVm, appId, options) {\n  if (rootVm && rootVm.$el) {\n    var tags = {};\n\n    var _iterator = _createForOfIteratorHelper(metaInfoAttributeKeys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var type = _step.value;\n        var tagName = type.substr(0, 4);\n        updateAttribute(appId, options, type, {}, getTag(tags, tagName));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return removeElementsByAppId(options, appId);\n  }\n\n  if (appsMetaInfo[appId]) {\n    delete appsMetaInfo[appId];\n    clearAppsMetaInfo();\n  }\n}\nfunction getAppsMetaInfo() {\n  return appsMetaInfo;\n}\nfunction clearAppsMetaInfo(force) {\n  if (force || !Object.keys(appsMetaInfo).length) {\n    appsMetaInfo = undefined;\n  }\n}\n\n/**\n * Returns the correct meta info for the given component\n * (child components will overwrite parent meta info)\n *\n * @param  {Object} component - the Vue instance to get meta info from\n * @return {Object} - returned meta info\n */\n\nfunction getMetaInfo(options, info, escapeSequences, component) {\n  options = options || {};\n  escapeSequences = escapeSequences || [];\n  var _options = options,\n      tagIDKeyName = _options.tagIDKeyName; // Remove all \"template\" tags from meta\n  // backup the title chunk in case user wants access to it\n\n  if (info.title) {\n    info.titleChunk = info.title;\n  } // replace title with populated template\n\n\n  if (info.titleTemplate && info.titleTemplate !== '%s') {\n    applyTemplate({\n      component: component,\n      contentKeyName: 'title'\n    }, info, info.titleTemplate, info.titleChunk || '');\n  } // convert base tag to an array so it can be handled the same way\n  // as the other tags\n\n\n  if (info.base) {\n    info.base = Object.keys(info.base).length ? [info.base] : [];\n  }\n\n  if (info.meta) {\n    // remove meta items with duplicate vmid's\n    info.meta = info.meta.filter(function (metaItem, index, arr) {\n      var hasVmid = !!metaItem[tagIDKeyName];\n\n      if (!hasVmid) {\n        return true;\n      }\n\n      var isFirstItemForVmid = index === findIndex(arr, function (item) {\n        return item[tagIDKeyName] === metaItem[tagIDKeyName];\n      });\n      return isFirstItemForVmid;\n    }); // apply templates if needed\n\n    info.meta.forEach(function (metaObject) {\n      return applyTemplate(options, metaObject);\n    });\n  }\n\n  return escapeMetaInfo(options, info, escapeSequences);\n}\n\n/**\n * When called, will update the current meta info with new meta info.\n * Useful when updating meta info as the result of an asynchronous\n * action that resolves after the initial render takes place.\n *\n * Credit to [Sébastien Chopin](https://github.com/Atinux) for the suggestion\n * to implement this method.\n *\n * @return {Object} - new meta info\n */\n\nfunction refresh(rootVm, options) {\n  options = options || {}; // make sure vue-meta was initiated\n\n  if (!rootVm[rootConfigKey]) {\n    showWarningNotSupported();\n    return {};\n  } // collect & aggregate all metaInfo $options\n\n\n  var rawInfo = getComponentMetaInfo(options, rootVm);\n  var metaInfo = getMetaInfo(options, rawInfo, clientSequences, rootVm);\n  var appId = rootVm[rootConfigKey].appId;\n  var tags = updateClientMetaInfo(appId, options, metaInfo); // emit \"event\" with new info\n\n  if (tags && isFunction(metaInfo.changed)) {\n    metaInfo.changed(metaInfo, tags.tagsAdded, tags.tagsRemoved);\n    tags = {\n      addedTags: tags.tagsAdded,\n      removedTags: tags.tagsRemoved\n    };\n  }\n\n  var appsMetaInfo = getAppsMetaInfo();\n\n  if (appsMetaInfo) {\n    for (var additionalAppId in appsMetaInfo) {\n      updateClientMetaInfo(additionalAppId, options, appsMetaInfo[additionalAppId]);\n      delete appsMetaInfo[additionalAppId];\n    }\n\n    clearAppsMetaInfo(true);\n  }\n\n  return {\n    vm: rootVm,\n    metaInfo: metaInfo,\n    // eslint-disable-line object-shorthand\n    tags: tags\n  };\n}\n\n/**\n * Generates tag attributes for use on the server.\n *\n * @param  {('bodyAttrs'|'htmlAttrs'|'headAttrs')} type - the type of attributes to generate\n * @param  {Object} data - the attributes to generate\n * @return {Object} - the attribute generator\n */\n\nfunction attributeGenerator(options, type, data, _ref) {\n  var addSsrAttribute = _ref.addSsrAttribute;\n\n  var _ref2 = options || {},\n      attribute = _ref2.attribute,\n      ssrAttribute = _ref2.ssrAttribute;\n\n  var attributeStr = '';\n\n  for (var attr in data) {\n    var attrData = data[attr];\n    var attrValues = [];\n\n    for (var appId in attrData) {\n      attrValues.push.apply(attrValues, _toConsumableArray([].concat(attrData[appId])));\n    }\n\n    if (attrValues.length) {\n      attributeStr += booleanHtmlAttributes.includes(attr) && attrValues.some(Boolean) ? \"\".concat(attr) : \"\".concat(attr, \"=\\\"\").concat(attrValues.join(' '), \"\\\"\");\n      attributeStr += ' ';\n    }\n  }\n\n  if (attributeStr) {\n    attributeStr += \"\".concat(attribute, \"=\\\"\").concat(encodeURI(JSON.stringify(data)), \"\\\"\");\n  }\n\n  if (type === 'htmlAttrs' && addSsrAttribute) {\n    return \"\".concat(ssrAttribute).concat(attributeStr ? ' ' : '').concat(attributeStr);\n  }\n\n  return attributeStr;\n}\n\n/**\n * Generates title output for the server\n *\n * @param  {'title'} type - the string \"title\"\n * @param  {String} data - the title text\n * @return {Object} - the title generator\n */\nfunction titleGenerator(options, type, data, generatorOptions) {\n  var _ref = generatorOptions || {},\n      ln = _ref.ln;\n\n  if (!data) {\n    return '';\n  }\n\n  return \"<\".concat(type, \">\").concat(data, \"</\").concat(type, \">\").concat(ln ? '\\n' : '');\n}\n\n/**\n * Generates meta, base, link, style, script, noscript tags for use on the server\n *\n * @param  {('meta'|'base'|'link'|'style'|'script'|'noscript')} the name of the tag\n * @param  {(Array<Object>|Object)} tags - an array of tag objects or a single object in case of base\n * @return {Object} - the tag generator\n */\n\nfunction tagGenerator(options, type, tags, generatorOptions) {\n  var _ref = options || {},\n      ssrAppId = _ref.ssrAppId,\n      attribute = _ref.attribute,\n      tagIDKeyName = _ref.tagIDKeyName;\n\n  var _ref2 = generatorOptions || {},\n      appId = _ref2.appId,\n      _ref2$isSSR = _ref2.isSSR,\n      isSSR = _ref2$isSSR === void 0 ? true : _ref2$isSSR,\n      _ref2$body = _ref2.body,\n      body = _ref2$body === void 0 ? false : _ref2$body,\n      _ref2$pbody = _ref2.pbody,\n      pbody = _ref2$pbody === void 0 ? false : _ref2$pbody,\n      _ref2$ln = _ref2.ln,\n      ln = _ref2$ln === void 0 ? false : _ref2$ln;\n\n  var dataAttributes = [tagIDKeyName].concat(_toConsumableArray(commonDataAttributes));\n\n  if (!tags || !tags.length) {\n    return '';\n  } // build a string containing all tags of this type\n\n\n  return tags.reduce(function (tagsStr, tag) {\n    if (tag.skip) {\n      return tagsStr;\n    }\n\n    var tagKeys = Object.keys(tag);\n\n    if (tagKeys.length === 0) {\n      return tagsStr; // Bail on empty tag object\n    }\n\n    if (Boolean(tag.body) !== body || Boolean(tag.pbody) !== pbody) {\n      return tagsStr;\n    }\n\n    var attrs = tag.once ? '' : \" \".concat(attribute, \"=\\\"\").concat(appId || (isSSR === false ? '1' : ssrAppId), \"\\\"\"); // build a string containing all attributes of this tag\n\n    for (var attr in tag) {\n      // these attributes are treated as children on the tag\n      if (tagAttributeAsInnerContent.includes(attr) || tagProperties.includes(attr)) {\n        continue;\n      }\n\n      if (attr === 'callback') {\n        attrs += ' onload=\"this.__vm_l=1\"';\n        continue;\n      } // these form the attribute list for this tag\n\n\n      var prefix = '';\n\n      if (dataAttributes.includes(attr)) {\n        prefix = 'data-';\n      }\n\n      var isBooleanAttr = !prefix && booleanHtmlAttributes.includes(attr);\n\n      if (isBooleanAttr && !tag[attr]) {\n        continue;\n      }\n\n      attrs += \" \".concat(prefix).concat(attr) + (isBooleanAttr ? '' : \"=\\\"\".concat(tag[attr], \"\\\"\"));\n    }\n\n    var json = '';\n\n    if (tag.json) {\n      json = JSON.stringify(tag.json);\n    } // grab child content from one of these attributes, if possible\n\n\n    var content = tag.innerHTML || tag.cssText || json; // generate tag exactly without any other redundant attribute\n    // these tags have no end tag\n\n    var hasEndTag = !tagsWithoutEndTag.includes(type); // these tag types will have content inserted\n\n    var hasContent = hasEndTag && tagsWithInnerContent.includes(type); // the final string for this specific tag\n\n    return \"\".concat(tagsStr, \"<\").concat(type).concat(attrs).concat(!hasContent && hasEndTag ? '/' : '', \">\") + (hasContent ? \"\".concat(content, \"</\").concat(type, \">\") : '') + (ln ? '\\n' : '');\n  }, '');\n}\n\n/**\n * Converts a meta info property to one that can be stringified on the server\n *\n * @param  {String} type - the type of data to convert\n * @param  {(String|Object|Array<Object>)} data - the data value\n * @return {Object} - the new injector\n */\n\nfunction generateServerInjector(options, metaInfo, globalInjectOptions) {\n  var serverInjector = {\n    data: metaInfo,\n    extraData: undefined,\n    addInfo: function addInfo(appId, metaInfo) {\n      this.extraData = this.extraData || {};\n      this.extraData[appId] = metaInfo;\n    },\n    callInjectors: function callInjectors(opts) {\n      var m = this.injectors; // only call title for the head\n\n      return (opts.body || opts.pbody ? '' : m.title.text(opts)) + m.meta.text(opts) + m.base.text(opts) + m.link.text(opts) + m.style.text(opts) + m.script.text(opts) + m.noscript.text(opts);\n    },\n    injectors: {\n      head: function head(ln) {\n        return serverInjector.callInjectors(_objectSpread2(_objectSpread2({}, globalInjectOptions), {}, {\n          ln: ln\n        }));\n      },\n      bodyPrepend: function bodyPrepend(ln) {\n        return serverInjector.callInjectors(_objectSpread2(_objectSpread2({}, globalInjectOptions), {}, {\n          ln: ln,\n          pbody: true\n        }));\n      },\n      bodyAppend: function bodyAppend(ln) {\n        return serverInjector.callInjectors(_objectSpread2(_objectSpread2({}, globalInjectOptions), {}, {\n          ln: ln,\n          body: true\n        }));\n      }\n    }\n  };\n\n  var _loop = function _loop(type) {\n    if (metaInfoOptionKeys.includes(type)) {\n      return \"continue\";\n    }\n\n    serverInjector.injectors[type] = {\n      text: function text(injectOptions) {\n        var addSsrAttribute = injectOptions === true;\n        injectOptions = _objectSpread2(_objectSpread2({\n          addSsrAttribute: addSsrAttribute\n        }, globalInjectOptions), injectOptions);\n\n        if (type === 'title') {\n          return titleGenerator(options, type, serverInjector.data[type], injectOptions);\n        }\n\n        if (metaInfoAttributeKeys.includes(type)) {\n          var attributeData = {};\n          var data = serverInjector.data[type];\n\n          if (data) {\n            var appId = injectOptions.isSSR === false ? '1' : options.ssrAppId;\n\n            for (var attr in data) {\n              attributeData[attr] = _defineProperty({}, appId, data[attr]);\n            }\n          }\n\n          if (serverInjector.extraData) {\n            for (var _appId in serverInjector.extraData) {\n              var _data = serverInjector.extraData[_appId][type];\n\n              if (_data) {\n                for (var _attr in _data) {\n                  attributeData[_attr] = _objectSpread2(_objectSpread2({}, attributeData[_attr]), {}, _defineProperty({}, _appId, _data[_attr]));\n                }\n              }\n            }\n          }\n\n          return attributeGenerator(options, type, attributeData, injectOptions);\n        }\n\n        var str = tagGenerator(options, type, serverInjector.data[type], injectOptions);\n\n        if (serverInjector.extraData) {\n          for (var _appId2 in serverInjector.extraData) {\n            var _data2 = serverInjector.extraData[_appId2][type];\n            var extraStr = tagGenerator(options, type, _data2, _objectSpread2({\n              appId: _appId2\n            }, injectOptions));\n            str = \"\".concat(str).concat(extraStr);\n          }\n        }\n\n        return str;\n      }\n    };\n  };\n\n  for (var type in defaultInfo) {\n    var _ret = _loop(type);\n\n    if (_ret === \"continue\") continue;\n  }\n\n  return serverInjector;\n}\n\n/**\n * Converts the state of the meta info object such that each item\n * can be compiled to a tag string on the server\n *\n * @vm {Object} - Vue instance - ideally the root component\n * @return {Object} - server meta info with `toString` methods\n */\n\nfunction inject(rootVm, options, injectOptions) {\n  // make sure vue-meta was initiated\n  if (!rootVm[rootConfigKey]) {\n    showWarningNotSupported();\n    return {};\n  } // collect & aggregate all metaInfo $options\n\n\n  var rawInfo = getComponentMetaInfo(options, rootVm);\n  var metaInfo = getMetaInfo(options, rawInfo, serverSequences, rootVm); // generate server injector\n\n  var serverInjector = generateServerInjector(options, metaInfo, injectOptions); // add meta info from additional apps\n\n  var appsMetaInfo = getAppsMetaInfo();\n\n  if (appsMetaInfo) {\n    for (var additionalAppId in appsMetaInfo) {\n      serverInjector.addInfo(additionalAppId, appsMetaInfo[additionalAppId]);\n      delete appsMetaInfo[additionalAppId];\n    }\n\n    clearAppsMetaInfo(true);\n  }\n\n  return serverInjector.injectors;\n}\n\nfunction $meta(options) {\n  options = options || {};\n  /**\n   * Returns an injector for server-side rendering.\n   * @this {Object} - the Vue instance (a root component)\n   * @return {Object} - injector\n   */\n\n  var $root = this.$root;\n  return {\n    getOptions: function getOptions$1() {\n      return getOptions(options);\n    },\n    setOptions: function setOptions(newOptions) {\n      var refreshNavKey = 'refreshOnceOnNavigation';\n\n      if (newOptions && newOptions[refreshNavKey]) {\n        options.refreshOnceOnNavigation = !!newOptions[refreshNavKey];\n        addNavGuards($root);\n      }\n\n      var debounceWaitKey = 'debounceWait';\n\n      if (newOptions && debounceWaitKey in newOptions) {\n        var debounceWait = parseInt(newOptions[debounceWaitKey]);\n\n        if (!isNaN(debounceWait)) {\n          options.debounceWait = debounceWait;\n        }\n      }\n\n      var waitOnDestroyedKey = 'waitOnDestroyed';\n\n      if (newOptions && waitOnDestroyedKey in newOptions) {\n        options.waitOnDestroyed = !!newOptions[waitOnDestroyedKey];\n      }\n    },\n    refresh: function refresh$1() {\n      return refresh($root, options);\n    },\n    inject: function inject$1(injectOptions) {\n      return  inject($root, options, injectOptions) ;\n    },\n    pause: function pause$1() {\n      return pause($root);\n    },\n    resume: function resume$1() {\n      return resume($root);\n    },\n    addApp: function addApp$1(appId) {\n      return addApp($root, appId, options);\n    }\n  };\n}\n\nfunction generate(rawInfo, options) {\n  options = setOptions(options);\n  var metaInfo = getMetaInfo(options, rawInfo, serverSequences);\n  var serverInjector = generateServerInjector(options, metaInfo);\n  return serverInjector.injectors;\n}\n\n/**\n * Plugin install function.\n * @param {Function} Vue - the Vue constructor.\n */\n\nfunction install(Vue, options) {\n  if (Vue.__vuemeta_installed) {\n    return;\n  }\n\n  Vue.__vuemeta_installed = true;\n  options = setOptions(options);\n\n  Vue.prototype.$meta = function () {\n    return $meta.call(this, options);\n  };\n\n  Vue.mixin(createMixin(Vue, options));\n}\n\nvar index = {\n  version: version,\n  install: install,\n  generate: function generate$1(metaInfo, options) {\n    return  generate(metaInfo, options) ;\n  },\n  hasMetaInfo: hasMetaInfo\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (index);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-meta/dist/vue-meta.esm.js\n");

/***/ }),

/***/ "./node_modules/vue-router/dist/vue-router.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/vue-router/dist/vue-router.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\n  * vue-router v3.5.4\n  * (c) 2022 Evan You\n  * @license MIT\n  */\n/*  */\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error((\"[vue-router] \" + message))\n  }\n}\n\nfunction warn (condition, message) {\n  if (!condition) {\n    typeof console !== 'undefined' && console.warn((\"[vue-router] \" + message));\n  }\n}\n\nfunction extend (a, b) {\n  for (var key in b) {\n    a[key] = b[key];\n  }\n  return a\n}\n\n/*  */\n\nvar encodeReserveRE = /[!'()*]/g;\nvar encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };\nvar commaRE = /%2C/g;\n\n// fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\nvar encode = function (str) { return encodeURIComponent(str)\n    .replace(encodeReserveRE, encodeReserveReplacer)\n    .replace(commaRE, ','); };\n\nfunction decode (str) {\n  try {\n    return decodeURIComponent(str)\n  } catch (err) {\n    if (true) {\n      warn(false, (\"Error decoding \\\"\" + str + \"\\\". Leaving it intact.\"));\n    }\n  }\n  return str\n}\n\nfunction resolveQuery (\n  query,\n  extraQuery,\n  _parseQuery\n) {\n  if ( extraQuery === void 0 ) extraQuery = {};\n\n  var parse = _parseQuery || parseQuery;\n  var parsedQuery;\n  try {\n    parsedQuery = parse(query || '');\n  } catch (e) {\n     true && warn(false, e.message);\n    parsedQuery = {};\n  }\n  for (var key in extraQuery) {\n    var value = extraQuery[key];\n    parsedQuery[key] = Array.isArray(value)\n      ? value.map(castQueryParamValue)\n      : castQueryParamValue(value);\n  }\n  return parsedQuery\n}\n\nvar castQueryParamValue = function (value) { return (value == null || typeof value === 'object' ? value : String(value)); };\n\nfunction parseQuery (query) {\n  var res = {};\n\n  query = query.trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return res\n  }\n\n  query.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = decode(parts.shift());\n    var val = parts.length > 0 ? decode(parts.join('=')) : null;\n\n    if (res[key] === undefined) {\n      res[key] = val;\n    } else if (Array.isArray(res[key])) {\n      res[key].push(val);\n    } else {\n      res[key] = [res[key], val];\n    }\n  });\n\n  return res\n}\n\nfunction stringifyQuery (obj) {\n  var res = obj\n    ? Object.keys(obj)\n      .map(function (key) {\n        var val = obj[key];\n\n        if (val === undefined) {\n          return ''\n        }\n\n        if (val === null) {\n          return encode(key)\n        }\n\n        if (Array.isArray(val)) {\n          var result = [];\n          val.forEach(function (val2) {\n            if (val2 === undefined) {\n              return\n            }\n            if (val2 === null) {\n              result.push(encode(key));\n            } else {\n              result.push(encode(key) + '=' + encode(val2));\n            }\n          });\n          return result.join('&')\n        }\n\n        return encode(key) + '=' + encode(val)\n      })\n      .filter(function (x) { return x.length > 0; })\n      .join('&')\n    : null;\n  return res ? (\"?\" + res) : ''\n}\n\n/*  */\n\nvar trailingSlashRE = /\\/?$/;\n\nfunction createRoute (\n  record,\n  location,\n  redirectedFrom,\n  router\n) {\n  var stringifyQuery = router && router.options.stringifyQuery;\n\n  var query = location.query || {};\n  try {\n    query = clone(query);\n  } catch (e) {}\n\n  var route = {\n    name: location.name || (record && record.name),\n    meta: (record && record.meta) || {},\n    path: location.path || '/',\n    hash: location.hash || '',\n    query: query,\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery),\n    matched: record ? formatMatch(record) : []\n  };\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery);\n  }\n  return Object.freeze(route)\n}\n\nfunction clone (value) {\n  if (Array.isArray(value)) {\n    return value.map(clone)\n  } else if (value && typeof value === 'object') {\n    var res = {};\n    for (var key in value) {\n      res[key] = clone(value[key]);\n    }\n    return res\n  } else {\n    return value\n  }\n}\n\n// the starting route that represents the initial state\nvar START = createRoute(null, {\n  path: '/'\n});\n\nfunction formatMatch (record) {\n  var res = [];\n  while (record) {\n    res.unshift(record);\n    record = record.parent;\n  }\n  return res\n}\n\nfunction getFullPath (\n  ref,\n  _stringifyQuery\n) {\n  var path = ref.path;\n  var query = ref.query; if ( query === void 0 ) query = {};\n  var hash = ref.hash; if ( hash === void 0 ) hash = '';\n\n  var stringify = _stringifyQuery || stringifyQuery;\n  return (path || '/') + stringify(query) + hash\n}\n\nfunction isSameRoute (a, b, onlyPath) {\n  if (b === START) {\n    return a === b\n  } else if (!b) {\n    return false\n  } else if (a.path && b.path) {\n    return a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') && (onlyPath ||\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query))\n  } else if (a.name && b.name) {\n    return (\n      a.name === b.name &&\n      (onlyPath || (\n        a.hash === b.hash &&\n      isObjectEqual(a.query, b.query) &&\n      isObjectEqual(a.params, b.params))\n      )\n    )\n  } else {\n    return false\n  }\n}\n\nfunction isObjectEqual (a, b) {\n  if ( a === void 0 ) a = {};\n  if ( b === void 0 ) b = {};\n\n  // handle null value #1566\n  if (!a || !b) { return a === b }\n  var aKeys = Object.keys(a).sort();\n  var bKeys = Object.keys(b).sort();\n  if (aKeys.length !== bKeys.length) {\n    return false\n  }\n  return aKeys.every(function (key, i) {\n    var aVal = a[key];\n    var bKey = bKeys[i];\n    if (bKey !== key) { return false }\n    var bVal = b[key];\n    // query values can be null and undefined\n    if (aVal == null || bVal == null) { return aVal === bVal }\n    // check nested equality\n    if (typeof aVal === 'object' && typeof bVal === 'object') {\n      return isObjectEqual(aVal, bVal)\n    }\n    return String(aVal) === String(bVal)\n  })\n}\n\nfunction isIncludedRoute (current, target) {\n  return (\n    current.path.replace(trailingSlashRE, '/').indexOf(\n      target.path.replace(trailingSlashRE, '/')\n    ) === 0 &&\n    (!target.hash || current.hash === target.hash) &&\n    queryIncludes(current.query, target.query)\n  )\n}\n\nfunction queryIncludes (current, target) {\n  for (var key in target) {\n    if (!(key in current)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction handleRouteEntered (route) {\n  for (var i = 0; i < route.matched.length; i++) {\n    var record = route.matched[i];\n    for (var name in record.instances) {\n      var instance = record.instances[name];\n      var cbs = record.enteredCbs[name];\n      if (!instance || !cbs) { continue }\n      delete record.enteredCbs[name];\n      for (var i$1 = 0; i$1 < cbs.length; i$1++) {\n        if (!instance._isBeingDestroyed) { cbs[i$1](instance); }\n      }\n    }\n  }\n}\n\nvar View = {\n  name: 'RouterView',\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    }\n  },\n  render: function render (_, ref) {\n    var props = ref.props;\n    var children = ref.children;\n    var parent = ref.parent;\n    var data = ref.data;\n\n    // used by devtools to display a router-view badge\n    data.routerView = true;\n\n    // directly use parent context's createElement() function\n    // so that components rendered by router-view can resolve named slots\n    var h = parent.$createElement;\n    var name = props.name;\n    var route = parent.$route;\n    var cache = parent._routerViewCache || (parent._routerViewCache = {});\n\n    // determine current view depth, also check to see if the tree\n    // has been toggled inactive but kept-alive.\n    var depth = 0;\n    var inactive = false;\n    while (parent && parent._routerRoot !== parent) {\n      var vnodeData = parent.$vnode ? parent.$vnode.data : {};\n      if (vnodeData.routerView) {\n        depth++;\n      }\n      if (vnodeData.keepAlive && parent._directInactive && parent._inactive) {\n        inactive = true;\n      }\n      parent = parent.$parent;\n    }\n    data.routerViewDepth = depth;\n\n    // render previous view if the tree is inactive and kept-alive\n    if (inactive) {\n      var cachedData = cache[name];\n      var cachedComponent = cachedData && cachedData.component;\n      if (cachedComponent) {\n        // #2301\n        // pass props\n        if (cachedData.configProps) {\n          fillPropsinData(cachedComponent, data, cachedData.route, cachedData.configProps);\n        }\n        return h(cachedComponent, data, children)\n      } else {\n        // render previous empty view\n        return h()\n      }\n    }\n\n    var matched = route.matched[depth];\n    var component = matched && matched.components[name];\n\n    // render empty node if no matched route or no config component\n    if (!matched || !component) {\n      cache[name] = null;\n      return h()\n    }\n\n    // cache component\n    cache[name] = { component: component };\n\n    // attach instance registration hook\n    // this will be called in the instance's injected lifecycle hooks\n    data.registerRouteInstance = function (vm, val) {\n      // val could be undefined for unregistration\n      var current = matched.instances[name];\n      if (\n        (val && current !== vm) ||\n        (!val && current === vm)\n      ) {\n        matched.instances[name] = val;\n      }\n    }\n\n    // also register instance in prepatch hook\n    // in case the same component instance is reused across different routes\n    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {\n      matched.instances[name] = vnode.componentInstance;\n    };\n\n    // register instance in init hook\n    // in case kept-alive component be actived when routes changed\n    data.hook.init = function (vnode) {\n      if (vnode.data.keepAlive &&\n        vnode.componentInstance &&\n        vnode.componentInstance !== matched.instances[name]\n      ) {\n        matched.instances[name] = vnode.componentInstance;\n      }\n\n      // if the route transition has already been confirmed then we weren't\n      // able to call the cbs during confirmation as the component was not\n      // registered yet, so we call it here.\n      handleRouteEntered(route);\n    };\n\n    var configProps = matched.props && matched.props[name];\n    // save route and configProps in cache\n    if (configProps) {\n      extend(cache[name], {\n        route: route,\n        configProps: configProps\n      });\n      fillPropsinData(component, data, route, configProps);\n    }\n\n    return h(component, data, children)\n  }\n};\n\nfunction fillPropsinData (component, data, route, configProps) {\n  // resolve props\n  var propsToPass = data.props = resolveProps(route, configProps);\n  if (propsToPass) {\n    // clone to prevent mutation\n    propsToPass = data.props = extend({}, propsToPass);\n    // pass non-declared props as attrs\n    var attrs = data.attrs = data.attrs || {};\n    for (var key in propsToPass) {\n      if (!component.props || !(key in component.props)) {\n        attrs[key] = propsToPass[key];\n        delete propsToPass[key];\n      }\n    }\n  }\n}\n\nfunction resolveProps (route, config) {\n  switch (typeof config) {\n    case 'undefined':\n      return\n    case 'object':\n      return config\n    case 'function':\n      return config(route)\n    case 'boolean':\n      return config ? route.params : undefined\n    default:\n      if (true) {\n        warn(\n          false,\n          \"props in \\\"\" + (route.path) + \"\\\" is a \" + (typeof config) + \", \" +\n          \"expecting an object, function or boolean.\"\n        );\n      }\n  }\n}\n\n/*  */\n\nfunction resolvePath (\n  relative,\n  base,\n  append\n) {\n  var firstChar = relative.charAt(0);\n  if (firstChar === '/') {\n    return relative\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative\n  }\n\n  var stack = base.split('/');\n\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  }\n\n  // resolve relative path\n  var segments = relative.replace(/^\\//, '').split('/');\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  }\n\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/')\n}\n\nfunction parsePath (path) {\n  var hash = '';\n  var query = '';\n\n  var hashIndex = path.indexOf('#');\n  if (hashIndex >= 0) {\n    hash = path.slice(hashIndex);\n    path = path.slice(0, hashIndex);\n  }\n\n  var queryIndex = path.indexOf('?');\n  if (queryIndex >= 0) {\n    query = path.slice(queryIndex + 1);\n    path = path.slice(0, queryIndex);\n  }\n\n  return {\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction cleanPath (path) {\n  return path.replace(/\\/(?:\\s*\\/)+/g, '/')\n}\n\nvar isarray = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n/**\n * Expose `pathToRegexp`.\n */\nvar pathToRegexp_1 = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      continue\n    }\n\n    var next = str[index];\n    var prefix = res[2];\n    var name = res[3];\n    var capture = res[4];\n    var group = res[5];\n    var modifier = res[6];\n    var asterisk = res[7];\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    var partial = prefix != null && next != null && next !== prefix;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = res[2] || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    });\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index);\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));\n    }\n  }\n\n  return function (obj, opts) {\n    var path = '';\n    var data = obj || {};\n    var options = opts || {};\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n\n        continue\n      }\n\n      var value = data[token.name];\n      var segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys;\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      });\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n\n      keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\npathToRegexp_1.parse = parse_1;\npathToRegexp_1.compile = compile_1;\npathToRegexp_1.tokensToFunction = tokensToFunction_1;\npathToRegexp_1.tokensToRegExp = tokensToRegExp_1;\n\n/*  */\n\n// $flow-disable-line\nvar regexpCompileCache = Object.create(null);\n\nfunction fillParams (\n  path,\n  params,\n  routeMsg\n) {\n  params = params || {};\n  try {\n    var filler =\n      regexpCompileCache[path] ||\n      (regexpCompileCache[path] = pathToRegexp_1.compile(path));\n\n    // Fix #2505 resolving asterisk routes { name: 'not-found', params: { pathMatch: '/not-found' }}\n    // and fix #3106 so that you can work with location descriptor object having params.pathMatch equal to empty string\n    if (typeof params.pathMatch === 'string') { params[0] = params.pathMatch; }\n\n    return filler(params, { pretty: true })\n  } catch (e) {\n    if (true) {\n      // Fix #3072 no warn if `pathMatch` is string\n      warn(typeof params.pathMatch === 'string', (\"missing param for \" + routeMsg + \": \" + (e.message)));\n    }\n    return ''\n  } finally {\n    // delete the 0 if it was added\n    delete params[0];\n  }\n}\n\n/*  */\n\nfunction normalizeLocation (\n  raw,\n  current,\n  append,\n  router\n) {\n  var next = typeof raw === 'string' ? { path: raw } : raw;\n  // named target\n  if (next._normalized) {\n    return next\n  } else if (next.name) {\n    next = extend({}, raw);\n    var params = next.params;\n    if (params && typeof params === 'object') {\n      next.params = extend({}, params);\n    }\n    return next\n  }\n\n  // relative params\n  if (!next.path && next.params && current) {\n    next = extend({}, next);\n    next._normalized = true;\n    var params$1 = extend(extend({}, current.params), next.params);\n    if (current.name) {\n      next.name = current.name;\n      next.params = params$1;\n    } else if (current.matched.length) {\n      var rawPath = current.matched[current.matched.length - 1].path;\n      next.path = fillParams(rawPath, params$1, (\"path \" + (current.path)));\n    } else if (true) {\n      warn(false, \"relative params navigation requires a current route.\");\n    }\n    return next\n  }\n\n  var parsedPath = parsePath(next.path || '');\n  var basePath = (current && current.path) || '/';\n  var path = parsedPath.path\n    ? resolvePath(parsedPath.path, basePath, append || next.append)\n    : basePath;\n\n  var query = resolveQuery(\n    parsedPath.query,\n    next.query,\n    router && router.options.parseQuery\n  );\n\n  var hash = next.hash || parsedPath.hash;\n  if (hash && hash.charAt(0) !== '#') {\n    hash = \"#\" + hash;\n  }\n\n  return {\n    _normalized: true,\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\n/*  */\n\n// work around weird flow bug\nvar toTypes = [String, Object];\nvar eventTypes = [String, Array];\n\nvar noop = function () {};\n\nvar warnedCustomSlot;\nvar warnedTagProp;\nvar warnedEventProp;\n\nvar Link = {\n  name: 'RouterLink',\n  props: {\n    to: {\n      type: toTypes,\n      required: true\n    },\n    tag: {\n      type: String,\n      default: 'a'\n    },\n    custom: Boolean,\n    exact: Boolean,\n    exactPath: Boolean,\n    append: Boolean,\n    replace: Boolean,\n    activeClass: String,\n    exactActiveClass: String,\n    ariaCurrentValue: {\n      type: String,\n      default: 'page'\n    },\n    event: {\n      type: eventTypes,\n      default: 'click'\n    }\n  },\n  render: function render (h) {\n    var this$1 = this;\n\n    var router = this.$router;\n    var current = this.$route;\n    var ref = router.resolve(\n      this.to,\n      current,\n      this.append\n    );\n    var location = ref.location;\n    var route = ref.route;\n    var href = ref.href;\n\n    var classes = {};\n    var globalActiveClass = router.options.linkActiveClass;\n    var globalExactActiveClass = router.options.linkExactActiveClass;\n    // Support global empty active class\n    var activeClassFallback =\n      globalActiveClass == null ? 'router-link-active' : globalActiveClass;\n    var exactActiveClassFallback =\n      globalExactActiveClass == null\n        ? 'router-link-exact-active'\n        : globalExactActiveClass;\n    var activeClass =\n      this.activeClass == null ? activeClassFallback : this.activeClass;\n    var exactActiveClass =\n      this.exactActiveClass == null\n        ? exactActiveClassFallback\n        : this.exactActiveClass;\n\n    var compareTarget = route.redirectedFrom\n      ? createRoute(null, normalizeLocation(route.redirectedFrom), null, router)\n      : route;\n\n    classes[exactActiveClass] = isSameRoute(current, compareTarget, this.exactPath);\n    classes[activeClass] = this.exact || this.exactPath\n      ? classes[exactActiveClass]\n      : isIncludedRoute(current, compareTarget);\n\n    var ariaCurrentValue = classes[exactActiveClass] ? this.ariaCurrentValue : null;\n\n    var handler = function (e) {\n      if (guardEvent(e)) {\n        if (this$1.replace) {\n          router.replace(location, noop);\n        } else {\n          router.push(location, noop);\n        }\n      }\n    };\n\n    var on = { click: guardEvent };\n    if (Array.isArray(this.event)) {\n      this.event.forEach(function (e) {\n        on[e] = handler;\n      });\n    } else {\n      on[this.event] = handler;\n    }\n\n    var data = { class: classes };\n\n    var scopedSlot =\n      !this.$scopedSlots.$hasNormal &&\n      this.$scopedSlots.default &&\n      this.$scopedSlots.default({\n        href: href,\n        route: route,\n        navigate: handler,\n        isActive: classes[activeClass],\n        isExactActive: classes[exactActiveClass]\n      });\n\n    if (scopedSlot) {\n      if ( true && !this.custom) {\n        !warnedCustomSlot && warn(false, 'In Vue Router 4, the v-slot API will by default wrap its content with an <a> element. Use the custom prop to remove this warning:\\n<router-link v-slot=\"{ navigate, href }\" custom></router-link>\\n');\n        warnedCustomSlot = true;\n      }\n      if (scopedSlot.length === 1) {\n        return scopedSlot[0]\n      } else if (scopedSlot.length > 1 || !scopedSlot.length) {\n        if (true) {\n          warn(\n            false,\n            (\"<router-link> with to=\\\"\" + (this.to) + \"\\\" is trying to use a scoped slot but it didn't provide exactly one child. Wrapping the content with a span element.\")\n          );\n        }\n        return scopedSlot.length === 0 ? h() : h('span', {}, scopedSlot)\n      }\n    }\n\n    if (true) {\n      if ('tag' in this.$options.propsData && !warnedTagProp) {\n        warn(\n          false,\n          \"<router-link>'s tag prop is deprecated and has been removed in Vue Router 4. Use the v-slot API to remove this warning: https://next.router.vuejs.org/guide/migration/#removal-of-event-and-tag-props-in-router-link.\"\n        );\n        warnedTagProp = true;\n      }\n      if ('event' in this.$options.propsData && !warnedEventProp) {\n        warn(\n          false,\n          \"<router-link>'s event prop is deprecated and has been removed in Vue Router 4. Use the v-slot API to remove this warning: https://next.router.vuejs.org/guide/migration/#removal-of-event-and-tag-props-in-router-link.\"\n        );\n        warnedEventProp = true;\n      }\n    }\n\n    if (this.tag === 'a') {\n      data.on = on;\n      data.attrs = { href: href, 'aria-current': ariaCurrentValue };\n    } else {\n      // find the first <a> child and apply listener and href\n      var a = findAnchor(this.$slots.default);\n      if (a) {\n        // in case the <a> is a static node\n        a.isStatic = false;\n        var aData = (a.data = extend({}, a.data));\n        aData.on = aData.on || {};\n        // transform existing events in both objects into arrays so we can push later\n        for (var event in aData.on) {\n          var handler$1 = aData.on[event];\n          if (event in on) {\n            aData.on[event] = Array.isArray(handler$1) ? handler$1 : [handler$1];\n          }\n        }\n        // append new listeners for router-link\n        for (var event$1 in on) {\n          if (event$1 in aData.on) {\n            // on[event] is always a function\n            aData.on[event$1].push(on[event$1]);\n          } else {\n            aData.on[event$1] = handler;\n          }\n        }\n\n        var aAttrs = (a.data.attrs = extend({}, a.data.attrs));\n        aAttrs.href = href;\n        aAttrs['aria-current'] = ariaCurrentValue;\n      } else {\n        // doesn't have <a> child, apply listener to self\n        data.on = on;\n      }\n    }\n\n    return h(this.tag, data, this.$slots.default)\n  }\n};\n\nfunction guardEvent (e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) { return }\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) { return }\n  // don't redirect if `target=\"_blank\"`\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    var target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) { return }\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n  return true\n}\n\nfunction findAnchor (children) {\n  if (children) {\n    var child;\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      if (child.tag === 'a') {\n        return child\n      }\n      if (child.children && (child = findAnchor(child.children))) {\n        return child\n      }\n    }\n  }\n}\n\nvar _Vue;\n\nfunction install (Vue) {\n  if (install.installed && _Vue === Vue) { return }\n  install.installed = true;\n\n  _Vue = Vue;\n\n  var isDef = function (v) { return v !== undefined; };\n\n  var registerInstance = function (vm, callVal) {\n    var i = vm.$options._parentVnode;\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal);\n    }\n  };\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate () {\n      if (isDef(this.$options.router)) {\n        this._routerRoot = this;\n        this._router = this.$options.router;\n        this._router.init(this);\n        Vue.util.defineReactive(this, '_route', this._router.history.current);\n      } else {\n        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;\n      }\n      registerInstance(this, this);\n    },\n    destroyed: function destroyed () {\n      registerInstance(this);\n    }\n  });\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get: function get () { return this._routerRoot._router }\n  });\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get: function get () { return this._routerRoot._route }\n  });\n\n  Vue.component('RouterView', View);\n  Vue.component('RouterLink', Link);\n\n  var strats = Vue.config.optionMergeStrategies;\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;\n}\n\n/*  */\n\nvar inBrowser = typeof window !== 'undefined';\n\n/*  */\n\nfunction createRouteMap (\n  routes,\n  oldPathList,\n  oldPathMap,\n  oldNameMap,\n  parentRoute\n) {\n  // the path list is used to control path matching priority\n  var pathList = oldPathList || [];\n  // $flow-disable-line\n  var pathMap = oldPathMap || Object.create(null);\n  // $flow-disable-line\n  var nameMap = oldNameMap || Object.create(null);\n\n  routes.forEach(function (route) {\n    addRouteRecord(pathList, pathMap, nameMap, route, parentRoute);\n  });\n\n  // ensure wildcard routes are always at the end\n  for (var i = 0, l = pathList.length; i < l; i++) {\n    if (pathList[i] === '*') {\n      pathList.push(pathList.splice(i, 1)[0]);\n      l--;\n      i--;\n    }\n  }\n\n  if (true) {\n    // warn if routes do not include leading slashes\n    var found = pathList\n    // check for missing leading slash\n      .filter(function (path) { return path && path.charAt(0) !== '*' && path.charAt(0) !== '/'; });\n\n    if (found.length > 0) {\n      var pathNames = found.map(function (path) { return (\"- \" + path); }).join('\\n');\n      warn(false, (\"Non-nested routes must include a leading slash character. Fix the following routes: \\n\" + pathNames));\n    }\n  }\n\n  return {\n    pathList: pathList,\n    pathMap: pathMap,\n    nameMap: nameMap\n  }\n}\n\nfunction addRouteRecord (\n  pathList,\n  pathMap,\n  nameMap,\n  route,\n  parent,\n  matchAs\n) {\n  var path = route.path;\n  var name = route.name;\n  if (true) {\n    assert(path != null, \"\\\"path\\\" is required in a route configuration.\");\n    assert(\n      typeof route.component !== 'string',\n      \"route config \\\"component\\\" for path: \" + (String(\n        path || name\n      )) + \" cannot be a \" + \"string id. Use an actual component instead.\"\n    );\n\n    warn(\n      // eslint-disable-next-line no-control-regex\n      !/[^\\u0000-\\u007F]+/.test(path),\n      \"Route with path \\\"\" + path + \"\\\" contains unencoded characters, make sure \" +\n        \"your path is correctly encoded before passing it to the router. Use \" +\n        \"encodeURI to encode static segments of your path.\"\n    );\n  }\n\n  var pathToRegexpOptions =\n    route.pathToRegexpOptions || {};\n  var normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict);\n\n  if (typeof route.caseSensitive === 'boolean') {\n    pathToRegexpOptions.sensitive = route.caseSensitive;\n  }\n\n  var record = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),\n    components: route.components || { default: route.component },\n    alias: route.alias\n      ? typeof route.alias === 'string'\n        ? [route.alias]\n        : route.alias\n      : [],\n    instances: {},\n    enteredCbs: {},\n    name: name,\n    parent: parent,\n    matchAs: matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props:\n      route.props == null\n        ? {}\n        : route.components\n          ? route.props\n          : { default: route.props }\n  };\n\n  if (route.children) {\n    // Warn if route is named, does not redirect and has a default child route.\n    // If users navigate to this route by name, the default child will\n    // not be rendered (GH Issue #629)\n    if (true) {\n      if (\n        route.name &&\n        !route.redirect &&\n        route.children.some(function (child) { return /^\\/?$/.test(child.path); })\n      ) {\n        warn(\n          false,\n          \"Named Route '\" + (route.name) + \"' has a default child route. \" +\n            \"When navigating to this named route (:to=\\\"{name: '\" + (route.name) + \"'}\\\"), \" +\n            \"the default child route will not be rendered. Remove the name from \" +\n            \"this route and use the name of the default child route for named \" +\n            \"links instead.\"\n        );\n      }\n    }\n    route.children.forEach(function (child) {\n      var childMatchAs = matchAs\n        ? cleanPath((matchAs + \"/\" + (child.path)))\n        : undefined;\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);\n    });\n  }\n\n  if (!pathMap[record.path]) {\n    pathList.push(record.path);\n    pathMap[record.path] = record;\n  }\n\n  if (route.alias !== undefined) {\n    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];\n    for (var i = 0; i < aliases.length; ++i) {\n      var alias = aliases[i];\n      if ( true && alias === path) {\n        warn(\n          false,\n          (\"Found an alias with the same value as the path: \\\"\" + path + \"\\\". You have to remove that alias. It will be ignored in development.\")\n        );\n        // skip in dev to make it work\n        continue\n      }\n\n      var aliasRoute = {\n        path: alias,\n        children: route.children\n      };\n      addRouteRecord(\n        pathList,\n        pathMap,\n        nameMap,\n        aliasRoute,\n        parent,\n        record.path || '/' // matchAs\n      );\n    }\n  }\n\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record;\n    } else if ( true && !matchAs) {\n      warn(\n        false,\n        \"Duplicate named routes definition: \" +\n          \"{ name: \\\"\" + name + \"\\\", path: \\\"\" + (record.path) + \"\\\" }\"\n      );\n    }\n  }\n}\n\nfunction compileRouteRegex (\n  path,\n  pathToRegexpOptions\n) {\n  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);\n  if (true) {\n    var keys = Object.create(null);\n    regex.keys.forEach(function (key) {\n      warn(\n        !keys[key.name],\n        (\"Duplicate param keys in route with path: \\\"\" + path + \"\\\"\")\n      );\n      keys[key.name] = true;\n    });\n  }\n  return regex\n}\n\nfunction normalizePath (\n  path,\n  parent,\n  strict\n) {\n  if (!strict) { path = path.replace(/\\/$/, ''); }\n  if (path[0] === '/') { return path }\n  if (parent == null) { return path }\n  return cleanPath(((parent.path) + \"/\" + path))\n}\n\n/*  */\n\n\n\nfunction createMatcher (\n  routes,\n  router\n) {\n  var ref = createRouteMap(routes);\n  var pathList = ref.pathList;\n  var pathMap = ref.pathMap;\n  var nameMap = ref.nameMap;\n\n  function addRoutes (routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap);\n  }\n\n  function addRoute (parentOrRoute, route) {\n    var parent = (typeof parentOrRoute !== 'object') ? nameMap[parentOrRoute] : undefined;\n    // $flow-disable-line\n    createRouteMap([route || parentOrRoute], pathList, pathMap, nameMap, parent);\n\n    // add aliases of parent\n    if (parent && parent.alias.length) {\n      createRouteMap(\n        // $flow-disable-line route is defined if parent is\n        parent.alias.map(function (alias) { return ({ path: alias, children: [route] }); }),\n        pathList,\n        pathMap,\n        nameMap,\n        parent\n      );\n    }\n  }\n\n  function getRoutes () {\n    return pathList.map(function (path) { return pathMap[path]; })\n  }\n\n  function match (\n    raw,\n    currentRoute,\n    redirectedFrom\n  ) {\n    var location = normalizeLocation(raw, currentRoute, false, router);\n    var name = location.name;\n\n    if (name) {\n      var record = nameMap[name];\n      if (true) {\n        warn(record, (\"Route with name '\" + name + \"' does not exist\"));\n      }\n      if (!record) { return _createRoute(null, location) }\n      var paramNames = record.regex.keys\n        .filter(function (key) { return !key.optional; })\n        .map(function (key) { return key.name; });\n\n      if (typeof location.params !== 'object') {\n        location.params = {};\n      }\n\n      if (currentRoute && typeof currentRoute.params === 'object') {\n        for (var key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key];\n          }\n        }\n      }\n\n      location.path = fillParams(record.path, location.params, (\"named route \\\"\" + name + \"\\\"\"));\n      return _createRoute(record, location, redirectedFrom)\n    } else if (location.path) {\n      location.params = {};\n      for (var i = 0; i < pathList.length; i++) {\n        var path = pathList[i];\n        var record$1 = pathMap[path];\n        if (matchRoute(record$1.regex, location.path, location.params)) {\n          return _createRoute(record$1, location, redirectedFrom)\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location)\n  }\n\n  function redirect (\n    record,\n    location\n  ) {\n    var originalRedirect = record.redirect;\n    var redirect = typeof originalRedirect === 'function'\n      ? originalRedirect(createRoute(record, location, null, router))\n      : originalRedirect;\n\n    if (typeof redirect === 'string') {\n      redirect = { path: redirect };\n    }\n\n    if (!redirect || typeof redirect !== 'object') {\n      if (true) {\n        warn(\n          false, (\"invalid redirect option: \" + (JSON.stringify(redirect)))\n        );\n      }\n      return _createRoute(null, location)\n    }\n\n    var re = redirect;\n    var name = re.name;\n    var path = re.path;\n    var query = location.query;\n    var hash = location.hash;\n    var params = location.params;\n    query = re.hasOwnProperty('query') ? re.query : query;\n    hash = re.hasOwnProperty('hash') ? re.hash : hash;\n    params = re.hasOwnProperty('params') ? re.params : params;\n\n    if (name) {\n      // resolved named direct\n      var targetRecord = nameMap[name];\n      if (true) {\n        assert(targetRecord, (\"redirect failed: named route \\\"\" + name + \"\\\" not found.\"));\n      }\n      return match({\n        _normalized: true,\n        name: name,\n        query: query,\n        hash: hash,\n        params: params\n      }, undefined, location)\n    } else if (path) {\n      // 1. resolve relative redirect\n      var rawPath = resolveRecordPath(path, record);\n      // 2. resolve params\n      var resolvedPath = fillParams(rawPath, params, (\"redirect route with path \\\"\" + rawPath + \"\\\"\"));\n      // 3. rematch with existing query and hash\n      return match({\n        _normalized: true,\n        path: resolvedPath,\n        query: query,\n        hash: hash\n      }, undefined, location)\n    } else {\n      if (true) {\n        warn(false, (\"invalid redirect option: \" + (JSON.stringify(redirect))));\n      }\n      return _createRoute(null, location)\n    }\n  }\n\n  function alias (\n    record,\n    location,\n    matchAs\n  ) {\n    var aliasedPath = fillParams(matchAs, location.params, (\"aliased route with path \\\"\" + matchAs + \"\\\"\"));\n    var aliasedMatch = match({\n      _normalized: true,\n      path: aliasedPath\n    });\n    if (aliasedMatch) {\n      var matched = aliasedMatch.matched;\n      var aliasedRecord = matched[matched.length - 1];\n      location.params = aliasedMatch.params;\n      return _createRoute(aliasedRecord, location)\n    }\n    return _createRoute(null, location)\n  }\n\n  function _createRoute (\n    record,\n    location,\n    redirectedFrom\n  ) {\n    if (record && record.redirect) {\n      return redirect(record, redirectedFrom || location)\n    }\n    if (record && record.matchAs) {\n      return alias(record, location, record.matchAs)\n    }\n    return createRoute(record, location, redirectedFrom, router)\n  }\n\n  return {\n    match: match,\n    addRoute: addRoute,\n    getRoutes: getRoutes,\n    addRoutes: addRoutes\n  }\n}\n\nfunction matchRoute (\n  regex,\n  path,\n  params\n) {\n  var m = path.match(regex);\n\n  if (!m) {\n    return false\n  } else if (!params) {\n    return true\n  }\n\n  for (var i = 1, len = m.length; i < len; ++i) {\n    var key = regex.keys[i - 1];\n    if (key) {\n      // Fix #1994: using * with props: true generates a param named 0\n      params[key.name || 'pathMatch'] = typeof m[i] === 'string' ? decode(m[i]) : m[i];\n    }\n  }\n\n  return true\n}\n\nfunction resolveRecordPath (path, record) {\n  return resolvePath(path, record.parent ? record.parent.path : '/', true)\n}\n\n/*  */\n\n// use User Timing api (if present) for more accurate key precision\nvar Time =\n  inBrowser && window.performance && window.performance.now\n    ? window.performance\n    : Date;\n\nfunction genStateKey () {\n  return Time.now().toFixed(3)\n}\n\nvar _key = genStateKey();\n\nfunction getStateKey () {\n  return _key\n}\n\nfunction setStateKey (key) {\n  return (_key = key)\n}\n\n/*  */\n\nvar positionStore = Object.create(null);\n\nfunction setupScroll () {\n  // Prevent browser scroll behavior on History popstate\n  if ('scrollRestoration' in window.history) {\n    window.history.scrollRestoration = 'manual';\n  }\n  // Fix for #1585 for Firefox\n  // Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678\n  // Fix for #2774 Support for apps loaded from Windows file shares not mapped to network drives: replaced location.origin with\n  // window.location.protocol + '//' + window.location.host\n  // location.host contains the port and location.hostname doesn't\n  var protocolAndPath = window.location.protocol + '//' + window.location.host;\n  var absolutePath = window.location.href.replace(protocolAndPath, '');\n  // preserve existing history state as it could be overriden by the user\n  var stateCopy = extend({}, window.history.state);\n  stateCopy.key = getStateKey();\n  window.history.replaceState(stateCopy, '', absolutePath);\n  window.addEventListener('popstate', handlePopState);\n  return function () {\n    window.removeEventListener('popstate', handlePopState);\n  }\n}\n\nfunction handleScroll (\n  router,\n  to,\n  from,\n  isPop\n) {\n  if (!router.app) {\n    return\n  }\n\n  var behavior = router.options.scrollBehavior;\n  if (!behavior) {\n    return\n  }\n\n  if (true) {\n    assert(typeof behavior === 'function', \"scrollBehavior must be a function\");\n  }\n\n  // wait until re-render finishes before scrolling\n  router.app.$nextTick(function () {\n    var position = getScrollPosition();\n    var shouldScroll = behavior.call(\n      router,\n      to,\n      from,\n      isPop ? position : null\n    );\n\n    if (!shouldScroll) {\n      return\n    }\n\n    if (typeof shouldScroll.then === 'function') {\n      shouldScroll\n        .then(function (shouldScroll) {\n          scrollToPosition((shouldScroll), position);\n        })\n        .catch(function (err) {\n          if (true) {\n            assert(false, err.toString());\n          }\n        });\n    } else {\n      scrollToPosition(shouldScroll, position);\n    }\n  });\n}\n\nfunction saveScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    positionStore[key] = {\n      x: window.pageXOffset,\n      y: window.pageYOffset\n    };\n  }\n}\n\nfunction handlePopState (e) {\n  saveScrollPosition();\n  if (e.state && e.state.key) {\n    setStateKey(e.state.key);\n  }\n}\n\nfunction getScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    return positionStore[key]\n  }\n}\n\nfunction getElementPosition (el, offset) {\n  var docEl = document.documentElement;\n  var docRect = docEl.getBoundingClientRect();\n  var elRect = el.getBoundingClientRect();\n  return {\n    x: elRect.left - docRect.left - offset.x,\n    y: elRect.top - docRect.top - offset.y\n  }\n}\n\nfunction isValidPosition (obj) {\n  return isNumber(obj.x) || isNumber(obj.y)\n}\n\nfunction normalizePosition (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : window.pageXOffset,\n    y: isNumber(obj.y) ? obj.y : window.pageYOffset\n  }\n}\n\nfunction normalizeOffset (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : 0,\n    y: isNumber(obj.y) ? obj.y : 0\n  }\n}\n\nfunction isNumber (v) {\n  return typeof v === 'number'\n}\n\nvar hashStartsWithNumberRE = /^#\\d/;\n\nfunction scrollToPosition (shouldScroll, position) {\n  var isObject = typeof shouldScroll === 'object';\n  if (isObject && typeof shouldScroll.selector === 'string') {\n    // getElementById would still fail if the selector contains a more complicated query like #main[data-attr]\n    // but at the same time, it doesn't make much sense to select an element with an id and an extra selector\n    var el = hashStartsWithNumberRE.test(shouldScroll.selector) // $flow-disable-line\n      ? document.getElementById(shouldScroll.selector.slice(1)) // $flow-disable-line\n      : document.querySelector(shouldScroll.selector);\n\n    if (el) {\n      var offset =\n        shouldScroll.offset && typeof shouldScroll.offset === 'object'\n          ? shouldScroll.offset\n          : {};\n      offset = normalizeOffset(offset);\n      position = getElementPosition(el, offset);\n    } else if (isValidPosition(shouldScroll)) {\n      position = normalizePosition(shouldScroll);\n    }\n  } else if (isObject && isValidPosition(shouldScroll)) {\n    position = normalizePosition(shouldScroll);\n  }\n\n  if (position) {\n    // $flow-disable-line\n    if ('scrollBehavior' in document.documentElement.style) {\n      window.scrollTo({\n        left: position.x,\n        top: position.y,\n        // $flow-disable-line\n        behavior: shouldScroll.behavior\n      });\n    } else {\n      window.scrollTo(position.x, position.y);\n    }\n  }\n}\n\n/*  */\n\nvar supportsPushState =\n  inBrowser &&\n  (function () {\n    var ua = window.navigator.userAgent;\n\n    if (\n      (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&\n      ua.indexOf('Mobile Safari') !== -1 &&\n      ua.indexOf('Chrome') === -1 &&\n      ua.indexOf('Windows Phone') === -1\n    ) {\n      return false\n    }\n\n    return window.history && typeof window.history.pushState === 'function'\n  })();\n\nfunction pushState (url, replace) {\n  saveScrollPosition();\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  var history = window.history;\n  try {\n    if (replace) {\n      // preserve existing history state as it could be overriden by the user\n      var stateCopy = extend({}, history.state);\n      stateCopy.key = getStateKey();\n      history.replaceState(stateCopy, '', url);\n    } else {\n      history.pushState({ key: setStateKey(genStateKey()) }, '', url);\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url);\n  }\n}\n\nfunction replaceState (url) {\n  pushState(url, true);\n}\n\n/*  */\n\nfunction runQueue (queue, fn, cb) {\n  var step = function (index) {\n    if (index >= queue.length) {\n      cb();\n    } else {\n      if (queue[index]) {\n        fn(queue[index], function () {\n          step(index + 1);\n        });\n      } else {\n        step(index + 1);\n      }\n    }\n  };\n  step(0);\n}\n\n// When changing thing, also edit router.d.ts\nvar NavigationFailureType = {\n  redirected: 2,\n  aborted: 4,\n  cancelled: 8,\n  duplicated: 16\n};\n\nfunction createNavigationRedirectedError (from, to) {\n  return createRouterError(\n    from,\n    to,\n    NavigationFailureType.redirected,\n    (\"Redirected when going from \\\"\" + (from.fullPath) + \"\\\" to \\\"\" + (stringifyRoute(\n      to\n    )) + \"\\\" via a navigation guard.\")\n  )\n}\n\nfunction createNavigationDuplicatedError (from, to) {\n  var error = createRouterError(\n    from,\n    to,\n    NavigationFailureType.duplicated,\n    (\"Avoided redundant navigation to current location: \\\"\" + (from.fullPath) + \"\\\".\")\n  );\n  // backwards compatible with the first introduction of Errors\n  error.name = 'NavigationDuplicated';\n  return error\n}\n\nfunction createNavigationCancelledError (from, to) {\n  return createRouterError(\n    from,\n    to,\n    NavigationFailureType.cancelled,\n    (\"Navigation cancelled from \\\"\" + (from.fullPath) + \"\\\" to \\\"\" + (to.fullPath) + \"\\\" with a new navigation.\")\n  )\n}\n\nfunction createNavigationAbortedError (from, to) {\n  return createRouterError(\n    from,\n    to,\n    NavigationFailureType.aborted,\n    (\"Navigation aborted from \\\"\" + (from.fullPath) + \"\\\" to \\\"\" + (to.fullPath) + \"\\\" via a navigation guard.\")\n  )\n}\n\nfunction createRouterError (from, to, type, message) {\n  var error = new Error(message);\n  error._isRouter = true;\n  error.from = from;\n  error.to = to;\n  error.type = type;\n\n  return error\n}\n\nvar propertiesToLog = ['params', 'query', 'hash'];\n\nfunction stringifyRoute (to) {\n  if (typeof to === 'string') { return to }\n  if ('path' in to) { return to.path }\n  var location = {};\n  propertiesToLog.forEach(function (key) {\n    if (key in to) { location[key] = to[key]; }\n  });\n  return JSON.stringify(location, null, 2)\n}\n\nfunction isError (err) {\n  return Object.prototype.toString.call(err).indexOf('Error') > -1\n}\n\nfunction isNavigationFailure (err, errorType) {\n  return (\n    isError(err) &&\n    err._isRouter &&\n    (errorType == null || err.type === errorType)\n  )\n}\n\n/*  */\n\nfunction resolveAsyncComponents (matched) {\n  return function (to, from, next) {\n    var hasAsync = false;\n    var pending = 0;\n    var error = null;\n\n    flatMapComponents(matched, function (def, _, match, key) {\n      // if it's a function and doesn't have cid attached,\n      // assume it's an async component resolve function.\n      // we are not using Vue's default async resolving mechanism because\n      // we want to halt the navigation until the incoming component has been\n      // resolved.\n      if (typeof def === 'function' && def.cid === undefined) {\n        hasAsync = true;\n        pending++;\n\n        var resolve = once(function (resolvedDef) {\n          if (isESModule(resolvedDef)) {\n            resolvedDef = resolvedDef.default;\n          }\n          // save resolved on async factory in case it's used elsewhere\n          def.resolved = typeof resolvedDef === 'function'\n            ? resolvedDef\n            : _Vue.extend(resolvedDef);\n          match.components[key] = resolvedDef;\n          pending--;\n          if (pending <= 0) {\n            next();\n          }\n        });\n\n        var reject = once(function (reason) {\n          var msg = \"Failed to resolve async component \" + key + \": \" + reason;\n           true && warn(false, msg);\n          if (!error) {\n            error = isError(reason)\n              ? reason\n              : new Error(msg);\n            next(error);\n          }\n        });\n\n        var res;\n        try {\n          res = def(resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n        if (res) {\n          if (typeof res.then === 'function') {\n            res.then(resolve, reject);\n          } else {\n            // new syntax in Vue 2.3\n            var comp = res.component;\n            if (comp && typeof comp.then === 'function') {\n              comp.then(resolve, reject);\n            }\n          }\n        }\n      }\n    });\n\n    if (!hasAsync) { next(); }\n  }\n}\n\nfunction flatMapComponents (\n  matched,\n  fn\n) {\n  return flatten(matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) { return fn(\n      m.components[key],\n      m.instances[key],\n      m, key\n    ); })\n  }))\n}\n\nfunction flatten (arr) {\n  return Array.prototype.concat.apply([], arr)\n}\n\nvar hasSymbol =\n  typeof Symbol === 'function' &&\n  typeof Symbol.toStringTag === 'symbol';\n\nfunction isESModule (obj) {\n  return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module')\n}\n\n// in Webpack 2, require.ensure now also returns a Promise\n// so the resolve/reject functions may get called an extra time\n// if the user uses an arrow function shorthand that happens to\n// return that Promise.\nfunction once (fn) {\n  var called = false;\n  return function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    if (called) { return }\n    called = true;\n    return fn.apply(this, args)\n  }\n}\n\n/*  */\n\nvar History = function History (router, base) {\n  this.router = router;\n  this.base = normalizeBase(base);\n  // start with a route object that stands for \"nowhere\"\n  this.current = START;\n  this.pending = null;\n  this.ready = false;\n  this.readyCbs = [];\n  this.readyErrorCbs = [];\n  this.errorCbs = [];\n  this.listeners = [];\n};\n\nHistory.prototype.listen = function listen (cb) {\n  this.cb = cb;\n};\n\nHistory.prototype.onReady = function onReady (cb, errorCb) {\n  if (this.ready) {\n    cb();\n  } else {\n    this.readyCbs.push(cb);\n    if (errorCb) {\n      this.readyErrorCbs.push(errorCb);\n    }\n  }\n};\n\nHistory.prototype.onError = function onError (errorCb) {\n  this.errorCbs.push(errorCb);\n};\n\nHistory.prototype.transitionTo = function transitionTo (\n  location,\n  onComplete,\n  onAbort\n) {\n    var this$1 = this;\n\n  var route;\n  // catch redirect option https://github.com/vuejs/vue-router/issues/3201\n  try {\n    route = this.router.match(location, this.current);\n  } catch (e) {\n    this.errorCbs.forEach(function (cb) {\n      cb(e);\n    });\n    // Exception should still be thrown\n    throw e\n  }\n  var prev = this.current;\n  this.confirmTransition(\n    route,\n    function () {\n      this$1.updateRoute(route);\n      onComplete && onComplete(route);\n      this$1.ensureURL();\n      this$1.router.afterHooks.forEach(function (hook) {\n        hook && hook(route, prev);\n      });\n\n      // fire ready cbs once\n      if (!this$1.ready) {\n        this$1.ready = true;\n        this$1.readyCbs.forEach(function (cb) {\n          cb(route);\n        });\n      }\n    },\n    function (err) {\n      if (onAbort) {\n        onAbort(err);\n      }\n      if (err && !this$1.ready) {\n        // Initial redirection should not mark the history as ready yet\n        // because it's triggered by the redirection instead\n        // https://github.com/vuejs/vue-router/issues/3225\n        // https://github.com/vuejs/vue-router/issues/3331\n        if (!isNavigationFailure(err, NavigationFailureType.redirected) || prev !== START) {\n          this$1.ready = true;\n          this$1.readyErrorCbs.forEach(function (cb) {\n            cb(err);\n          });\n        }\n      }\n    }\n  );\n};\n\nHistory.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {\n    var this$1 = this;\n\n  var current = this.current;\n  this.pending = route;\n  var abort = function (err) {\n    // changed after adding errors with\n    // https://github.com/vuejs/vue-router/pull/3047 before that change,\n    // redirect and aborted navigation would produce an err == null\n    if (!isNavigationFailure(err) && isError(err)) {\n      if (this$1.errorCbs.length) {\n        this$1.errorCbs.forEach(function (cb) {\n          cb(err);\n        });\n      } else {\n        if (true) {\n          warn(false, 'uncaught error during route navigation:');\n        }\n        console.error(err);\n      }\n    }\n    onAbort && onAbort(err);\n  };\n  var lastRouteIndex = route.matched.length - 1;\n  var lastCurrentIndex = current.matched.length - 1;\n  if (\n    isSameRoute(route, current) &&\n    // in the case the route map has been dynamically appended to\n    lastRouteIndex === lastCurrentIndex &&\n    route.matched[lastRouteIndex] === current.matched[lastCurrentIndex]\n  ) {\n    this.ensureURL();\n    if (route.hash) {\n      handleScroll(this.router, current, route, false);\n    }\n    return abort(createNavigationDuplicatedError(current, route))\n  }\n\n  var ref = resolveQueue(\n    this.current.matched,\n    route.matched\n  );\n    var updated = ref.updated;\n    var deactivated = ref.deactivated;\n    var activated = ref.activated;\n\n  var queue = [].concat(\n    // in-component leave guards\n    extractLeaveGuards(deactivated),\n    // global before hooks\n    this.router.beforeHooks,\n    // in-component update hooks\n    extractUpdateHooks(updated),\n    // in-config enter guards\n    activated.map(function (m) { return m.beforeEnter; }),\n    // async components\n    resolveAsyncComponents(activated)\n  );\n\n  var iterator = function (hook, next) {\n    if (this$1.pending !== route) {\n      return abort(createNavigationCancelledError(current, route))\n    }\n    try {\n      hook(route, current, function (to) {\n        if (to === false) {\n          // next(false) -> abort navigation, ensure current URL\n          this$1.ensureURL(true);\n          abort(createNavigationAbortedError(current, route));\n        } else if (isError(to)) {\n          this$1.ensureURL(true);\n          abort(to);\n        } else if (\n          typeof to === 'string' ||\n          (typeof to === 'object' &&\n            (typeof to.path === 'string' || typeof to.name === 'string'))\n        ) {\n          // next('/') or next({ path: '/' }) -> redirect\n          abort(createNavigationRedirectedError(current, route));\n          if (typeof to === 'object' && to.replace) {\n            this$1.replace(to);\n          } else {\n            this$1.push(to);\n          }\n        } else {\n          // confirm transition and pass on the value\n          next(to);\n        }\n      });\n    } catch (e) {\n      abort(e);\n    }\n  };\n\n  runQueue(queue, iterator, function () {\n    // wait until async components are resolved before\n    // extracting in-component enter guards\n    var enterGuards = extractEnterGuards(activated);\n    var queue = enterGuards.concat(this$1.router.resolveHooks);\n    runQueue(queue, iterator, function () {\n      if (this$1.pending !== route) {\n        return abort(createNavigationCancelledError(current, route))\n      }\n      this$1.pending = null;\n      onComplete(route);\n      if (this$1.router.app) {\n        this$1.router.app.$nextTick(function () {\n          handleRouteEntered(route);\n        });\n      }\n    });\n  });\n};\n\nHistory.prototype.updateRoute = function updateRoute (route) {\n  this.current = route;\n  this.cb && this.cb(route);\n};\n\nHistory.prototype.setupListeners = function setupListeners () {\n  // Default implementation is empty\n};\n\nHistory.prototype.teardown = function teardown () {\n  // clean up event listeners\n  // https://github.com/vuejs/vue-router/issues/2341\n  this.listeners.forEach(function (cleanupListener) {\n    cleanupListener();\n  });\n  this.listeners = [];\n\n  // reset current history route\n  // https://github.com/vuejs/vue-router/issues/3294\n  this.current = START;\n  this.pending = null;\n};\n\nfunction normalizeBase (base) {\n  if (!base) {\n    if (inBrowser) {\n      // respect <base> tag\n      var baseEl = document.querySelector('base');\n      base = (baseEl && baseEl.getAttribute('href')) || '/';\n      // strip full URL origin\n      base = base.replace(/^https?:\\/\\/[^\\/]+/, '');\n    } else {\n      base = '/';\n    }\n  }\n  // make sure there's the starting slash\n  if (base.charAt(0) !== '/') {\n    base = '/' + base;\n  }\n  // remove trailing slash\n  return base.replace(/\\/$/, '')\n}\n\nfunction resolveQueue (\n  current,\n  next\n) {\n  var i;\n  var max = Math.max(current.length, next.length);\n  for (i = 0; i < max; i++) {\n    if (current[i] !== next[i]) {\n      break\n    }\n  }\n  return {\n    updated: next.slice(0, i),\n    activated: next.slice(i),\n    deactivated: current.slice(i)\n  }\n}\n\nfunction extractGuards (\n  records,\n  name,\n  bind,\n  reverse\n) {\n  var guards = flatMapComponents(records, function (def, instance, match, key) {\n    var guard = extractGuard(def, name);\n    if (guard) {\n      return Array.isArray(guard)\n        ? guard.map(function (guard) { return bind(guard, instance, match, key); })\n        : bind(guard, instance, match, key)\n    }\n  });\n  return flatten(reverse ? guards.reverse() : guards)\n}\n\nfunction extractGuard (\n  def,\n  key\n) {\n  if (typeof def !== 'function') {\n    // extend now so that global mixins are applied.\n    def = _Vue.extend(def);\n  }\n  return def.options[key]\n}\n\nfunction extractLeaveGuards (deactivated) {\n  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)\n}\n\nfunction extractUpdateHooks (updated) {\n  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)\n}\n\nfunction bindGuard (guard, instance) {\n  if (instance) {\n    return function boundRouteGuard () {\n      return guard.apply(instance, arguments)\n    }\n  }\n}\n\nfunction extractEnterGuards (\n  activated\n) {\n  return extractGuards(\n    activated,\n    'beforeRouteEnter',\n    function (guard, _, match, key) {\n      return bindEnterGuard(guard, match, key)\n    }\n  )\n}\n\nfunction bindEnterGuard (\n  guard,\n  match,\n  key\n) {\n  return function routeEnterGuard (to, from, next) {\n    return guard(to, from, function (cb) {\n      if (typeof cb === 'function') {\n        if (!match.enteredCbs[key]) {\n          match.enteredCbs[key] = [];\n        }\n        match.enteredCbs[key].push(cb);\n      }\n      next(cb);\n    })\n  }\n}\n\n/*  */\n\nvar HTML5History = /*@__PURE__*/(function (History) {\n  function HTML5History (router, base) {\n    History.call(this, router, base);\n\n    this._startLocation = getLocation(this.base);\n  }\n\n  if ( History ) HTML5History.__proto__ = History;\n  HTML5History.prototype = Object.create( History && History.prototype );\n  HTML5History.prototype.constructor = HTML5History;\n\n  HTML5History.prototype.setupListeners = function setupListeners () {\n    var this$1 = this;\n\n    if (this.listeners.length > 0) {\n      return\n    }\n\n    var router = this.router;\n    var expectScroll = router.options.scrollBehavior;\n    var supportsScroll = supportsPushState && expectScroll;\n\n    if (supportsScroll) {\n      this.listeners.push(setupScroll());\n    }\n\n    var handleRoutingEvent = function () {\n      var current = this$1.current;\n\n      // Avoiding first `popstate` event dispatched in some browsers but first\n      // history route not updated since async guard at the same time.\n      var location = getLocation(this$1.base);\n      if (this$1.current === START && location === this$1._startLocation) {\n        return\n      }\n\n      this$1.transitionTo(location, function (route) {\n        if (supportsScroll) {\n          handleScroll(router, route, current, true);\n        }\n      });\n    };\n    window.addEventListener('popstate', handleRoutingEvent);\n    this.listeners.push(function () {\n      window.removeEventListener('popstate', handleRoutingEvent);\n    });\n  };\n\n  HTML5History.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HTML5History.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.ensureURL = function ensureURL (push) {\n    if (getLocation(this.base) !== this.current.fullPath) {\n      var current = cleanPath(this.base + this.current.fullPath);\n      push ? pushState(current) : replaceState(current);\n    }\n  };\n\n  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getLocation(this.base)\n  };\n\n  return HTML5History;\n}(History));\n\nfunction getLocation (base) {\n  var path = window.location.pathname;\n  var pathLowerCase = path.toLowerCase();\n  var baseLowerCase = base.toLowerCase();\n  // base=\"/a\" shouldn't turn path=\"/app\" into \"/a/pp\"\n  // https://github.com/vuejs/vue-router/issues/3555\n  // so we ensure the trailing slash in the base\n  if (base && ((pathLowerCase === baseLowerCase) ||\n    (pathLowerCase.indexOf(cleanPath(baseLowerCase + '/')) === 0))) {\n    path = path.slice(base.length);\n  }\n  return (path || '/') + window.location.search + window.location.hash\n}\n\n/*  */\n\nvar HashHistory = /*@__PURE__*/(function (History) {\n  function HashHistory (router, base, fallback) {\n    History.call(this, router, base);\n    // check history fallback deeplinking\n    if (fallback && checkFallback(this.base)) {\n      return\n    }\n    ensureSlash();\n  }\n\n  if ( History ) HashHistory.__proto__ = History;\n  HashHistory.prototype = Object.create( History && History.prototype );\n  HashHistory.prototype.constructor = HashHistory;\n\n  // this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  HashHistory.prototype.setupListeners = function setupListeners () {\n    var this$1 = this;\n\n    if (this.listeners.length > 0) {\n      return\n    }\n\n    var router = this.router;\n    var expectScroll = router.options.scrollBehavior;\n    var supportsScroll = supportsPushState && expectScroll;\n\n    if (supportsScroll) {\n      this.listeners.push(setupScroll());\n    }\n\n    var handleRoutingEvent = function () {\n      var current = this$1.current;\n      if (!ensureSlash()) {\n        return\n      }\n      this$1.transitionTo(getHash(), function (route) {\n        if (supportsScroll) {\n          handleScroll(this$1.router, route, current, true);\n        }\n        if (!supportsPushState) {\n          replaceHash(route.fullPath);\n        }\n      });\n    };\n    var eventType = supportsPushState ? 'popstate' : 'hashchange';\n    window.addEventListener(\n      eventType,\n      handleRoutingEvent\n    );\n    this.listeners.push(function () {\n      window.removeEventListener(eventType, handleRoutingEvent);\n    });\n  };\n\n  HashHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(\n      location,\n      function (route) {\n        pushHash(route.fullPath);\n        handleScroll(this$1.router, route, fromRoute, false);\n        onComplete && onComplete(route);\n      },\n      onAbort\n    );\n  };\n\n  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(\n      location,\n      function (route) {\n        replaceHash(route.fullPath);\n        handleScroll(this$1.router, route, fromRoute, false);\n        onComplete && onComplete(route);\n      },\n      onAbort\n    );\n  };\n\n  HashHistory.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HashHistory.prototype.ensureURL = function ensureURL (push) {\n    var current = this.current.fullPath;\n    if (getHash() !== current) {\n      push ? pushHash(current) : replaceHash(current);\n    }\n  };\n\n  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getHash()\n  };\n\n  return HashHistory;\n}(History));\n\nfunction checkFallback (base) {\n  var location = getLocation(base);\n  if (!/^\\/#/.test(location)) {\n    window.location.replace(cleanPath(base + '/#' + location));\n    return true\n  }\n}\n\nfunction ensureSlash () {\n  var path = getHash();\n  if (path.charAt(0) === '/') {\n    return true\n  }\n  replaceHash('/' + path);\n  return false\n}\n\nfunction getHash () {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var index = href.indexOf('#');\n  // empty path\n  if (index < 0) { return '' }\n\n  href = href.slice(index + 1);\n\n  return href\n}\n\nfunction getUrl (path) {\n  var href = window.location.href;\n  var i = href.indexOf('#');\n  var base = i >= 0 ? href.slice(0, i) : href;\n  return (base + \"#\" + path)\n}\n\nfunction pushHash (path) {\n  if (supportsPushState) {\n    pushState(getUrl(path));\n  } else {\n    window.location.hash = path;\n  }\n}\n\nfunction replaceHash (path) {\n  if (supportsPushState) {\n    replaceState(getUrl(path));\n  } else {\n    window.location.replace(getUrl(path));\n  }\n}\n\n/*  */\n\nvar AbstractHistory = /*@__PURE__*/(function (History) {\n  function AbstractHistory (router, base) {\n    History.call(this, router, base);\n    this.stack = [];\n    this.index = -1;\n  }\n\n  if ( History ) AbstractHistory.__proto__ = History;\n  AbstractHistory.prototype = Object.create( History && History.prototype );\n  AbstractHistory.prototype.constructor = AbstractHistory;\n\n  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(\n      location,\n      function (route) {\n        this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);\n        this$1.index++;\n        onComplete && onComplete(route);\n      },\n      onAbort\n    );\n  };\n\n  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(\n      location,\n      function (route) {\n        this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);\n        onComplete && onComplete(route);\n      },\n      onAbort\n    );\n  };\n\n  AbstractHistory.prototype.go = function go (n) {\n    var this$1 = this;\n\n    var targetIndex = this.index + n;\n    if (targetIndex < 0 || targetIndex >= this.stack.length) {\n      return\n    }\n    var route = this.stack[targetIndex];\n    this.confirmTransition(\n      route,\n      function () {\n        var prev = this$1.current;\n        this$1.index = targetIndex;\n        this$1.updateRoute(route);\n        this$1.router.afterHooks.forEach(function (hook) {\n          hook && hook(route, prev);\n        });\n      },\n      function (err) {\n        if (isNavigationFailure(err, NavigationFailureType.duplicated)) {\n          this$1.index = targetIndex;\n        }\n      }\n    );\n  };\n\n  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    var current = this.stack[this.stack.length - 1];\n    return current ? current.fullPath : '/'\n  };\n\n  AbstractHistory.prototype.ensureURL = function ensureURL () {\n    // noop\n  };\n\n  return AbstractHistory;\n}(History));\n\n/*  */\n\nvar VueRouter = function VueRouter (options) {\n  if ( options === void 0 ) options = {};\n\n  if (true) {\n    warn(this instanceof VueRouter, \"Router must be called with the new operator.\");\n  }\n  this.app = null;\n  this.apps = [];\n  this.options = options;\n  this.beforeHooks = [];\n  this.resolveHooks = [];\n  this.afterHooks = [];\n  this.matcher = createMatcher(options.routes || [], this);\n\n  var mode = options.mode || 'hash';\n  this.fallback =\n    mode === 'history' && !supportsPushState && options.fallback !== false;\n  if (this.fallback) {\n    mode = 'hash';\n  }\n  if (!inBrowser) {\n    mode = 'abstract';\n  }\n  this.mode = mode;\n\n  switch (mode) {\n    case 'history':\n      this.history = new HTML5History(this, options.base);\n      break\n    case 'hash':\n      this.history = new HashHistory(this, options.base, this.fallback);\n      break\n    case 'abstract':\n      this.history = new AbstractHistory(this, options.base);\n      break\n    default:\n      if (true) {\n        assert(false, (\"invalid mode: \" + mode));\n      }\n  }\n};\n\nvar prototypeAccessors = { currentRoute: { configurable: true } };\n\nVueRouter.prototype.match = function match (raw, current, redirectedFrom) {\n  return this.matcher.match(raw, current, redirectedFrom)\n};\n\nprototypeAccessors.currentRoute.get = function () {\n  return this.history && this.history.current\n};\n\nVueRouter.prototype.init = function init (app /* Vue component instance */) {\n    var this$1 = this;\n\n   true &&\n    assert(\n      install.installed,\n      \"not installed. Make sure to call `Vue.use(VueRouter)` \" +\n        \"before creating root instance.\"\n    );\n\n  this.apps.push(app);\n\n  // set up app destroyed handler\n  // https://github.com/vuejs/vue-router/issues/2639\n  app.$once('hook:destroyed', function () {\n    // clean out app from this.apps array once destroyed\n    var index = this$1.apps.indexOf(app);\n    if (index > -1) { this$1.apps.splice(index, 1); }\n    // ensure we still have a main app or null if no apps\n    // we do not release the router so it can be reused\n    if (this$1.app === app) { this$1.app = this$1.apps[0] || null; }\n\n    if (!this$1.app) { this$1.history.teardown(); }\n  });\n\n  // main app previously initialized\n  // return as we don't need to set up new history listener\n  if (this.app) {\n    return\n  }\n\n  this.app = app;\n\n  var history = this.history;\n\n  if (history instanceof HTML5History || history instanceof HashHistory) {\n    var handleInitialScroll = function (routeOrError) {\n      var from = history.current;\n      var expectScroll = this$1.options.scrollBehavior;\n      var supportsScroll = supportsPushState && expectScroll;\n\n      if (supportsScroll && 'fullPath' in routeOrError) {\n        handleScroll(this$1, routeOrError, from, false);\n      }\n    };\n    var setupListeners = function (routeOrError) {\n      history.setupListeners();\n      handleInitialScroll(routeOrError);\n    };\n    history.transitionTo(\n      history.getCurrentLocation(),\n      setupListeners,\n      setupListeners\n    );\n  }\n\n  history.listen(function (route) {\n    this$1.apps.forEach(function (app) {\n      app._route = route;\n    });\n  });\n};\n\nVueRouter.prototype.beforeEach = function beforeEach (fn) {\n  return registerHook(this.beforeHooks, fn)\n};\n\nVueRouter.prototype.beforeResolve = function beforeResolve (fn) {\n  return registerHook(this.resolveHooks, fn)\n};\n\nVueRouter.prototype.afterEach = function afterEach (fn) {\n  return registerHook(this.afterHooks, fn)\n};\n\nVueRouter.prototype.onReady = function onReady (cb, errorCb) {\n  this.history.onReady(cb, errorCb);\n};\n\nVueRouter.prototype.onError = function onError (errorCb) {\n  this.history.onError(errorCb);\n};\n\nVueRouter.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n  // $flow-disable-line\n  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve, reject) {\n      this$1.history.push(location, resolve, reject);\n    })\n  } else {\n    this.history.push(location, onComplete, onAbort);\n  }\n};\n\nVueRouter.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n  // $flow-disable-line\n  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve, reject) {\n      this$1.history.replace(location, resolve, reject);\n    })\n  } else {\n    this.history.replace(location, onComplete, onAbort);\n  }\n};\n\nVueRouter.prototype.go = function go (n) {\n  this.history.go(n);\n};\n\nVueRouter.prototype.back = function back () {\n  this.go(-1);\n};\n\nVueRouter.prototype.forward = function forward () {\n  this.go(1);\n};\n\nVueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {\n  var route = to\n    ? to.matched\n      ? to\n      : this.resolve(to).route\n    : this.currentRoute;\n  if (!route) {\n    return []\n  }\n  return [].concat.apply(\n    [],\n    route.matched.map(function (m) {\n      return Object.keys(m.components).map(function (key) {\n        return m.components[key]\n      })\n    })\n  )\n};\n\nVueRouter.prototype.resolve = function resolve (\n  to,\n  current,\n  append\n) {\n  current = current || this.history.current;\n  var location = normalizeLocation(to, current, append, this);\n  var route = this.match(location, current);\n  var fullPath = route.redirectedFrom || route.fullPath;\n  var base = this.history.base;\n  var href = createHref(base, fullPath, this.mode);\n  return {\n    location: location,\n    route: route,\n    href: href,\n    // for backwards compat\n    normalizedTo: location,\n    resolved: route\n  }\n};\n\nVueRouter.prototype.getRoutes = function getRoutes () {\n  return this.matcher.getRoutes()\n};\n\nVueRouter.prototype.addRoute = function addRoute (parentOrRoute, route) {\n  this.matcher.addRoute(parentOrRoute, route);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nVueRouter.prototype.addRoutes = function addRoutes (routes) {\n  if (true) {\n    warn(false, 'router.addRoutes() is deprecated and has been removed in Vue Router 4. Use router.addRoute() instead.');\n  }\n  this.matcher.addRoutes(routes);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nObject.defineProperties( VueRouter.prototype, prototypeAccessors );\n\nfunction registerHook (list, fn) {\n  list.push(fn);\n  return function () {\n    var i = list.indexOf(fn);\n    if (i > -1) { list.splice(i, 1); }\n  }\n}\n\nfunction createHref (base, fullPath, mode) {\n  var path = mode === 'hash' ? '#' + fullPath : fullPath;\n  return base ? cleanPath(base + '/' + path) : path\n}\n\nVueRouter.install = install;\nVueRouter.version = '3.5.4';\nVueRouter.isNavigationFailure = isNavigationFailure;\nVueRouter.NavigationFailureType = NavigationFailureType;\nVueRouter.START_LOCATION = START;\n\nif (inBrowser && window.Vue) {\n  window.Vue.use(VueRouter);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VueRouter);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js\n");

/***/ }),

/***/ "./node_modules/vue/dist/vue.esm.js":
/*!******************************************!*\
  !*** ./node_modules/vue/dist/vue.esm.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EffectScope\": () => (/* binding */ EffectScope),\n/* harmony export */   \"computed\": () => (/* binding */ computed),\n/* harmony export */   \"customRef\": () => (/* binding */ customRef),\n/* harmony export */   \"default\": () => (/* binding */ Vue),\n/* harmony export */   \"defineAsyncComponent\": () => (/* binding */ defineAsyncComponent),\n/* harmony export */   \"defineComponent\": () => (/* binding */ defineComponent),\n/* harmony export */   \"del\": () => (/* binding */ del),\n/* harmony export */   \"effectScope\": () => (/* binding */ effectScope),\n/* harmony export */   \"getCurrentInstance\": () => (/* binding */ getCurrentInstance),\n/* harmony export */   \"getCurrentScope\": () => (/* binding */ getCurrentScope),\n/* harmony export */   \"h\": () => (/* binding */ h),\n/* harmony export */   \"inject\": () => (/* binding */ inject),\n/* harmony export */   \"isProxy\": () => (/* binding */ isProxy),\n/* harmony export */   \"isReactive\": () => (/* binding */ isReactive),\n/* harmony export */   \"isReadonly\": () => (/* binding */ isReadonly),\n/* harmony export */   \"isRef\": () => (/* binding */ isRef),\n/* harmony export */   \"isShallow\": () => (/* binding */ isShallow),\n/* harmony export */   \"markRaw\": () => (/* binding */ markRaw),\n/* harmony export */   \"mergeDefaults\": () => (/* binding */ mergeDefaults),\n/* harmony export */   \"nextTick\": () => (/* binding */ nextTick),\n/* harmony export */   \"onActivated\": () => (/* binding */ onActivated),\n/* harmony export */   \"onBeforeMount\": () => (/* binding */ onBeforeMount),\n/* harmony export */   \"onBeforeUnmount\": () => (/* binding */ onBeforeUnmount),\n/* harmony export */   \"onBeforeUpdate\": () => (/* binding */ onBeforeUpdate),\n/* harmony export */   \"onDeactivated\": () => (/* binding */ onDeactivated),\n/* harmony export */   \"onErrorCaptured\": () => (/* binding */ onErrorCaptured),\n/* harmony export */   \"onMounted\": () => (/* binding */ onMounted),\n/* harmony export */   \"onRenderTracked\": () => (/* binding */ onRenderTracked),\n/* harmony export */   \"onRenderTriggered\": () => (/* binding */ onRenderTriggered),\n/* harmony export */   \"onScopeDispose\": () => (/* binding */ onScopeDispose),\n/* harmony export */   \"onServerPrefetch\": () => (/* binding */ onServerPrefetch),\n/* harmony export */   \"onUnmounted\": () => (/* binding */ onUnmounted),\n/* harmony export */   \"onUpdated\": () => (/* binding */ onUpdated),\n/* harmony export */   \"provide\": () => (/* binding */ provide),\n/* harmony export */   \"proxyRefs\": () => (/* binding */ proxyRefs),\n/* harmony export */   \"reactive\": () => (/* binding */ reactive),\n/* harmony export */   \"readonly\": () => (/* binding */ readonly),\n/* harmony export */   \"ref\": () => (/* binding */ ref$1),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"shallowReactive\": () => (/* binding */ shallowReactive),\n/* harmony export */   \"shallowReadonly\": () => (/* binding */ shallowReadonly),\n/* harmony export */   \"shallowRef\": () => (/* binding */ shallowRef),\n/* harmony export */   \"toRaw\": () => (/* binding */ toRaw),\n/* harmony export */   \"toRef\": () => (/* binding */ toRef),\n/* harmony export */   \"toRefs\": () => (/* binding */ toRefs),\n/* harmony export */   \"triggerRef\": () => (/* binding */ triggerRef),\n/* harmony export */   \"unref\": () => (/* binding */ unref),\n/* harmony export */   \"useAttrs\": () => (/* binding */ useAttrs),\n/* harmony export */   \"useCssModule\": () => (/* binding */ useCssModule),\n/* harmony export */   \"useCssVars\": () => (/* binding */ useCssVars),\n/* harmony export */   \"useListeners\": () => (/* binding */ useListeners),\n/* harmony export */   \"useSlots\": () => (/* binding */ useSlots),\n/* harmony export */   \"version\": () => (/* binding */ version),\n/* harmony export */   \"watch\": () => (/* binding */ watch),\n/* harmony export */   \"watchEffect\": () => (/* binding */ watchEffect),\n/* harmony export */   \"watchPostEffect\": () => (/* binding */ watchPostEffect),\n/* harmony export */   \"watchSyncEffect\": () => (/* binding */ watchSyncEffect)\n/* harmony export */ });\n/*!\n * Vue.js v2.7.8\n * (c) 2014-2022 Evan You\n * Released under the MIT License.\n */\nvar emptyObject = Object.freeze({});\r\nvar isArray = Array.isArray;\r\n// These helpers produce better VM code in JS engines due to their\r\n// explicitness and function inlining.\r\nfunction isUndef(v) {\r\n    return v === undefined || v === null;\r\n}\r\nfunction isDef(v) {\r\n    return v !== undefined && v !== null;\r\n}\r\nfunction isTrue(v) {\r\n    return v === true;\r\n}\r\nfunction isFalse(v) {\r\n    return v === false;\r\n}\r\n/**\r\n * Check if value is primitive.\r\n */\r\nfunction isPrimitive(value) {\r\n    return (typeof value === 'string' ||\r\n        typeof value === 'number' ||\r\n        // $flow-disable-line\r\n        typeof value === 'symbol' ||\r\n        typeof value === 'boolean');\r\n}\r\nfunction isFunction(value) {\r\n    return typeof value === 'function';\r\n}\r\n/**\r\n * Quick object check - this is primarily used to tell\r\n * objects from primitive values when we know the value\r\n * is a JSON-compliant type.\r\n */\r\nfunction isObject(obj) {\r\n    return obj !== null && typeof obj === 'object';\r\n}\r\n/**\r\n * Get the raw type string of a value, e.g., [object Object].\r\n */\r\nvar _toString = Object.prototype.toString;\r\nfunction toRawType(value) {\r\n    return _toString.call(value).slice(8, -1);\r\n}\r\n/**\r\n * Strict object type check. Only returns true\r\n * for plain JavaScript objects.\r\n */\r\nfunction isPlainObject(obj) {\r\n    return _toString.call(obj) === '[object Object]';\r\n}\r\nfunction isRegExp(v) {\r\n    return _toString.call(v) === '[object RegExp]';\r\n}\r\n/**\r\n * Check if val is a valid array index.\r\n */\r\nfunction isValidArrayIndex(val) {\r\n    var n = parseFloat(String(val));\r\n    return n >= 0 && Math.floor(n) === n && isFinite(val);\r\n}\r\nfunction isPromise(val) {\r\n    return (isDef(val) &&\r\n        typeof val.then === 'function' &&\r\n        typeof val.catch === 'function');\r\n}\r\n/**\r\n * Convert a value to a string that is actually rendered.\r\n */\r\nfunction toString(val) {\r\n    return val == null\r\n        ? ''\r\n        : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\r\n            ? JSON.stringify(val, null, 2)\r\n            : String(val);\r\n}\r\n/**\r\n * Convert an input value to a number for persistence.\r\n * If the conversion fails, return original string.\r\n */\r\nfunction toNumber(val) {\r\n    var n = parseFloat(val);\r\n    return isNaN(n) ? val : n;\r\n}\r\n/**\r\n * Make a map and return a function for checking if a key\r\n * is in that map.\r\n */\r\nfunction makeMap(str, expectsLowerCase) {\r\n    var map = Object.create(null);\r\n    var list = str.split(',');\r\n    for (var i = 0; i < list.length; i++) {\r\n        map[list[i]] = true;\r\n    }\r\n    return expectsLowerCase ? function (val) { return map[val.toLowerCase()]; } : function (val) { return map[val]; };\r\n}\r\n/**\r\n * Check if a tag is a built-in tag.\r\n */\r\nvar isBuiltInTag = makeMap('slot,component', true);\r\n/**\r\n * Check if an attribute is a reserved attribute.\r\n */\r\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\r\n/**\r\n * Remove an item from an array.\r\n */\r\nfunction remove$2(arr, item) {\r\n    if (arr.length) {\r\n        var index = arr.indexOf(item);\r\n        if (index > -1) {\r\n            return arr.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Check whether an object has the property.\r\n */\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\nfunction hasOwn(obj, key) {\r\n    return hasOwnProperty.call(obj, key);\r\n}\r\n/**\r\n * Create a cached version of a pure function.\r\n */\r\nfunction cached(fn) {\r\n    var cache = Object.create(null);\r\n    return function cachedFn(str) {\r\n        var hit = cache[str];\r\n        return hit || (cache[str] = fn(str));\r\n    };\r\n}\r\n/**\r\n * Camelize a hyphen-delimited string.\r\n */\r\nvar camelizeRE = /-(\\w)/g;\r\nvar camelize = cached(function (str) {\r\n    return str.replace(camelizeRE, function (_, c) { return (c ? c.toUpperCase() : ''); });\r\n});\r\n/**\r\n * Capitalize a string.\r\n */\r\nvar capitalize = cached(function (str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n});\r\n/**\r\n * Hyphenate a camelCase string.\r\n */\r\nvar hyphenateRE = /\\B([A-Z])/g;\r\nvar hyphenate = cached(function (str) {\r\n    return str.replace(hyphenateRE, '-$1').toLowerCase();\r\n});\r\n/**\r\n * Simple bind polyfill for environments that do not support it,\r\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\r\n * since native bind is now performant enough in most browsers.\r\n * But removing it would mean breaking code that was able to run in\r\n * PhantomJS 1.x, so this must be kept for backward compatibility.\r\n */\r\n/* istanbul ignore next */\r\nfunction polyfillBind(fn, ctx) {\r\n    function boundFn(a) {\r\n        var l = arguments.length;\r\n        return l\r\n            ? l > 1\r\n                ? fn.apply(ctx, arguments)\r\n                : fn.call(ctx, a)\r\n            : fn.call(ctx);\r\n    }\r\n    boundFn._length = fn.length;\r\n    return boundFn;\r\n}\r\nfunction nativeBind(fn, ctx) {\r\n    return fn.bind(ctx);\r\n}\r\n// @ts-expect-error bind cannot be `undefined`\r\nvar bind$1 = Function.prototype.bind ? nativeBind : polyfillBind;\r\n/**\r\n * Convert an Array-like object to a real Array.\r\n */\r\nfunction toArray(list, start) {\r\n    start = start || 0;\r\n    var i = list.length - start;\r\n    var ret = new Array(i);\r\n    while (i--) {\r\n        ret[i] = list[i + start];\r\n    }\r\n    return ret;\r\n}\r\n/**\r\n * Mix properties into target object.\r\n */\r\nfunction extend(to, _from) {\r\n    for (var key in _from) {\r\n        to[key] = _from[key];\r\n    }\r\n    return to;\r\n}\r\n/**\r\n * Merge an Array of Objects into a single Object.\r\n */\r\nfunction toObject(arr) {\r\n    var res = {};\r\n    for (var i = 0; i < arr.length; i++) {\r\n        if (arr[i]) {\r\n            extend(res, arr[i]);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/* eslint-disable no-unused-vars */\r\n/**\r\n * Perform no operation.\r\n * Stubbing args to make Flow happy without leaving useless transpiled code\r\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\r\n */\r\nfunction noop(a, b, c) { }\r\n/**\r\n * Always return false.\r\n */\r\nvar no = function (a, b, c) { return false; };\r\n/* eslint-enable no-unused-vars */\r\n/**\r\n * Return the same value.\r\n */\r\nvar identity = function (_) { return _; };\r\n/**\r\n * Generate a string containing static keys from compiler modules.\r\n */\r\nfunction genStaticKeys$1(modules) {\r\n    return modules\r\n        .reduce(function (keys, m) {\r\n        return keys.concat(m.staticKeys || []);\r\n    }, [])\r\n        .join(',');\r\n}\r\n/**\r\n * Check if two values are loosely equal - that is,\r\n * if they are plain objects, do they have the same shape?\r\n */\r\nfunction looseEqual(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    var isObjectA = isObject(a);\r\n    var isObjectB = isObject(b);\r\n    if (isObjectA && isObjectB) {\r\n        try {\r\n            var isArrayA = Array.isArray(a);\r\n            var isArrayB = Array.isArray(b);\r\n            if (isArrayA && isArrayB) {\r\n                return (a.length === b.length &&\r\n                    a.every(function (e, i) {\r\n                        return looseEqual(e, b[i]);\r\n                    }));\r\n            }\r\n            else if (a instanceof Date && b instanceof Date) {\r\n                return a.getTime() === b.getTime();\r\n            }\r\n            else if (!isArrayA && !isArrayB) {\r\n                var keysA = Object.keys(a);\r\n                var keysB = Object.keys(b);\r\n                return (keysA.length === keysB.length &&\r\n                    keysA.every(function (key) {\r\n                        return looseEqual(a[key], b[key]);\r\n                    }));\r\n            }\r\n            else {\r\n                /* istanbul ignore next */\r\n                return false;\r\n            }\r\n        }\r\n        catch (e) {\r\n            /* istanbul ignore next */\r\n            return false;\r\n        }\r\n    }\r\n    else if (!isObjectA && !isObjectB) {\r\n        return String(a) === String(b);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Return the first index at which a loosely equal value can be\r\n * found in the array (if value is a plain object, the array must\r\n * contain an object of the same shape), or -1 if it is not present.\r\n */\r\nfunction looseIndexOf(arr, val) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n        if (looseEqual(arr[i], val))\r\n            return i;\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Ensure a function is called only once.\r\n */\r\nfunction once(fn) {\r\n    var called = false;\r\n    return function () {\r\n        if (!called) {\r\n            called = true;\r\n            fn.apply(this, arguments);\r\n        }\r\n    };\r\n}\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#polyfill\r\nfunction hasChanged(x, y) {\r\n    if (x === y) {\r\n        return x === 0 && 1 / x !== 1 / y;\r\n    }\r\n    else {\r\n        return x === x || y === y;\r\n    }\r\n}\n\nvar SSR_ATTR = 'data-server-rendered';\r\nvar ASSET_TYPES = ['component', 'directive', 'filter'];\r\nvar LIFECYCLE_HOOKS = [\r\n    'beforeCreate',\r\n    'created',\r\n    'beforeMount',\r\n    'mounted',\r\n    'beforeUpdate',\r\n    'updated',\r\n    'beforeDestroy',\r\n    'destroyed',\r\n    'activated',\r\n    'deactivated',\r\n    'errorCaptured',\r\n    'serverPrefetch',\r\n    'renderTracked',\r\n    'renderTriggered'\r\n];\n\nvar config = {\r\n    /**\r\n     * Option merge strategies (used in core/util/options)\r\n     */\r\n    // $flow-disable-line\r\n    optionMergeStrategies: Object.create(null),\r\n    /**\r\n     * Whether to suppress warnings.\r\n     */\r\n    silent: false,\r\n    /**\r\n     * Show production mode tip message on boot?\r\n     */\r\n    productionTip: \"development\" !== 'production',\r\n    /**\r\n     * Whether to enable devtools\r\n     */\r\n    devtools: \"development\" !== 'production',\r\n    /**\r\n     * Whether to record perf\r\n     */\r\n    performance: false,\r\n    /**\r\n     * Error handler for watcher errors\r\n     */\r\n    errorHandler: null,\r\n    /**\r\n     * Warn handler for watcher warns\r\n     */\r\n    warnHandler: null,\r\n    /**\r\n     * Ignore certain custom elements\r\n     */\r\n    ignoredElements: [],\r\n    /**\r\n     * Custom user key aliases for v-on\r\n     */\r\n    // $flow-disable-line\r\n    keyCodes: Object.create(null),\r\n    /**\r\n     * Check if a tag is reserved so that it cannot be registered as a\r\n     * component. This is platform-dependent and may be overwritten.\r\n     */\r\n    isReservedTag: no,\r\n    /**\r\n     * Check if an attribute is reserved so that it cannot be used as a component\r\n     * prop. This is platform-dependent and may be overwritten.\r\n     */\r\n    isReservedAttr: no,\r\n    /**\r\n     * Check if a tag is an unknown element.\r\n     * Platform-dependent.\r\n     */\r\n    isUnknownElement: no,\r\n    /**\r\n     * Get the namespace of an element\r\n     */\r\n    getTagNamespace: noop,\r\n    /**\r\n     * Parse the real tag name for the specific platform.\r\n     */\r\n    parsePlatformTagName: identity,\r\n    /**\r\n     * Check if an attribute must be bound using property, e.g. value\r\n     * Platform-dependent.\r\n     */\r\n    mustUseProp: no,\r\n    /**\r\n     * Perform updates asynchronously. Intended to be used by Vue Test Utils\r\n     * This will significantly reduce performance if set to false.\r\n     */\r\n    async: true,\r\n    /**\r\n     * Exposed for legacy reasons\r\n     */\r\n    _lifecycleHooks: LIFECYCLE_HOOKS\r\n};\n\n/**\r\n * unicode letters used for parsing html tags, component names and property paths.\r\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\r\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\r\n */\r\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\r\n/**\r\n * Check if a string starts with $ or _\r\n */\r\nfunction isReserved(str) {\r\n    var c = (str + '').charCodeAt(0);\r\n    return c === 0x24 || c === 0x5f;\r\n}\r\n/**\r\n * Define a property.\r\n */\r\nfunction def(obj, key, val, enumerable) {\r\n    Object.defineProperty(obj, key, {\r\n        value: val,\r\n        enumerable: !!enumerable,\r\n        writable: true,\r\n        configurable: true\r\n    });\r\n}\r\n/**\r\n * Parse simple path.\r\n */\r\nvar bailRE = new RegExp(\"[^\".concat(unicodeRegExp.source, \".$_\\\\d]\"));\r\nfunction parsePath(path) {\r\n    if (bailRE.test(path)) {\r\n        return;\r\n    }\r\n    var segments = path.split('.');\r\n    return function (obj) {\r\n        for (var i = 0; i < segments.length; i++) {\r\n            if (!obj)\r\n                return;\r\n            obj = obj[segments[i]];\r\n        }\r\n        return obj;\r\n    };\r\n}\n\n// can we use __proto__?\r\nvar hasProto = '__proto__' in {};\r\n// Browser environment sniffing\r\nvar inBrowser = typeof window !== 'undefined';\r\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\r\nvar isIE = UA && /msie|trident/.test(UA);\r\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\r\nvar isEdge = UA && UA.indexOf('edge/') > 0;\r\nUA && UA.indexOf('android') > 0;\r\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\r\nUA && /chrome\\/\\d+/.test(UA) && !isEdge;\r\nUA && /phantomjs/.test(UA);\r\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\r\n// Firefox has a \"watch\" function on Object.prototype...\r\n// @ts-expect-error firebox support\r\nvar nativeWatch = {}.watch;\r\nvar supportsPassive = false;\r\nif (inBrowser) {\r\n    try {\r\n        var opts = {};\r\n        Object.defineProperty(opts, 'passive', {\r\n            get: function () {\r\n                /* istanbul ignore next */\r\n                supportsPassive = true;\r\n            }\r\n        }); // https://github.com/facebook/flow/issues/285\r\n        window.addEventListener('test-passive', null, opts);\r\n    }\r\n    catch (e) { }\r\n}\r\n// this needs to be lazy-evaled because vue may be required before\r\n// vue-server-renderer can set VUE_ENV\r\nvar _isServer;\r\nvar isServerRendering = function () {\r\n    if (_isServer === undefined) {\r\n        /* istanbul ignore if */\r\n        if (!inBrowser && typeof __webpack_require__.g !== 'undefined') {\r\n            // detect presence of vue-server-renderer and avoid\r\n            // Webpack shimming the process\r\n            _isServer =\r\n                __webpack_require__.g['process'] && __webpack_require__.g['process'].env.VUE_ENV === 'server';\r\n        }\r\n        else {\r\n            _isServer = false;\r\n        }\r\n    }\r\n    return _isServer;\r\n};\r\n// detect devtools\r\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\r\n/* istanbul ignore next */\r\nfunction isNative(Ctor) {\r\n    return typeof Ctor === 'function' && /native code/.test(Ctor.toString());\r\n}\r\nvar hasSymbol = typeof Symbol !== 'undefined' &&\r\n    isNative(Symbol) &&\r\n    typeof Reflect !== 'undefined' &&\r\n    isNative(Reflect.ownKeys);\r\nvar _Set; // $flow-disable-line\r\n/* istanbul ignore if */ if (typeof Set !== 'undefined' && isNative(Set)) {\r\n    // use native Set when available.\r\n    _Set = Set;\r\n}\r\nelse {\r\n    // a non-standard Set polyfill that only works with primitive keys.\r\n    _Set = /** @class */ (function () {\r\n        function Set() {\r\n            this.set = Object.create(null);\r\n        }\r\n        Set.prototype.has = function (key) {\r\n            return this.set[key] === true;\r\n        };\r\n        Set.prototype.add = function (key) {\r\n            this.set[key] = true;\r\n        };\r\n        Set.prototype.clear = function () {\r\n            this.set = Object.create(null);\r\n        };\r\n        return Set;\r\n    }());\r\n}\n\nvar currentInstance = null;\r\n/**\r\n * This is exposed for compatibility with v3 (e.g. some functions in VueUse\r\n * relies on it). Do not use this internally, just use `currentInstance`.\r\n *\r\n * @internal this function needs manual type declaration because it relies\r\n * on previously manually authored types from Vue 2\r\n */\r\nfunction getCurrentInstance() {\r\n    return currentInstance && { proxy: currentInstance };\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction setCurrentInstance(vm) {\r\n    if (vm === void 0) { vm = null; }\r\n    if (!vm)\r\n        currentInstance && currentInstance._scope.off();\r\n    currentInstance = vm;\r\n    vm && vm._scope.on();\r\n}\n\n/**\r\n * @internal\r\n */\r\nvar VNode = /** @class */ (function () {\r\n    function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {\r\n        this.tag = tag;\r\n        this.data = data;\r\n        this.children = children;\r\n        this.text = text;\r\n        this.elm = elm;\r\n        this.ns = undefined;\r\n        this.context = context;\r\n        this.fnContext = undefined;\r\n        this.fnOptions = undefined;\r\n        this.fnScopeId = undefined;\r\n        this.key = data && data.key;\r\n        this.componentOptions = componentOptions;\r\n        this.componentInstance = undefined;\r\n        this.parent = undefined;\r\n        this.raw = false;\r\n        this.isStatic = false;\r\n        this.isRootInsert = true;\r\n        this.isComment = false;\r\n        this.isCloned = false;\r\n        this.isOnce = false;\r\n        this.asyncFactory = asyncFactory;\r\n        this.asyncMeta = undefined;\r\n        this.isAsyncPlaceholder = false;\r\n    }\r\n    Object.defineProperty(VNode.prototype, \"child\", {\r\n        // DEPRECATED: alias for componentInstance for backwards compat.\r\n        /* istanbul ignore next */\r\n        get: function () {\r\n            return this.componentInstance;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return VNode;\r\n}());\r\nvar createEmptyVNode = function (text) {\r\n    if (text === void 0) { text = ''; }\r\n    var node = new VNode();\r\n    node.text = text;\r\n    node.isComment = true;\r\n    return node;\r\n};\r\nfunction createTextVNode(val) {\r\n    return new VNode(undefined, undefined, undefined, String(val));\r\n}\r\n// optimized shallow clone\r\n// used for static nodes and slot nodes because they may be reused across\r\n// multiple renders, cloning them avoids errors when DOM manipulations rely\r\n// on their elm reference.\r\nfunction cloneVNode(vnode) {\r\n    var cloned = new VNode(vnode.tag, vnode.data, \r\n    // #7975\r\n    // clone children array to avoid mutating original in case of cloning\r\n    // a child.\r\n    vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);\r\n    cloned.ns = vnode.ns;\r\n    cloned.isStatic = vnode.isStatic;\r\n    cloned.key = vnode.key;\r\n    cloned.isComment = vnode.isComment;\r\n    cloned.fnContext = vnode.fnContext;\r\n    cloned.fnOptions = vnode.fnOptions;\r\n    cloned.fnScopeId = vnode.fnScopeId;\r\n    cloned.asyncMeta = vnode.asyncMeta;\r\n    cloned.isCloned = true;\r\n    return cloned;\r\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\r\nvar initProxy;\r\nif (true) {\r\n    var allowedGlobals_1 = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' +\r\n        'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\r\n        'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,' +\r\n        'require' // for Webpack/Browserify\r\n    );\r\n    var warnNonPresent_1 = function (target, key) {\r\n        warn$2(\"Property or method \\\"\".concat(key, \"\\\" is not defined on the instance but \") +\r\n            'referenced during render. Make sure that this property is reactive, ' +\r\n            'either in the data option, or for class-based components, by ' +\r\n            'initializing the property. ' +\r\n            'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);\r\n    };\r\n    var warnReservedPrefix_1 = function (target, key) {\r\n        warn$2(\"Property \\\"\".concat(key, \"\\\" must be accessed with \\\"$data.\").concat(key, \"\\\" because \") +\r\n            'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\r\n            'prevent conflicts with Vue internals. ' +\r\n            'See: https://vuejs.org/v2/api/#data', target);\r\n    };\r\n    var hasProxy_1 = typeof Proxy !== 'undefined' && isNative(Proxy);\r\n    if (hasProxy_1) {\r\n        var isBuiltInModifier_1 = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\r\n        config.keyCodes = new Proxy(config.keyCodes, {\r\n            set: function (target, key, value) {\r\n                if (isBuiltInModifier_1(key)) {\r\n                    warn$2(\"Avoid overwriting built-in modifier in config.keyCodes: .\".concat(key));\r\n                    return false;\r\n                }\r\n                else {\r\n                    target[key] = value;\r\n                    return true;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    var hasHandler_1 = {\r\n        has: function (target, key) {\r\n            var has = key in target;\r\n            var isAllowed = allowedGlobals_1(key) ||\r\n                (typeof key === 'string' &&\r\n                    key.charAt(0) === '_' &&\r\n                    !(key in target.$data));\r\n            if (!has && !isAllowed) {\r\n                if (key in target.$data)\r\n                    warnReservedPrefix_1(target, key);\r\n                else\r\n                    warnNonPresent_1(target, key);\r\n            }\r\n            return has || !isAllowed;\r\n        }\r\n    };\r\n    var getHandler_1 = {\r\n        get: function (target, key) {\r\n            if (typeof key === 'string' && !(key in target)) {\r\n                if (key in target.$data)\r\n                    warnReservedPrefix_1(target, key);\r\n                else\r\n                    warnNonPresent_1(target, key);\r\n            }\r\n            return target[key];\r\n        }\r\n    };\r\n    initProxy = function initProxy(vm) {\r\n        if (hasProxy_1) {\r\n            // determine which proxy handler to use\r\n            var options = vm.$options;\r\n            var handlers = options.render && options.render._withStripped ? getHandler_1 : hasHandler_1;\r\n            vm._renderProxy = new Proxy(vm, handlers);\r\n        }\r\n        else {\r\n            vm._renderProxy = vm;\r\n        }\r\n    };\r\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\nvar uid$2 = 0;\r\n/**\r\n * A dep is an observable that can have multiple\r\n * directives subscribing to it.\r\n * @internal\r\n */\r\nvar Dep = /** @class */ (function () {\r\n    function Dep() {\r\n        this.id = uid$2++;\r\n        this.subs = [];\r\n    }\r\n    Dep.prototype.addSub = function (sub) {\r\n        this.subs.push(sub);\r\n    };\r\n    Dep.prototype.removeSub = function (sub) {\r\n        remove$2(this.subs, sub);\r\n    };\r\n    Dep.prototype.depend = function (info) {\r\n        if (Dep.target) {\r\n            Dep.target.addDep(this);\r\n            if ( true && info && Dep.target.onTrack) {\r\n                Dep.target.onTrack(__assign({ effect: Dep.target }, info));\r\n            }\r\n        }\r\n    };\r\n    Dep.prototype.notify = function (info) {\r\n        // stabilize the subscriber list first\r\n        var subs = this.subs.slice();\r\n        if ( true && !config.async) {\r\n            // subs aren't sorted in scheduler if not running async\r\n            // we need to sort them now to make sure they fire in correct\r\n            // order\r\n            subs.sort(function (a, b) { return a.id - b.id; });\r\n        }\r\n        for (var i = 0, l = subs.length; i < l; i++) {\r\n            if ( true && info) {\r\n                var sub = subs[i];\r\n                sub.onTrigger &&\r\n                    sub.onTrigger(__assign({ effect: subs[i] }, info));\r\n            }\r\n            subs[i].update();\r\n        }\r\n    };\r\n    return Dep;\r\n}());\r\n// The current target watcher being evaluated.\r\n// This is globally unique because only one watcher\r\n// can be evaluated at a time.\r\nDep.target = null;\r\nvar targetStack = [];\r\nfunction pushTarget(target) {\r\n    targetStack.push(target);\r\n    Dep.target = target;\r\n}\r\nfunction popTarget() {\r\n    targetStack.pop();\r\n    Dep.target = targetStack[targetStack.length - 1];\r\n}\n\n/*\r\n * not type checking this file because flow doesn't play well with\r\n * dynamically accessing methods on Array prototype\r\n */\r\nvar arrayProto = Array.prototype;\r\nvar arrayMethods = Object.create(arrayProto);\r\nvar methodsToPatch = [\r\n    'push',\r\n    'pop',\r\n    'shift',\r\n    'unshift',\r\n    'splice',\r\n    'sort',\r\n    'reverse'\r\n];\r\n/**\r\n * Intercept mutating methods and emit events\r\n */\r\nmethodsToPatch.forEach(function (method) {\r\n    // cache original method\r\n    var original = arrayProto[method];\r\n    def(arrayMethods, method, function mutator() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var result = original.apply(this, args);\r\n        var ob = this.__ob__;\r\n        var inserted;\r\n        switch (method) {\r\n            case 'push':\r\n            case 'unshift':\r\n                inserted = args;\r\n                break;\r\n            case 'splice':\r\n                inserted = args.slice(2);\r\n                break;\r\n        }\r\n        if (inserted)\r\n            ob.observeArray(inserted);\r\n        // notify change\r\n        if (true) {\r\n            ob.dep.notify({\r\n                type: \"array mutation\" /* TriggerOpTypes.ARRAY_MUTATION */,\r\n                target: this,\r\n                key: method\r\n            });\r\n        }\r\n        else {}\r\n        return result;\r\n    });\r\n});\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\r\nvar NO_INIITIAL_VALUE = {};\r\n/**\r\n * In some cases we may want to disable observation inside a component's\r\n * update computation.\r\n */\r\nvar shouldObserve = true;\r\nfunction toggleObserving(value) {\r\n    shouldObserve = value;\r\n}\r\n// ssr mock dep\r\nvar mockDep = {\r\n    notify: noop,\r\n    depend: noop,\r\n    addSub: noop,\r\n    removeSub: noop\r\n};\r\n/**\r\n * Observer class that is attached to each observed\r\n * object. Once attached, the observer converts the target\r\n * object's property keys into getter/setters that\r\n * collect dependencies and dispatch updates.\r\n */\r\nvar Observer = /** @class */ (function () {\r\n    function Observer(value, shallow, mock) {\r\n        if (shallow === void 0) { shallow = false; }\r\n        if (mock === void 0) { mock = false; }\r\n        this.value = value;\r\n        this.shallow = shallow;\r\n        this.mock = mock;\r\n        // this.value = value\r\n        this.dep = mock ? mockDep : new Dep();\r\n        this.vmCount = 0;\r\n        def(value, '__ob__', this);\r\n        if (isArray(value)) {\r\n            if (!mock) {\r\n                if (hasProto) {\r\n                    value.__proto__ = arrayMethods;\r\n                    /* eslint-enable no-proto */\r\n                }\r\n                else {\r\n                    for (var i = 0, l = arrayKeys.length; i < l; i++) {\r\n                        var key = arrayKeys[i];\r\n                        def(value, key, arrayMethods[key]);\r\n                    }\r\n                }\r\n            }\r\n            if (!shallow) {\r\n                this.observeArray(value);\r\n            }\r\n        }\r\n        else {\r\n            /**\r\n             * Walk through all properties and convert them into\r\n             * getter/setters. This method should only be called when\r\n             * value type is Object.\r\n             */\r\n            var keys = Object.keys(value);\r\n            for (var i = 0; i < keys.length; i++) {\r\n                var key = keys[i];\r\n                defineReactive(value, key, NO_INIITIAL_VALUE, undefined, shallow, mock);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Observe a list of Array items.\r\n     */\r\n    Observer.prototype.observeArray = function (value) {\r\n        for (var i = 0, l = value.length; i < l; i++) {\r\n            observe(value[i], false, this.mock);\r\n        }\r\n    };\r\n    return Observer;\r\n}());\r\n// helpers\r\n/**\r\n * Attempt to create an observer instance for a value,\r\n * returns the new observer if successfully observed,\r\n * or the existing observer if the value already has one.\r\n */\r\nfunction observe(value, shallow, ssrMockReactivity) {\r\n    if (!isObject(value) || isRef(value) || value instanceof VNode) {\r\n        return;\r\n    }\r\n    var ob;\r\n    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\r\n        ob = value.__ob__;\r\n    }\r\n    else if (shouldObserve &&\r\n        (ssrMockReactivity || !isServerRendering()) &&\r\n        (isArray(value) || isPlainObject(value)) &&\r\n        Object.isExtensible(value) &&\r\n        !value.__v_skip /* ReactiveFlags.SKIP */) {\r\n        ob = new Observer(value, shallow, ssrMockReactivity);\r\n    }\r\n    return ob;\r\n}\r\n/**\r\n * Define a reactive property on an Object.\r\n */\r\nfunction defineReactive(obj, key, val, customSetter, shallow, mock) {\r\n    var dep = new Dep();\r\n    var property = Object.getOwnPropertyDescriptor(obj, key);\r\n    if (property && property.configurable === false) {\r\n        return;\r\n    }\r\n    // cater for pre-defined getter/setters\r\n    var getter = property && property.get;\r\n    var setter = property && property.set;\r\n    if ((!getter || setter) &&\r\n        (val === NO_INIITIAL_VALUE || arguments.length === 2)) {\r\n        val = obj[key];\r\n    }\r\n    var childOb = !shallow && observe(val, false, mock);\r\n    Object.defineProperty(obj, key, {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get: function reactiveGetter() {\r\n            var value = getter ? getter.call(obj) : val;\r\n            if (Dep.target) {\r\n                if (true) {\r\n                    dep.depend({\r\n                        target: obj,\r\n                        type: \"get\" /* TrackOpTypes.GET */,\r\n                        key: key\r\n                    });\r\n                }\r\n                else {}\r\n                if (childOb) {\r\n                    childOb.dep.depend();\r\n                    if (isArray(value)) {\r\n                        dependArray(value);\r\n                    }\r\n                }\r\n            }\r\n            return isRef(value) && !shallow ? value.value : value;\r\n        },\r\n        set: function reactiveSetter(newVal) {\r\n            var value = getter ? getter.call(obj) : val;\r\n            if (!hasChanged(value, newVal)) {\r\n                return;\r\n            }\r\n            if ( true && customSetter) {\r\n                customSetter();\r\n            }\r\n            if (setter) {\r\n                setter.call(obj, newVal);\r\n            }\r\n            else if (getter) {\r\n                // #7981: for accessor properties without setter\r\n                return;\r\n            }\r\n            else if (!shallow && isRef(value) && !isRef(newVal)) {\r\n                value.value = newVal;\r\n                return;\r\n            }\r\n            else {\r\n                val = newVal;\r\n            }\r\n            childOb = !shallow && observe(newVal, false, mock);\r\n            if (true) {\r\n                dep.notify({\r\n                    type: \"set\" /* TriggerOpTypes.SET */,\r\n                    target: obj,\r\n                    key: key,\r\n                    newValue: newVal,\r\n                    oldValue: value\r\n                });\r\n            }\r\n            else {}\r\n        }\r\n    });\r\n    return dep;\r\n}\r\nfunction set(target, key, val) {\r\n    if ( true && (isUndef(target) || isPrimitive(target))) {\r\n        warn$2(\"Cannot set reactive property on undefined, null, or primitive value: \".concat(target));\r\n    }\r\n    if (isReadonly(target)) {\r\n         true && warn$2(\"Set operation on key \\\"\".concat(key, \"\\\" failed: target is readonly.\"));\r\n        return;\r\n    }\r\n    var ob = target.__ob__;\r\n    if (isArray(target) && isValidArrayIndex(key)) {\r\n        target.length = Math.max(target.length, key);\r\n        target.splice(key, 1, val);\r\n        // when mocking for SSR, array methods are not hijacked\r\n        if (ob && !ob.shallow && ob.mock) {\r\n            observe(val, false, true);\r\n        }\r\n        return val;\r\n    }\r\n    if (key in target && !(key in Object.prototype)) {\r\n        target[key] = val;\r\n        return val;\r\n    }\r\n    if (target._isVue || (ob && ob.vmCount)) {\r\n         true &&\r\n            warn$2('Avoid adding reactive properties to a Vue instance or its root $data ' +\r\n                'at runtime - declare it upfront in the data option.');\r\n        return val;\r\n    }\r\n    if (!ob) {\r\n        target[key] = val;\r\n        return val;\r\n    }\r\n    defineReactive(ob.value, key, val, undefined, ob.shallow, ob.mock);\r\n    if (true) {\r\n        ob.dep.notify({\r\n            type: \"add\" /* TriggerOpTypes.ADD */,\r\n            target: target,\r\n            key: key,\r\n            newValue: val,\r\n            oldValue: undefined\r\n        });\r\n    }\r\n    else {}\r\n    return val;\r\n}\r\nfunction del(target, key) {\r\n    if ( true && (isUndef(target) || isPrimitive(target))) {\r\n        warn$2(\"Cannot delete reactive property on undefined, null, or primitive value: \".concat(target));\r\n    }\r\n    if (isArray(target) && isValidArrayIndex(key)) {\r\n        target.splice(key, 1);\r\n        return;\r\n    }\r\n    var ob = target.__ob__;\r\n    if (target._isVue || (ob && ob.vmCount)) {\r\n         true &&\r\n            warn$2('Avoid deleting properties on a Vue instance or its root $data ' +\r\n                '- just set it to null.');\r\n        return;\r\n    }\r\n    if (isReadonly(target)) {\r\n         true &&\r\n            warn$2(\"Delete operation on key \\\"\".concat(key, \"\\\" failed: target is readonly.\"));\r\n        return;\r\n    }\r\n    if (!hasOwn(target, key)) {\r\n        return;\r\n    }\r\n    delete target[key];\r\n    if (!ob) {\r\n        return;\r\n    }\r\n    if (true) {\r\n        ob.dep.notify({\r\n            type: \"delete\" /* TriggerOpTypes.DELETE */,\r\n            target: target,\r\n            key: key\r\n        });\r\n    }\r\n    else {}\r\n}\r\n/**\r\n * Collect dependencies on array elements when the array is touched, since\r\n * we cannot intercept array element access like property getters.\r\n */\r\nfunction dependArray(value) {\r\n    for (var e = void 0, i = 0, l = value.length; i < l; i++) {\r\n        e = value[i];\r\n        if (e && e.__ob__) {\r\n            e.__ob__.dep.depend();\r\n        }\r\n        if (isArray(e)) {\r\n            dependArray(e);\r\n        }\r\n    }\r\n}\n\nfunction reactive(target) {\r\n    makeReactive(target, false);\r\n    return target;\r\n}\r\n/**\r\n * Return a shallowly-reactive copy of the original object, where only the root\r\n * level properties are reactive. It also does not auto-unwrap refs (even at the\r\n * root level).\r\n */\r\nfunction shallowReactive(target) {\r\n    makeReactive(target, true);\r\n    def(target, \"__v_isShallow\" /* ReactiveFlags.IS_SHALLOW */, true);\r\n    return target;\r\n}\r\nfunction makeReactive(target, shallow) {\r\n    // if trying to observe a readonly proxy, return the readonly version.\r\n    if (!isReadonly(target)) {\r\n        if (true) {\r\n            if (isArray(target)) {\r\n                warn$2(\"Avoid using Array as root value for \".concat(shallow ? \"shallowReactive()\" : \"reactive()\", \" as it cannot be tracked in watch() or watchEffect(). Use \").concat(shallow ? \"shallowRef()\" : \"ref()\", \" instead. This is a Vue-2-only limitation.\"));\r\n            }\r\n            var existingOb = target && target.__ob__;\r\n            if (existingOb && existingOb.shallow !== shallow) {\r\n                warn$2(\"Target is already a \".concat(existingOb.shallow ? \"\" : \"non-\", \"shallow reactive object, and cannot be converted to \").concat(shallow ? \"\" : \"non-\", \"shallow.\"));\r\n            }\r\n        }\r\n        var ob = observe(target, shallow, isServerRendering() /* ssr mock reactivity */);\r\n        if ( true && !ob) {\r\n            if (target == null || isPrimitive(target)) {\r\n                warn$2(\"value cannot be made reactive: \".concat(String(target)));\r\n            }\r\n            if (isCollectionType(target)) {\r\n                warn$2(\"Vue 2 does not support reactive collection types such as Map or Set.\");\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction isReactive(value) {\r\n    if (isReadonly(value)) {\r\n        return isReactive(value[\"__v_raw\" /* ReactiveFlags.RAW */]);\r\n    }\r\n    return !!(value && value.__ob__);\r\n}\r\nfunction isShallow(value) {\r\n    return !!(value && value.__v_isShallow);\r\n}\r\nfunction isReadonly(value) {\r\n    return !!(value && value.__v_isReadonly);\r\n}\r\nfunction isProxy(value) {\r\n    return isReactive(value) || isReadonly(value);\r\n}\r\nfunction toRaw(observed) {\r\n    var raw = observed && observed[\"__v_raw\" /* ReactiveFlags.RAW */];\r\n    return raw ? toRaw(raw) : observed;\r\n}\r\nfunction markRaw(value) {\r\n    def(value, \"__v_skip\" /* ReactiveFlags.SKIP */, true);\r\n    return value;\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction isCollectionType(value) {\r\n    var type = toRawType(value);\r\n    return (type === 'Map' || type === 'WeakMap' || type === 'Set' || type === 'WeakSet');\r\n}\n\n/**\r\n * @internal\r\n */\r\nvar RefFlag = \"__v_isRef\";\r\nfunction isRef(r) {\r\n    return !!(r && r.__v_isRef === true);\r\n}\r\nfunction ref$1(value) {\r\n    return createRef(value, false);\r\n}\r\nfunction shallowRef(value) {\r\n    return createRef(value, true);\r\n}\r\nfunction createRef(rawValue, shallow) {\r\n    if (isRef(rawValue)) {\r\n        return rawValue;\r\n    }\r\n    var ref = {};\r\n    def(ref, RefFlag, true);\r\n    def(ref, \"__v_isShallow\" /* ReactiveFlags.IS_SHALLOW */, shallow);\r\n    def(ref, 'dep', defineReactive(ref, 'value', rawValue, null, shallow, isServerRendering()));\r\n    return ref;\r\n}\r\nfunction triggerRef(ref) {\r\n    if ( true && !ref.dep) {\r\n        warn$2(\"received object is not a triggerable ref.\");\r\n    }\r\n    if (true) {\r\n        ref.dep &&\r\n            ref.dep.notify({\r\n                type: \"set\" /* TriggerOpTypes.SET */,\r\n                target: ref,\r\n                key: 'value'\r\n            });\r\n    }\r\n    else {}\r\n}\r\nfunction unref(ref) {\r\n    return isRef(ref) ? ref.value : ref;\r\n}\r\nfunction proxyRefs(objectWithRefs) {\r\n    if (isReactive(objectWithRefs)) {\r\n        return objectWithRefs;\r\n    }\r\n    var proxy = {};\r\n    var keys = Object.keys(objectWithRefs);\r\n    for (var i = 0; i < keys.length; i++) {\r\n        proxyWithRefUnwrap(proxy, objectWithRefs, keys[i]);\r\n    }\r\n    return proxy;\r\n}\r\nfunction proxyWithRefUnwrap(target, source, key) {\r\n    Object.defineProperty(target, key, {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get: function () {\r\n            var val = source[key];\r\n            if (isRef(val)) {\r\n                return val.value;\r\n            }\r\n            else {\r\n                var ob = val && val.__ob__;\r\n                if (ob)\r\n                    ob.dep.depend();\r\n                return val;\r\n            }\r\n        },\r\n        set: function (value) {\r\n            var oldValue = source[key];\r\n            if (isRef(oldValue) && !isRef(value)) {\r\n                oldValue.value = value;\r\n            }\r\n            else {\r\n                source[key] = value;\r\n            }\r\n        }\r\n    });\r\n}\r\nfunction customRef(factory) {\r\n    var dep = new Dep();\r\n    var _a = factory(function () {\r\n        if (true) {\r\n            dep.depend({\r\n                target: ref,\r\n                type: \"get\" /* TrackOpTypes.GET */,\r\n                key: 'value'\r\n            });\r\n        }\r\n        else {}\r\n    }, function () {\r\n        if (true) {\r\n            dep.notify({\r\n                target: ref,\r\n                type: \"set\" /* TriggerOpTypes.SET */,\r\n                key: 'value'\r\n            });\r\n        }\r\n        else {}\r\n    }), get = _a.get, set = _a.set;\r\n    var ref = {\r\n        get value() {\r\n            return get();\r\n        },\r\n        set value(newVal) {\r\n            set(newVal);\r\n        }\r\n    };\r\n    def(ref, RefFlag, true);\r\n    return ref;\r\n}\r\nfunction toRefs(object) {\r\n    if ( true && !isReactive(object)) {\r\n        warn$2(\"toRefs() expects a reactive object but received a plain one.\");\r\n    }\r\n    var ret = isArray(object) ? new Array(object.length) : {};\r\n    for (var key in object) {\r\n        ret[key] = toRef(object, key);\r\n    }\r\n    return ret;\r\n}\r\nfunction toRef(object, key, defaultValue) {\r\n    var val = object[key];\r\n    if (isRef(val)) {\r\n        return val;\r\n    }\r\n    var ref = {\r\n        get value() {\r\n            var val = object[key];\r\n            return val === undefined ? defaultValue : val;\r\n        },\r\n        set value(newVal) {\r\n            object[key] = newVal;\r\n        }\r\n    };\r\n    def(ref, RefFlag, true);\r\n    return ref;\r\n}\n\nvar rawToReadonlyFlag = \"__v_rawToReadonly\";\r\nvar rawToShallowReadonlyFlag = \"__v_rawToShallowReadonly\";\r\nfunction readonly(target) {\r\n    return createReadonly(target, false);\r\n}\r\nfunction createReadonly(target, shallow) {\r\n    if (!isPlainObject(target)) {\r\n        if (true) {\r\n            if (isArray(target)) {\r\n                warn$2(\"Vue 2 does not support readonly arrays.\");\r\n            }\r\n            else if (isCollectionType(target)) {\r\n                warn$2(\"Vue 2 does not support readonly collection types such as Map or Set.\");\r\n            }\r\n            else {\r\n                warn$2(\"value cannot be made readonly: \".concat(typeof target));\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    // already a readonly object\r\n    if (isReadonly(target)) {\r\n        return target;\r\n    }\r\n    // already has a readonly proxy\r\n    var existingFlag = shallow ? rawToShallowReadonlyFlag : rawToReadonlyFlag;\r\n    var existingProxy = target[existingFlag];\r\n    if (existingProxy) {\r\n        return existingProxy;\r\n    }\r\n    var proxy = Object.create(Object.getPrototypeOf(target));\r\n    def(target, existingFlag, proxy);\r\n    def(proxy, \"__v_isReadonly\" /* ReactiveFlags.IS_READONLY */, true);\r\n    def(proxy, \"__v_raw\" /* ReactiveFlags.RAW */, target);\r\n    if (isRef(target)) {\r\n        def(proxy, RefFlag, true);\r\n    }\r\n    if (shallow || isShallow(target)) {\r\n        def(proxy, \"__v_isShallow\" /* ReactiveFlags.IS_SHALLOW */, true);\r\n    }\r\n    var keys = Object.keys(target);\r\n    for (var i = 0; i < keys.length; i++) {\r\n        defineReadonlyProperty(proxy, target, keys[i], shallow);\r\n    }\r\n    return proxy;\r\n}\r\nfunction defineReadonlyProperty(proxy, target, key, shallow) {\r\n    Object.defineProperty(proxy, key, {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get: function () {\r\n            var val = target[key];\r\n            return shallow || !isPlainObject(val) ? val : readonly(val);\r\n        },\r\n        set: function () {\r\n             true &&\r\n                warn$2(\"Set operation on key \\\"\".concat(key, \"\\\" failed: target is readonly.\"));\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns a reactive-copy of the original object, where only the root level\r\n * properties are readonly, and does NOT unwrap refs nor recursively convert\r\n * returned properties.\r\n * This is used for creating the props proxy object for stateful components.\r\n */\r\nfunction shallowReadonly(target) {\r\n    return createReadonly(target, true);\r\n}\n\nfunction computed(getterOrOptions, debugOptions) {\r\n    var getter;\r\n    var setter;\r\n    var onlyGetter = isFunction(getterOrOptions);\r\n    if (onlyGetter) {\r\n        getter = getterOrOptions;\r\n        setter =  true\r\n            ? function () {\r\n                warn$2('Write operation failed: computed value is readonly');\r\n            }\r\n            : 0;\r\n    }\r\n    else {\r\n        getter = getterOrOptions.get;\r\n        setter = getterOrOptions.set;\r\n    }\r\n    var watcher = isServerRendering()\r\n        ? null\r\n        : new Watcher(currentInstance, getter, noop, { lazy: true });\r\n    if ( true && watcher && debugOptions) {\r\n        watcher.onTrack = debugOptions.onTrack;\r\n        watcher.onTrigger = debugOptions.onTrigger;\r\n    }\r\n    var ref = {\r\n        // some libs rely on the presence effect for checking computed refs\r\n        // from normal refs, but the implementation doesn't matter\r\n        effect: watcher,\r\n        get value() {\r\n            if (watcher) {\r\n                if (watcher.dirty) {\r\n                    watcher.evaluate();\r\n                }\r\n                if (Dep.target) {\r\n                    if ( true && Dep.target.onTrack) {\r\n                        Dep.target.onTrack({\r\n                            effect: Dep.target,\r\n                            target: ref,\r\n                            type: \"get\" /* TrackOpTypes.GET */,\r\n                            key: 'value'\r\n                        });\r\n                    }\r\n                    watcher.depend();\r\n                }\r\n                return watcher.value;\r\n            }\r\n            else {\r\n                return getter();\r\n            }\r\n        },\r\n        set value(newVal) {\r\n            setter(newVal);\r\n        }\r\n    };\r\n    def(ref, RefFlag, true);\r\n    def(ref, \"__v_isReadonly\" /* ReactiveFlags.IS_READONLY */, onlyGetter);\r\n    return ref;\r\n}\n\nvar mark;\r\nvar measure;\r\nif (true) {\r\n    var perf_1 = inBrowser && window.performance;\r\n    /* istanbul ignore if */\r\n    if (perf_1 &&\r\n        // @ts-ignore\r\n        perf_1.mark &&\r\n        // @ts-ignore\r\n        perf_1.measure &&\r\n        // @ts-ignore\r\n        perf_1.clearMarks &&\r\n        // @ts-ignore\r\n        perf_1.clearMeasures) {\r\n        mark = function (tag) { return perf_1.mark(tag); };\r\n        measure = function (name, startTag, endTag) {\r\n            perf_1.measure(name, startTag, endTag);\r\n            perf_1.clearMarks(startTag);\r\n            perf_1.clearMarks(endTag);\r\n            // perf.clearMeasures(name)\r\n        };\r\n    }\r\n}\n\nvar normalizeEvent = cached(function (name) {\r\n    var passive = name.charAt(0) === '&';\r\n    name = passive ? name.slice(1) : name;\r\n    var once = name.charAt(0) === '~'; // Prefixed last, checked first\r\n    name = once ? name.slice(1) : name;\r\n    var capture = name.charAt(0) === '!';\r\n    name = capture ? name.slice(1) : name;\r\n    return {\r\n        name: name,\r\n        once: once,\r\n        capture: capture,\r\n        passive: passive\r\n    };\r\n});\r\nfunction createFnInvoker(fns, vm) {\r\n    function invoker() {\r\n        var fns = invoker.fns;\r\n        if (isArray(fns)) {\r\n            var cloned = fns.slice();\r\n            for (var i = 0; i < cloned.length; i++) {\r\n                invokeWithErrorHandling(cloned[i], null, arguments, vm, \"v-on handler\");\r\n            }\r\n        }\r\n        else {\r\n            // return handler return value for single handlers\r\n            return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\");\r\n        }\r\n    }\r\n    invoker.fns = fns;\r\n    return invoker;\r\n}\r\nfunction updateListeners(on, oldOn, add, remove, createOnceHandler, vm) {\r\n    var name, cur, old, event;\r\n    for (name in on) {\r\n        cur = on[name];\r\n        old = oldOn[name];\r\n        event = normalizeEvent(name);\r\n        if (isUndef(cur)) {\r\n             true &&\r\n                warn$2(\"Invalid handler for event \\\"\".concat(event.name, \"\\\": got \") + String(cur), vm);\r\n        }\r\n        else if (isUndef(old)) {\r\n            if (isUndef(cur.fns)) {\r\n                cur = on[name] = createFnInvoker(cur, vm);\r\n            }\r\n            if (isTrue(event.once)) {\r\n                cur = on[name] = createOnceHandler(event.name, cur, event.capture);\r\n            }\r\n            add(event.name, cur, event.capture, event.passive, event.params);\r\n        }\r\n        else if (cur !== old) {\r\n            old.fns = cur;\r\n            on[name] = old;\r\n        }\r\n    }\r\n    for (name in oldOn) {\r\n        if (isUndef(on[name])) {\r\n            event = normalizeEvent(name);\r\n            remove(event.name, oldOn[name], event.capture);\r\n        }\r\n    }\r\n}\n\nfunction mergeVNodeHook(def, hookKey, hook) {\r\n    if (def instanceof VNode) {\r\n        def = def.data.hook || (def.data.hook = {});\r\n    }\r\n    var invoker;\r\n    var oldHook = def[hookKey];\r\n    function wrappedHook() {\r\n        hook.apply(this, arguments);\r\n        // important: remove merged hook to ensure it's called only once\r\n        // and prevent memory leak\r\n        remove$2(invoker.fns, wrappedHook);\r\n    }\r\n    if (isUndef(oldHook)) {\r\n        // no existing hook\r\n        invoker = createFnInvoker([wrappedHook]);\r\n    }\r\n    else {\r\n        /* istanbul ignore if */\r\n        if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\r\n            // already a merged invoker\r\n            invoker = oldHook;\r\n            invoker.fns.push(wrappedHook);\r\n        }\r\n        else {\r\n            // existing plain hook\r\n            invoker = createFnInvoker([oldHook, wrappedHook]);\r\n        }\r\n    }\r\n    invoker.merged = true;\r\n    def[hookKey] = invoker;\r\n}\n\nfunction extractPropsFromVNodeData(data, Ctor, tag) {\r\n    // we are only extracting raw values here.\r\n    // validation and default values are handled in the child\r\n    // component itself.\r\n    var propOptions = Ctor.options.props;\r\n    if (isUndef(propOptions)) {\r\n        return;\r\n    }\r\n    var res = {};\r\n    var attrs = data.attrs, props = data.props;\r\n    if (isDef(attrs) || isDef(props)) {\r\n        for (var key in propOptions) {\r\n            var altKey = hyphenate(key);\r\n            if (true) {\r\n                var keyInLowerCase = key.toLowerCase();\r\n                if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {\r\n                    tip(\"Prop \\\"\".concat(keyInLowerCase, \"\\\" is passed to component \") +\r\n                        \"\".concat(formatComponentName(\r\n                        // @ts-expect-error tag is string\r\n                        tag || Ctor), \", but the declared prop name is\") +\r\n                        \" \\\"\".concat(key, \"\\\". \") +\r\n                        \"Note that HTML attributes are case-insensitive and camelCased \" +\r\n                        \"props need to use their kebab-case equivalents when using in-DOM \" +\r\n                        \"templates. You should probably use \\\"\".concat(altKey, \"\\\" instead of \\\"\").concat(key, \"\\\".\"));\r\n                }\r\n            }\r\n            checkProp(res, props, key, altKey, true) ||\r\n                checkProp(res, attrs, key, altKey, false);\r\n        }\r\n    }\r\n    return res;\r\n}\r\nfunction checkProp(res, hash, key, altKey, preserve) {\r\n    if (isDef(hash)) {\r\n        if (hasOwn(hash, key)) {\r\n            res[key] = hash[key];\r\n            if (!preserve) {\r\n                delete hash[key];\r\n            }\r\n            return true;\r\n        }\r\n        else if (hasOwn(hash, altKey)) {\r\n            res[key] = hash[altKey];\r\n            if (!preserve) {\r\n                delete hash[altKey];\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n\n// The template compiler attempts to minimize the need for normalization by\r\n// statically analyzing the template at compile time.\r\n//\r\n// For plain HTML markup, normalization can be completely skipped because the\r\n// generated render function is guaranteed to return Array<VNode>. There are\r\n// two cases where extra normalization is needed:\r\n// 1. When the children contains components - because a functional component\r\n// may return an Array instead of a single root. In this case, just a simple\r\n// normalization is needed - if any child is an Array, we flatten the whole\r\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\r\n// because functional components already normalize their own children.\r\nfunction simpleNormalizeChildren(children) {\r\n    for (var i = 0; i < children.length; i++) {\r\n        if (isArray(children[i])) {\r\n            return Array.prototype.concat.apply([], children);\r\n        }\r\n    }\r\n    return children;\r\n}\r\n// 2. When the children contains constructs that always generated nested Arrays,\r\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\r\n// with hand-written render functions / JSX. In such cases a full normalization\r\n// is needed to cater to all possible types of children values.\r\nfunction normalizeChildren(children) {\r\n    return isPrimitive(children)\r\n        ? [createTextVNode(children)]\r\n        : isArray(children)\r\n            ? normalizeArrayChildren(children)\r\n            : undefined;\r\n}\r\nfunction isTextNode(node) {\r\n    return isDef(node) && isDef(node.text) && isFalse(node.isComment);\r\n}\r\nfunction normalizeArrayChildren(children, nestedIndex) {\r\n    var res = [];\r\n    var i, c, lastIndex, last;\r\n    for (i = 0; i < children.length; i++) {\r\n        c = children[i];\r\n        if (isUndef(c) || typeof c === 'boolean')\r\n            continue;\r\n        lastIndex = res.length - 1;\r\n        last = res[lastIndex];\r\n        //  nested\r\n        if (isArray(c)) {\r\n            if (c.length > 0) {\r\n                c = normalizeArrayChildren(c, \"\".concat(nestedIndex || '', \"_\").concat(i));\r\n                // merge adjacent text nodes\r\n                if (isTextNode(c[0]) && isTextNode(last)) {\r\n                    res[lastIndex] = createTextVNode(last.text + c[0].text);\r\n                    c.shift();\r\n                }\r\n                res.push.apply(res, c);\r\n            }\r\n        }\r\n        else if (isPrimitive(c)) {\r\n            if (isTextNode(last)) {\r\n                // merge adjacent text nodes\r\n                // this is necessary for SSR hydration because text nodes are\r\n                // essentially merged when rendered to HTML strings\r\n                res[lastIndex] = createTextVNode(last.text + c);\r\n            }\r\n            else if (c !== '') {\r\n                // convert primitive to vnode\r\n                res.push(createTextVNode(c));\r\n            }\r\n        }\r\n        else {\r\n            if (isTextNode(c) && isTextNode(last)) {\r\n                // merge adjacent text nodes\r\n                res[lastIndex] = createTextVNode(last.text + c.text);\r\n            }\r\n            else {\r\n                // default key for nested array children (likely generated by v-for)\r\n                if (isTrue(children._isVList) &&\r\n                    isDef(c.tag) &&\r\n                    isUndef(c.key) &&\r\n                    isDef(nestedIndex)) {\r\n                    c.key = \"__vlist\".concat(nestedIndex, \"_\").concat(i, \"__\");\r\n                }\r\n                res.push(c);\r\n            }\r\n        }\r\n    }\r\n    return res;\r\n}\n\nvar SIMPLE_NORMALIZE = 1;\r\nvar ALWAYS_NORMALIZE = 2;\r\n// wrapper function for providing a more flexible interface\r\n// without getting yelled at by flow\r\nfunction createElement$1(context, tag, data, children, normalizationType, alwaysNormalize) {\r\n    if (isArray(data) || isPrimitive(data)) {\r\n        normalizationType = children;\r\n        children = data;\r\n        data = undefined;\r\n    }\r\n    if (isTrue(alwaysNormalize)) {\r\n        normalizationType = ALWAYS_NORMALIZE;\r\n    }\r\n    return _createElement(context, tag, data, children, normalizationType);\r\n}\r\nfunction _createElement(context, tag, data, children, normalizationType) {\r\n    if (isDef(data) && isDef(data.__ob__)) {\r\n         true &&\r\n            warn$2(\"Avoid using observed data object as vnode data: \".concat(JSON.stringify(data), \"\\n\") + 'Always create fresh vnode data objects in each render!', context);\r\n        return createEmptyVNode();\r\n    }\r\n    // object syntax in v-bind\r\n    if (isDef(data) && isDef(data.is)) {\r\n        tag = data.is;\r\n    }\r\n    if (!tag) {\r\n        // in case of component :is set to falsy value\r\n        return createEmptyVNode();\r\n    }\r\n    // warn against non-primitive key\r\n    if ( true && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {\r\n        warn$2('Avoid using non-primitive value as key, ' +\r\n            'use string/number value instead.', context);\r\n    }\r\n    // support single function children as default scoped slot\r\n    if (isArray(children) && isFunction(children[0])) {\r\n        data = data || {};\r\n        data.scopedSlots = { default: children[0] };\r\n        children.length = 0;\r\n    }\r\n    if (normalizationType === ALWAYS_NORMALIZE) {\r\n        children = normalizeChildren(children);\r\n    }\r\n    else if (normalizationType === SIMPLE_NORMALIZE) {\r\n        children = simpleNormalizeChildren(children);\r\n    }\r\n    var vnode, ns;\r\n    if (typeof tag === 'string') {\r\n        var Ctor = void 0;\r\n        ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\r\n        if (config.isReservedTag(tag)) {\r\n            // platform built-in elements\r\n            if ( true &&\r\n                isDef(data) &&\r\n                isDef(data.nativeOn) &&\r\n                data.tag !== 'component') {\r\n                warn$2(\"The .native modifier for v-on is only valid on components but it was used on <\".concat(tag, \">.\"), context);\r\n            }\r\n            vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);\r\n        }\r\n        else if ((!data || !data.pre) &&\r\n            isDef((Ctor = resolveAsset(context.$options, 'components', tag)))) {\r\n            // component\r\n            vnode = createComponent(Ctor, data, context, children, tag);\r\n        }\r\n        else {\r\n            // unknown or unlisted namespaced elements\r\n            // check at runtime because it may get assigned a namespace when its\r\n            // parent normalizes children\r\n            vnode = new VNode(tag, data, children, undefined, undefined, context);\r\n        }\r\n    }\r\n    else {\r\n        // direct component options / constructor\r\n        vnode = createComponent(tag, data, context, children);\r\n    }\r\n    if (isArray(vnode)) {\r\n        return vnode;\r\n    }\r\n    else if (isDef(vnode)) {\r\n        if (isDef(ns))\r\n            applyNS(vnode, ns);\r\n        if (isDef(data))\r\n            registerDeepBindings(data);\r\n        return vnode;\r\n    }\r\n    else {\r\n        return createEmptyVNode();\r\n    }\r\n}\r\nfunction applyNS(vnode, ns, force) {\r\n    vnode.ns = ns;\r\n    if (vnode.tag === 'foreignObject') {\r\n        // use default namespace inside foreignObject\r\n        ns = undefined;\r\n        force = true;\r\n    }\r\n    if (isDef(vnode.children)) {\r\n        for (var i = 0, l = vnode.children.length; i < l; i++) {\r\n            var child = vnode.children[i];\r\n            if (isDef(child.tag) &&\r\n                (isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\r\n                applyNS(child, ns, force);\r\n            }\r\n        }\r\n    }\r\n}\r\n// ref #5318\r\n// necessary to ensure parent re-render when deep bindings like :style and\r\n// :class are used on slot nodes\r\nfunction registerDeepBindings(data) {\r\n    if (isObject(data.style)) {\r\n        traverse(data.style);\r\n    }\r\n    if (isObject(data.class)) {\r\n        traverse(data.class);\r\n    }\r\n}\n\n/**\r\n * Runtime helper for rendering v-for lists.\r\n */\r\nfunction renderList(val, render) {\r\n    var ret = null, i, l, keys, key;\r\n    if (isArray(val) || typeof val === 'string') {\r\n        ret = new Array(val.length);\r\n        for (i = 0, l = val.length; i < l; i++) {\r\n            ret[i] = render(val[i], i);\r\n        }\r\n    }\r\n    else if (typeof val === 'number') {\r\n        ret = new Array(val);\r\n        for (i = 0; i < val; i++) {\r\n            ret[i] = render(i + 1, i);\r\n        }\r\n    }\r\n    else if (isObject(val)) {\r\n        if (hasSymbol && val[Symbol.iterator]) {\r\n            ret = [];\r\n            var iterator = val[Symbol.iterator]();\r\n            var result = iterator.next();\r\n            while (!result.done) {\r\n                ret.push(render(result.value, ret.length));\r\n                result = iterator.next();\r\n            }\r\n        }\r\n        else {\r\n            keys = Object.keys(val);\r\n            ret = new Array(keys.length);\r\n            for (i = 0, l = keys.length; i < l; i++) {\r\n                key = keys[i];\r\n                ret[i] = render(val[key], key, i);\r\n            }\r\n        }\r\n    }\r\n    if (!isDef(ret)) {\r\n        ret = [];\r\n    }\r\n    ret._isVList = true;\r\n    return ret;\r\n}\n\n/**\r\n * Runtime helper for rendering <slot>\r\n */\r\nfunction renderSlot(name, fallbackRender, props, bindObject) {\r\n    var scopedSlotFn = this.$scopedSlots[name];\r\n    var nodes;\r\n    if (scopedSlotFn) {\r\n        // scoped slot\r\n        props = props || {};\r\n        if (bindObject) {\r\n            if ( true && !isObject(bindObject)) {\r\n                warn$2('slot v-bind without argument expects an Object', this);\r\n            }\r\n            props = extend(extend({}, bindObject), props);\r\n        }\r\n        nodes =\r\n            scopedSlotFn(props) ||\r\n                (isFunction(fallbackRender) ? fallbackRender() : fallbackRender);\r\n    }\r\n    else {\r\n        nodes =\r\n            this.$slots[name] ||\r\n                (isFunction(fallbackRender) ? fallbackRender() : fallbackRender);\r\n    }\r\n    var target = props && props.slot;\r\n    if (target) {\r\n        return this.$createElement('template', { slot: target }, nodes);\r\n    }\r\n    else {\r\n        return nodes;\r\n    }\r\n}\n\n/**\r\n * Runtime helper for resolving filters\r\n */\r\nfunction resolveFilter(id) {\r\n    return resolveAsset(this.$options, 'filters', id, true) || identity;\r\n}\n\nfunction isKeyNotMatch(expect, actual) {\r\n    if (isArray(expect)) {\r\n        return expect.indexOf(actual) === -1;\r\n    }\r\n    else {\r\n        return expect !== actual;\r\n    }\r\n}\r\n/**\r\n * Runtime helper for checking keyCodes from config.\r\n * exposed as Vue.prototype._k\r\n * passing in eventKeyName as last argument separately for backwards compat\r\n */\r\nfunction checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {\r\n    var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\r\n    if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\r\n        return isKeyNotMatch(builtInKeyName, eventKeyName);\r\n    }\r\n    else if (mappedKeyCode) {\r\n        return isKeyNotMatch(mappedKeyCode, eventKeyCode);\r\n    }\r\n    else if (eventKeyName) {\r\n        return hyphenate(eventKeyName) !== key;\r\n    }\r\n    return eventKeyCode === undefined;\r\n}\n\n/**\r\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\r\n */\r\nfunction bindObjectProps(data, tag, value, asProp, isSync) {\r\n    if (value) {\r\n        if (!isObject(value)) {\r\n             true &&\r\n                warn$2('v-bind without argument expects an Object or Array value', this);\r\n        }\r\n        else {\r\n            if (isArray(value)) {\r\n                value = toObject(value);\r\n            }\r\n            var hash = void 0;\r\n            var _loop_1 = function (key) {\r\n                if (key === 'class' || key === 'style' || isReservedAttribute(key)) {\r\n                    hash = data;\r\n                }\r\n                else {\r\n                    var type = data.attrs && data.attrs.type;\r\n                    hash =\r\n                        asProp || config.mustUseProp(tag, type, key)\r\n                            ? data.domProps || (data.domProps = {})\r\n                            : data.attrs || (data.attrs = {});\r\n                }\r\n                var camelizedKey = camelize(key);\r\n                var hyphenatedKey = hyphenate(key);\r\n                if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\r\n                    hash[key] = value[key];\r\n                    if (isSync) {\r\n                        var on = data.on || (data.on = {});\r\n                        on[\"update:\".concat(key)] = function ($event) {\r\n                            value[key] = $event;\r\n                        };\r\n                    }\r\n                }\r\n            };\r\n            for (var key in value) {\r\n                _loop_1(key);\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n}\n\n/**\r\n * Runtime helper for rendering static trees.\r\n */\r\nfunction renderStatic(index, isInFor) {\r\n    var cached = this._staticTrees || (this._staticTrees = []);\r\n    var tree = cached[index];\r\n    // if has already-rendered static tree and not inside v-for,\r\n    // we can reuse the same tree.\r\n    if (tree && !isInFor) {\r\n        return tree;\r\n    }\r\n    // otherwise, render a fresh tree.\r\n    tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, this._c, this // for render fns generated for functional component templates\r\n    );\r\n    markStatic$1(tree, \"__static__\".concat(index), false);\r\n    return tree;\r\n}\r\n/**\r\n * Runtime helper for v-once.\r\n * Effectively it means marking the node as static with a unique key.\r\n */\r\nfunction markOnce(tree, index, key) {\r\n    markStatic$1(tree, \"__once__\".concat(index).concat(key ? \"_\".concat(key) : \"\"), true);\r\n    return tree;\r\n}\r\nfunction markStatic$1(tree, key, isOnce) {\r\n    if (isArray(tree)) {\r\n        for (var i = 0; i < tree.length; i++) {\r\n            if (tree[i] && typeof tree[i] !== 'string') {\r\n                markStaticNode(tree[i], \"\".concat(key, \"_\").concat(i), isOnce);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        markStaticNode(tree, key, isOnce);\r\n    }\r\n}\r\nfunction markStaticNode(node, key, isOnce) {\r\n    node.isStatic = true;\r\n    node.key = key;\r\n    node.isOnce = isOnce;\r\n}\n\nfunction bindObjectListeners(data, value) {\r\n    if (value) {\r\n        if (!isPlainObject(value)) {\r\n             true && warn$2('v-on without argument expects an Object value', this);\r\n        }\r\n        else {\r\n            var on = (data.on = data.on ? extend({}, data.on) : {});\r\n            for (var key in value) {\r\n                var existing = on[key];\r\n                var ours = value[key];\r\n                on[key] = existing ? [].concat(existing, ours) : ours;\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n}\n\nfunction resolveScopedSlots(fns, res, \r\n// the following are added in 2.6\r\nhasDynamicKeys, contentHashKey) {\r\n    res = res || { $stable: !hasDynamicKeys };\r\n    for (var i = 0; i < fns.length; i++) {\r\n        var slot = fns[i];\r\n        if (isArray(slot)) {\r\n            resolveScopedSlots(slot, res, hasDynamicKeys);\r\n        }\r\n        else if (slot) {\r\n            // marker for reverse proxying v-slot without scope on this.$slots\r\n            // @ts-expect-error\r\n            if (slot.proxy) {\r\n                // @ts-expect-error\r\n                slot.fn.proxy = true;\r\n            }\r\n            res[slot.key] = slot.fn;\r\n        }\r\n    }\r\n    if (contentHashKey) {\r\n        res.$key = contentHashKey;\r\n    }\r\n    return res;\r\n}\n\n// helper to process dynamic keys for dynamic arguments in v-bind and v-on.\r\nfunction bindDynamicKeys(baseObj, values) {\r\n    for (var i = 0; i < values.length; i += 2) {\r\n        var key = values[i];\r\n        if (typeof key === 'string' && key) {\r\n            baseObj[values[i]] = values[i + 1];\r\n        }\r\n        else if ( true && key !== '' && key !== null) {\r\n            // null is a special value for explicitly removing a binding\r\n            warn$2(\"Invalid value for dynamic directive argument (expected string or null): \".concat(key), this);\r\n        }\r\n    }\r\n    return baseObj;\r\n}\r\n// helper to dynamically append modifier runtime markers to event names.\r\n// ensure only append when value is already string, otherwise it will be cast\r\n// to string and cause the type check to miss.\r\nfunction prependModifier(value, symbol) {\r\n    return typeof value === 'string' ? symbol + value : value;\r\n}\n\nfunction installRenderHelpers(target) {\r\n    target._o = markOnce;\r\n    target._n = toNumber;\r\n    target._s = toString;\r\n    target._l = renderList;\r\n    target._t = renderSlot;\r\n    target._q = looseEqual;\r\n    target._i = looseIndexOf;\r\n    target._m = renderStatic;\r\n    target._f = resolveFilter;\r\n    target._k = checkKeyCodes;\r\n    target._b = bindObjectProps;\r\n    target._v = createTextVNode;\r\n    target._e = createEmptyVNode;\r\n    target._u = resolveScopedSlots;\r\n    target._g = bindObjectListeners;\r\n    target._d = bindDynamicKeys;\r\n    target._p = prependModifier;\r\n}\n\n/**\r\n * Runtime helper for resolving raw children VNodes into a slot object.\r\n */\r\nfunction resolveSlots(children, context) {\r\n    if (!children || !children.length) {\r\n        return {};\r\n    }\r\n    var slots = {};\r\n    for (var i = 0, l = children.length; i < l; i++) {\r\n        var child = children[i];\r\n        var data = child.data;\r\n        // remove slot attribute if the node is resolved as a Vue slot node\r\n        if (data && data.attrs && data.attrs.slot) {\r\n            delete data.attrs.slot;\r\n        }\r\n        // named slots should only be respected if the vnode was rendered in the\r\n        // same context.\r\n        if ((child.context === context || child.fnContext === context) &&\r\n            data &&\r\n            data.slot != null) {\r\n            var name_1 = data.slot;\r\n            var slot = slots[name_1] || (slots[name_1] = []);\r\n            if (child.tag === 'template') {\r\n                slot.push.apply(slot, child.children || []);\r\n            }\r\n            else {\r\n                slot.push(child);\r\n            }\r\n        }\r\n        else {\r\n            (slots.default || (slots.default = [])).push(child);\r\n        }\r\n    }\r\n    // ignore slots that contains only whitespace\r\n    for (var name_2 in slots) {\r\n        if (slots[name_2].every(isWhitespace)) {\r\n            delete slots[name_2];\r\n        }\r\n    }\r\n    return slots;\r\n}\r\nfunction isWhitespace(node) {\r\n    return (node.isComment && !node.asyncFactory) || node.text === ' ';\r\n}\n\nfunction isAsyncPlaceholder(node) {\r\n    // @ts-expect-error not really boolean type\r\n    return node.isComment && node.asyncFactory;\r\n}\n\nfunction normalizeScopedSlots(ownerVm, scopedSlots, normalSlots, prevScopedSlots) {\r\n    var res;\r\n    var hasNormalSlots = Object.keys(normalSlots).length > 0;\r\n    var isStable = scopedSlots ? !!scopedSlots.$stable : !hasNormalSlots;\r\n    var key = scopedSlots && scopedSlots.$key;\r\n    if (!scopedSlots) {\r\n        res = {};\r\n    }\r\n    else if (scopedSlots._normalized) {\r\n        // fast path 1: child component re-render only, parent did not change\r\n        return scopedSlots._normalized;\r\n    }\r\n    else if (isStable &&\r\n        prevScopedSlots &&\r\n        prevScopedSlots !== emptyObject &&\r\n        key === prevScopedSlots.$key &&\r\n        !hasNormalSlots &&\r\n        !prevScopedSlots.$hasNormal) {\r\n        // fast path 2: stable scoped slots w/ no normal slots to proxy,\r\n        // only need to normalize once\r\n        return prevScopedSlots;\r\n    }\r\n    else {\r\n        res = {};\r\n        for (var key_1 in scopedSlots) {\r\n            if (scopedSlots[key_1] && key_1[0] !== '$') {\r\n                res[key_1] = normalizeScopedSlot(ownerVm, normalSlots, key_1, scopedSlots[key_1]);\r\n            }\r\n        }\r\n    }\r\n    // expose normal slots on scopedSlots\r\n    for (var key_2 in normalSlots) {\r\n        if (!(key_2 in res)) {\r\n            res[key_2] = proxyNormalSlot(normalSlots, key_2);\r\n        }\r\n    }\r\n    // avoriaz seems to mock a non-extensible $scopedSlots object\r\n    // and when that is passed down this would cause an error\r\n    if (scopedSlots && Object.isExtensible(scopedSlots)) {\r\n        scopedSlots._normalized = res;\r\n    }\r\n    def(res, '$stable', isStable);\r\n    def(res, '$key', key);\r\n    def(res, '$hasNormal', hasNormalSlots);\r\n    return res;\r\n}\r\nfunction normalizeScopedSlot(vm, normalSlots, key, fn) {\r\n    var normalized = function () {\r\n        var cur = currentInstance;\r\n        setCurrentInstance(vm);\r\n        var res = arguments.length ? fn.apply(null, arguments) : fn({});\r\n        res =\r\n            res && typeof res === 'object' && !isArray(res)\r\n                ? [res] // single vnode\r\n                : normalizeChildren(res);\r\n        var vnode = res && res[0];\r\n        setCurrentInstance(cur);\r\n        return res &&\r\n            (!vnode ||\r\n                (res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode))) // #9658, #10391\r\n            ? undefined\r\n            : res;\r\n    };\r\n    // this is a slot using the new v-slot syntax without scope. although it is\r\n    // compiled as a scoped slot, render fn users would expect it to be present\r\n    // on this.$slots because the usage is semantically a normal slot.\r\n    if (fn.proxy) {\r\n        Object.defineProperty(normalSlots, key, {\r\n            get: normalized,\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n    }\r\n    return normalized;\r\n}\r\nfunction proxyNormalSlot(slots, key) {\r\n    return function () { return slots[key]; };\r\n}\n\nfunction initSetup(vm) {\r\n    var options = vm.$options;\r\n    var setup = options.setup;\r\n    if (setup) {\r\n        var ctx = (vm._setupContext = createSetupContext(vm));\r\n        setCurrentInstance(vm);\r\n        pushTarget();\r\n        var setupResult = invokeWithErrorHandling(setup, null, [vm._props || shallowReactive({}), ctx], vm, \"setup\");\r\n        popTarget();\r\n        setCurrentInstance();\r\n        if (isFunction(setupResult)) {\r\n            // render function\r\n            // @ts-ignore\r\n            options.render = setupResult;\r\n        }\r\n        else if (isObject(setupResult)) {\r\n            // bindings\r\n            if ( true && setupResult instanceof VNode) {\r\n                warn$2(\"setup() should not return VNodes directly - \" +\r\n                    \"return a render function instead.\");\r\n            }\r\n            vm._setupState = setupResult;\r\n            // __sfc indicates compiled bindings from <script setup>\r\n            if (!setupResult.__sfc) {\r\n                for (var key in setupResult) {\r\n                    if (!isReserved(key)) {\r\n                        proxyWithRefUnwrap(vm, setupResult, key);\r\n                    }\r\n                    else if (true) {\r\n                        warn$2(\"Avoid using variables that start with _ or $ in setup().\");\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // exposed for compiled render fn\r\n                var proxy = (vm._setupProxy = {});\r\n                for (var key in setupResult) {\r\n                    if (key !== '__sfc') {\r\n                        proxyWithRefUnwrap(proxy, setupResult, key);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if ( true && setupResult !== undefined) {\r\n            warn$2(\"setup() should return an object. Received: \".concat(setupResult === null ? 'null' : typeof setupResult));\r\n        }\r\n    }\r\n}\r\nfunction createSetupContext(vm) {\r\n    var exposeCalled = false;\r\n    return {\r\n        get attrs() {\r\n            if (!vm._attrsProxy) {\r\n                var proxy = (vm._attrsProxy = {});\r\n                def(proxy, '_v_attr_proxy', true);\r\n                syncSetupProxy(proxy, vm.$attrs, emptyObject, vm, '$attrs');\r\n            }\r\n            return vm._attrsProxy;\r\n        },\r\n        get listeners() {\r\n            if (!vm._listenersProxy) {\r\n                var proxy = (vm._listenersProxy = {});\r\n                syncSetupProxy(proxy, vm.$listeners, emptyObject, vm, '$listeners');\r\n            }\r\n            return vm._listenersProxy;\r\n        },\r\n        get slots() {\r\n            return initSlotsProxy(vm);\r\n        },\r\n        emit: bind$1(vm.$emit, vm),\r\n        expose: function (exposed) {\r\n            if (true) {\r\n                if (exposeCalled) {\r\n                    warn$2(\"expose() should be called only once per setup().\", vm);\r\n                }\r\n                exposeCalled = true;\r\n            }\r\n            if (exposed) {\r\n                Object.keys(exposed).forEach(function (key) {\r\n                    return proxyWithRefUnwrap(vm, exposed, key);\r\n                });\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction syncSetupProxy(to, from, prev, instance, type) {\r\n    var changed = false;\r\n    for (var key in from) {\r\n        if (!(key in to)) {\r\n            changed = true;\r\n            defineProxyAttr(to, key, instance, type);\r\n        }\r\n        else if (from[key] !== prev[key]) {\r\n            changed = true;\r\n        }\r\n    }\r\n    for (var key in to) {\r\n        if (!(key in from)) {\r\n            changed = true;\r\n            delete to[key];\r\n        }\r\n    }\r\n    return changed;\r\n}\r\nfunction defineProxyAttr(proxy, key, instance, type) {\r\n    Object.defineProperty(proxy, key, {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get: function () {\r\n            return instance[type][key];\r\n        }\r\n    });\r\n}\r\nfunction initSlotsProxy(vm) {\r\n    if (!vm._slotsProxy) {\r\n        syncSetupSlots((vm._slotsProxy = {}), vm.$scopedSlots);\r\n    }\r\n    return vm._slotsProxy;\r\n}\r\nfunction syncSetupSlots(to, from) {\r\n    for (var key in from) {\r\n        to[key] = from[key];\r\n    }\r\n    for (var key in to) {\r\n        if (!(key in from)) {\r\n            delete to[key];\r\n        }\r\n    }\r\n}\r\n/**\r\n * @internal use manual type def because public setup context type relies on\r\n * legacy VNode types\r\n */\r\nfunction useSlots() {\r\n    return getContext().slots;\r\n}\r\n/**\r\n * @internal use manual type def because public setup context type relies on\r\n * legacy VNode types\r\n */\r\nfunction useAttrs() {\r\n    return getContext().attrs;\r\n}\r\n/**\r\n * Vue 2 only\r\n * @internal use manual type def because public setup context type relies on\r\n * legacy VNode types\r\n */\r\nfunction useListeners() {\r\n    return getContext().listeners;\r\n}\r\nfunction getContext() {\r\n    if ( true && !currentInstance) {\r\n        warn$2(\"useContext() called without active instance.\");\r\n    }\r\n    var vm = currentInstance;\r\n    return vm._setupContext || (vm._setupContext = createSetupContext(vm));\r\n}\r\n/**\r\n * Runtime helper for merging default declarations. Imported by compiled code\r\n * only.\r\n * @internal\r\n */\r\nfunction mergeDefaults(raw, defaults) {\r\n    var props = isArray(raw)\r\n        ? raw.reduce(function (normalized, p) { return ((normalized[p] = {}), normalized); }, {})\r\n        : raw;\r\n    for (var key in defaults) {\r\n        var opt = props[key];\r\n        if (opt) {\r\n            if (isArray(opt) || isFunction(opt)) {\r\n                props[key] = { type: opt, default: defaults[key] };\r\n            }\r\n            else {\r\n                opt.default = defaults[key];\r\n            }\r\n        }\r\n        else if (opt === null) {\r\n            props[key] = { default: defaults[key] };\r\n        }\r\n        else if (true) {\r\n            warn$2(\"props default key \\\"\".concat(key, \"\\\" has no corresponding declaration.\"));\r\n        }\r\n    }\r\n    return props;\r\n}\n\nfunction initRender(vm) {\r\n    vm._vnode = null; // the root of the child tree\r\n    vm._staticTrees = null; // v-once cached trees\r\n    var options = vm.$options;\r\n    var parentVnode = (vm.$vnode = options._parentVnode); // the placeholder node in parent tree\r\n    var renderContext = parentVnode && parentVnode.context;\r\n    vm.$slots = resolveSlots(options._renderChildren, renderContext);\r\n    vm.$scopedSlots = parentVnode\r\n        ? normalizeScopedSlots(vm.$parent, parentVnode.data.scopedSlots, vm.$slots)\r\n        : emptyObject;\r\n    // bind the createElement fn to this instance\r\n    // so that we get proper render context inside it.\r\n    // args order: tag, data, children, normalizationType, alwaysNormalize\r\n    // internal version is used by render functions compiled from templates\r\n    // @ts-expect-error\r\n    vm._c = function (a, b, c, d) { return createElement$1(vm, a, b, c, d, false); };\r\n    // normalization is always applied for the public version, used in\r\n    // user-written render functions.\r\n    // @ts-expect-error\r\n    vm.$createElement = function (a, b, c, d) { return createElement$1(vm, a, b, c, d, true); };\r\n    // $attrs & $listeners are exposed for easier HOC creation.\r\n    // they need to be reactive so that HOCs using them are always updated\r\n    var parentData = parentVnode && parentVnode.data;\r\n    /* istanbul ignore else */\r\n    if (true) {\r\n        defineReactive(vm, '$attrs', (parentData && parentData.attrs) || emptyObject, function () {\r\n            !isUpdatingChildComponent && warn$2(\"$attrs is readonly.\", vm);\r\n        }, true);\r\n        defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\r\n            !isUpdatingChildComponent && warn$2(\"$listeners is readonly.\", vm);\r\n        }, true);\r\n    }\r\n    else {}\r\n}\r\nvar currentRenderingInstance = null;\r\nfunction renderMixin(Vue) {\r\n    // install runtime convenience helpers\r\n    installRenderHelpers(Vue.prototype);\r\n    Vue.prototype.$nextTick = function (fn) {\r\n        return nextTick(fn, this);\r\n    };\r\n    Vue.prototype._render = function () {\r\n        var vm = this;\r\n        var _a = vm.$options, render = _a.render, _parentVnode = _a._parentVnode;\r\n        if (_parentVnode && vm._isMounted) {\r\n            vm.$scopedSlots = normalizeScopedSlots(vm.$parent, _parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);\r\n            if (vm._slotsProxy) {\r\n                syncSetupSlots(vm._slotsProxy, vm.$scopedSlots);\r\n            }\r\n        }\r\n        // set parent vnode. this allows render functions to have access\r\n        // to the data on the placeholder node.\r\n        vm.$vnode = _parentVnode;\r\n        // render self\r\n        var vnode;\r\n        try {\r\n            // There's no need to maintain a stack because all render fns are called\r\n            // separately from one another. Nested component's render fns are called\r\n            // when parent component is patched.\r\n            setCurrentInstance(vm);\r\n            currentRenderingInstance = vm;\r\n            vnode = render.call(vm._renderProxy, vm.$createElement);\r\n        }\r\n        catch (e) {\r\n            handleError(e, vm, \"render\");\r\n            // return error render result,\r\n            // or previous vnode to prevent render error causing blank component\r\n            /* istanbul ignore else */\r\n            if ( true && vm.$options.renderError) {\r\n                try {\r\n                    vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\r\n                }\r\n                catch (e) {\r\n                    handleError(e, vm, \"renderError\");\r\n                    vnode = vm._vnode;\r\n                }\r\n            }\r\n            else {\r\n                vnode = vm._vnode;\r\n            }\r\n        }\r\n        finally {\r\n            currentRenderingInstance = null;\r\n            setCurrentInstance();\r\n        }\r\n        // if the returned array contains only a single node, allow it\r\n        if (isArray(vnode) && vnode.length === 1) {\r\n            vnode = vnode[0];\r\n        }\r\n        // return empty vnode in case the render function errored out\r\n        if (!(vnode instanceof VNode)) {\r\n            if ( true && isArray(vnode)) {\r\n                warn$2('Multiple root nodes returned from render function. Render function ' +\r\n                    'should return a single root node.', vm);\r\n            }\r\n            vnode = createEmptyVNode();\r\n        }\r\n        // set parent\r\n        vnode.parent = _parentVnode;\r\n        return vnode;\r\n    };\r\n}\n\nfunction ensureCtor(comp, base) {\r\n    if (comp.__esModule || (hasSymbol && comp[Symbol.toStringTag] === 'Module')) {\r\n        comp = comp.default;\r\n    }\r\n    return isObject(comp) ? base.extend(comp) : comp;\r\n}\r\nfunction createAsyncPlaceholder(factory, data, context, children, tag) {\r\n    var node = createEmptyVNode();\r\n    node.asyncFactory = factory;\r\n    node.asyncMeta = { data: data, context: context, children: children, tag: tag };\r\n    return node;\r\n}\r\nfunction resolveAsyncComponent(factory, baseCtor) {\r\n    if (isTrue(factory.error) && isDef(factory.errorComp)) {\r\n        return factory.errorComp;\r\n    }\r\n    if (isDef(factory.resolved)) {\r\n        return factory.resolved;\r\n    }\r\n    var owner = currentRenderingInstance;\r\n    if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\r\n        // already pending\r\n        factory.owners.push(owner);\r\n    }\r\n    if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\r\n        return factory.loadingComp;\r\n    }\r\n    if (owner && !isDef(factory.owners)) {\r\n        var owners_1 = (factory.owners = [owner]);\r\n        var sync_1 = true;\r\n        var timerLoading_1 = null;\r\n        var timerTimeout_1 = null;\r\n        owner.$on('hook:destroyed', function () { return remove$2(owners_1, owner); });\r\n        var forceRender_1 = function (renderCompleted) {\r\n            for (var i = 0, l = owners_1.length; i < l; i++) {\r\n                owners_1[i].$forceUpdate();\r\n            }\r\n            if (renderCompleted) {\r\n                owners_1.length = 0;\r\n                if (timerLoading_1 !== null) {\r\n                    clearTimeout(timerLoading_1);\r\n                    timerLoading_1 = null;\r\n                }\r\n                if (timerTimeout_1 !== null) {\r\n                    clearTimeout(timerTimeout_1);\r\n                    timerTimeout_1 = null;\r\n                }\r\n            }\r\n        };\r\n        var resolve = once(function (res) {\r\n            // cache resolved\r\n            factory.resolved = ensureCtor(res, baseCtor);\r\n            // invoke callbacks only if this is not a synchronous resolve\r\n            // (async resolves are shimmed as synchronous during SSR)\r\n            if (!sync_1) {\r\n                forceRender_1(true);\r\n            }\r\n            else {\r\n                owners_1.length = 0;\r\n            }\r\n        });\r\n        var reject_1 = once(function (reason) {\r\n             true &&\r\n                warn$2(\"Failed to resolve async component: \".concat(String(factory)) +\r\n                    (reason ? \"\\nReason: \".concat(reason) : ''));\r\n            if (isDef(factory.errorComp)) {\r\n                factory.error = true;\r\n                forceRender_1(true);\r\n            }\r\n        });\r\n        var res_1 = factory(resolve, reject_1);\r\n        if (isObject(res_1)) {\r\n            if (isPromise(res_1)) {\r\n                // () => Promise\r\n                if (isUndef(factory.resolved)) {\r\n                    res_1.then(resolve, reject_1);\r\n                }\r\n            }\r\n            else if (isPromise(res_1.component)) {\r\n                res_1.component.then(resolve, reject_1);\r\n                if (isDef(res_1.error)) {\r\n                    factory.errorComp = ensureCtor(res_1.error, baseCtor);\r\n                }\r\n                if (isDef(res_1.loading)) {\r\n                    factory.loadingComp = ensureCtor(res_1.loading, baseCtor);\r\n                    if (res_1.delay === 0) {\r\n                        factory.loading = true;\r\n                    }\r\n                    else {\r\n                        // @ts-expect-error NodeJS timeout type\r\n                        timerLoading_1 = setTimeout(function () {\r\n                            timerLoading_1 = null;\r\n                            if (isUndef(factory.resolved) && isUndef(factory.error)) {\r\n                                factory.loading = true;\r\n                                forceRender_1(false);\r\n                            }\r\n                        }, res_1.delay || 200);\r\n                    }\r\n                }\r\n                if (isDef(res_1.timeout)) {\r\n                    // @ts-expect-error NodeJS timeout type\r\n                    timerTimeout_1 = setTimeout(function () {\r\n                        timerTimeout_1 = null;\r\n                        if (isUndef(factory.resolved)) {\r\n                            reject_1( true ? \"timeout (\".concat(res_1.timeout, \"ms)\") : 0);\r\n                        }\r\n                    }, res_1.timeout);\r\n                }\r\n            }\r\n        }\r\n        sync_1 = false;\r\n        // return in case resolved synchronously\r\n        return factory.loading ? factory.loadingComp : factory.resolved;\r\n    }\r\n}\n\nfunction getFirstComponentChild(children) {\r\n    if (isArray(children)) {\r\n        for (var i = 0; i < children.length; i++) {\r\n            var c = children[i];\r\n            if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\r\n                return c;\r\n            }\r\n        }\r\n    }\r\n}\n\nfunction initEvents(vm) {\r\n    vm._events = Object.create(null);\r\n    vm._hasHookEvent = false;\r\n    // init parent attached events\r\n    var listeners = vm.$options._parentListeners;\r\n    if (listeners) {\r\n        updateComponentListeners(vm, listeners);\r\n    }\r\n}\r\nvar target$1;\r\nfunction add$1(event, fn) {\r\n    target$1.$on(event, fn);\r\n}\r\nfunction remove$1(event, fn) {\r\n    target$1.$off(event, fn);\r\n}\r\nfunction createOnceHandler$1(event, fn) {\r\n    var _target = target$1;\r\n    return function onceHandler() {\r\n        var res = fn.apply(null, arguments);\r\n        if (res !== null) {\r\n            _target.$off(event, onceHandler);\r\n        }\r\n    };\r\n}\r\nfunction updateComponentListeners(vm, listeners, oldListeners) {\r\n    target$1 = vm;\r\n    updateListeners(listeners, oldListeners || {}, add$1, remove$1, createOnceHandler$1, vm);\r\n    target$1 = undefined;\r\n}\r\nfunction eventsMixin(Vue) {\r\n    var hookRE = /^hook:/;\r\n    Vue.prototype.$on = function (event, fn) {\r\n        var vm = this;\r\n        if (isArray(event)) {\r\n            for (var i = 0, l = event.length; i < l; i++) {\r\n                vm.$on(event[i], fn);\r\n            }\r\n        }\r\n        else {\r\n            (vm._events[event] || (vm._events[event] = [])).push(fn);\r\n            // optimize hook:event cost by using a boolean flag marked at registration\r\n            // instead of a hash lookup\r\n            if (hookRE.test(event)) {\r\n                vm._hasHookEvent = true;\r\n            }\r\n        }\r\n        return vm;\r\n    };\r\n    Vue.prototype.$once = function (event, fn) {\r\n        var vm = this;\r\n        function on() {\r\n            vm.$off(event, on);\r\n            fn.apply(vm, arguments);\r\n        }\r\n        on.fn = fn;\r\n        vm.$on(event, on);\r\n        return vm;\r\n    };\r\n    Vue.prototype.$off = function (event, fn) {\r\n        var vm = this;\r\n        // all\r\n        if (!arguments.length) {\r\n            vm._events = Object.create(null);\r\n            return vm;\r\n        }\r\n        // array of events\r\n        if (isArray(event)) {\r\n            for (var i_1 = 0, l = event.length; i_1 < l; i_1++) {\r\n                vm.$off(event[i_1], fn);\r\n            }\r\n            return vm;\r\n        }\r\n        // specific event\r\n        var cbs = vm._events[event];\r\n        if (!cbs) {\r\n            return vm;\r\n        }\r\n        if (!fn) {\r\n            vm._events[event] = null;\r\n            return vm;\r\n        }\r\n        // specific handler\r\n        var cb;\r\n        var i = cbs.length;\r\n        while (i--) {\r\n            cb = cbs[i];\r\n            if (cb === fn || cb.fn === fn) {\r\n                cbs.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        return vm;\r\n    };\r\n    Vue.prototype.$emit = function (event) {\r\n        var vm = this;\r\n        if (true) {\r\n            var lowerCaseEvent = event.toLowerCase();\r\n            if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\r\n                tip(\"Event \\\"\".concat(lowerCaseEvent, \"\\\" is emitted in component \") +\r\n                    \"\".concat(formatComponentName(vm), \" but the handler is registered for \\\"\").concat(event, \"\\\". \") +\r\n                    \"Note that HTML attributes are case-insensitive and you cannot use \" +\r\n                    \"v-on to listen to camelCase events when using in-DOM templates. \" +\r\n                    \"You should probably use \\\"\".concat(hyphenate(event), \"\\\" instead of \\\"\").concat(event, \"\\\".\"));\r\n            }\r\n        }\r\n        var cbs = vm._events[event];\r\n        if (cbs) {\r\n            cbs = cbs.length > 1 ? toArray(cbs) : cbs;\r\n            var args = toArray(arguments, 1);\r\n            var info = \"event handler for \\\"\".concat(event, \"\\\"\");\r\n            for (var i = 0, l = cbs.length; i < l; i++) {\r\n                invokeWithErrorHandling(cbs[i], vm, args, vm, info);\r\n            }\r\n        }\r\n        return vm;\r\n    };\r\n}\n\nvar activeInstance = null;\r\nvar isUpdatingChildComponent = false;\r\nfunction setActiveInstance(vm) {\r\n    var prevActiveInstance = activeInstance;\r\n    activeInstance = vm;\r\n    return function () {\r\n        activeInstance = prevActiveInstance;\r\n    };\r\n}\r\nfunction initLifecycle(vm) {\r\n    var options = vm.$options;\r\n    // locate first non-abstract parent\r\n    var parent = options.parent;\r\n    if (parent && !options.abstract) {\r\n        while (parent.$options.abstract && parent.$parent) {\r\n            parent = parent.$parent;\r\n        }\r\n        parent.$children.push(vm);\r\n    }\r\n    vm.$parent = parent;\r\n    vm.$root = parent ? parent.$root : vm;\r\n    vm.$children = [];\r\n    vm.$refs = {};\r\n    vm._provided = parent ? parent._provided : Object.create(null);\r\n    vm._watcher = null;\r\n    vm._inactive = null;\r\n    vm._directInactive = false;\r\n    vm._isMounted = false;\r\n    vm._isDestroyed = false;\r\n    vm._isBeingDestroyed = false;\r\n}\r\nfunction lifecycleMixin(Vue) {\r\n    Vue.prototype._update = function (vnode, hydrating) {\r\n        var vm = this;\r\n        var prevEl = vm.$el;\r\n        var prevVnode = vm._vnode;\r\n        var restoreActiveInstance = setActiveInstance(vm);\r\n        vm._vnode = vnode;\r\n        // Vue.prototype.__patch__ is injected in entry points\r\n        // based on the rendering backend used.\r\n        if (!prevVnode) {\r\n            // initial render\r\n            vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\r\n        }\r\n        else {\r\n            // updates\r\n            vm.$el = vm.__patch__(prevVnode, vnode);\r\n        }\r\n        restoreActiveInstance();\r\n        // update __vue__ reference\r\n        if (prevEl) {\r\n            prevEl.__vue__ = null;\r\n        }\r\n        if (vm.$el) {\r\n            vm.$el.__vue__ = vm;\r\n        }\r\n        // if parent is an HOC, update its $el as well\r\n        if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\r\n            vm.$parent.$el = vm.$el;\r\n        }\r\n        // updated hook is called by the scheduler to ensure that children are\r\n        // updated in a parent's updated hook.\r\n    };\r\n    Vue.prototype.$forceUpdate = function () {\r\n        var vm = this;\r\n        if (vm._watcher) {\r\n            vm._watcher.update();\r\n        }\r\n    };\r\n    Vue.prototype.$destroy = function () {\r\n        var vm = this;\r\n        if (vm._isBeingDestroyed) {\r\n            return;\r\n        }\r\n        callHook$1(vm, 'beforeDestroy');\r\n        vm._isBeingDestroyed = true;\r\n        // remove self from parent\r\n        var parent = vm.$parent;\r\n        if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\r\n            remove$2(parent.$children, vm);\r\n        }\r\n        // teardown scope. this includes both the render watcher and other\r\n        // watchers created\r\n        vm._scope.stop();\r\n        // remove reference from data ob\r\n        // frozen object may not have observer.\r\n        if (vm._data.__ob__) {\r\n            vm._data.__ob__.vmCount--;\r\n        }\r\n        // call the last hook...\r\n        vm._isDestroyed = true;\r\n        // invoke destroy hooks on current rendered tree\r\n        vm.__patch__(vm._vnode, null);\r\n        // fire destroyed hook\r\n        callHook$1(vm, 'destroyed');\r\n        // turn off all instance listeners.\r\n        vm.$off();\r\n        // remove __vue__ reference\r\n        if (vm.$el) {\r\n            vm.$el.__vue__ = null;\r\n        }\r\n        // release circular reference (#6759)\r\n        if (vm.$vnode) {\r\n            vm.$vnode.parent = null;\r\n        }\r\n    };\r\n}\r\nfunction mountComponent(vm, el, hydrating) {\r\n    vm.$el = el;\r\n    if (!vm.$options.render) {\r\n        // @ts-expect-error invalid type\r\n        vm.$options.render = createEmptyVNode;\r\n        if (true) {\r\n            /* istanbul ignore if */\r\n            if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\r\n                vm.$options.el ||\r\n                el) {\r\n                warn$2('You are using the runtime-only build of Vue where the template ' +\r\n                    'compiler is not available. Either pre-compile the templates into ' +\r\n                    'render functions, or use the compiler-included build.', vm);\r\n            }\r\n            else {\r\n                warn$2('Failed to mount component: template or render function not defined.', vm);\r\n            }\r\n        }\r\n    }\r\n    callHook$1(vm, 'beforeMount');\r\n    var updateComponent;\r\n    /* istanbul ignore if */\r\n    if ( true && config.performance && mark) {\r\n        updateComponent = function () {\r\n            var name = vm._name;\r\n            var id = vm._uid;\r\n            var startTag = \"vue-perf-start:\".concat(id);\r\n            var endTag = \"vue-perf-end:\".concat(id);\r\n            mark(startTag);\r\n            var vnode = vm._render();\r\n            mark(endTag);\r\n            measure(\"vue \".concat(name, \" render\"), startTag, endTag);\r\n            mark(startTag);\r\n            vm._update(vnode, hydrating);\r\n            mark(endTag);\r\n            measure(\"vue \".concat(name, \" patch\"), startTag, endTag);\r\n        };\r\n    }\r\n    else {\r\n        updateComponent = function () {\r\n            vm._update(vm._render(), hydrating);\r\n        };\r\n    }\r\n    var watcherOptions = {\r\n        before: function () {\r\n            if (vm._isMounted && !vm._isDestroyed) {\r\n                callHook$1(vm, 'beforeUpdate');\r\n            }\r\n        }\r\n    };\r\n    if (true) {\r\n        watcherOptions.onTrack = function (e) { return callHook$1(vm, 'renderTracked', [e]); };\r\n        watcherOptions.onTrigger = function (e) { return callHook$1(vm, 'renderTriggered', [e]); };\r\n    }\r\n    // we set this to vm._watcher inside the watcher's constructor\r\n    // since the watcher's initial patch may call $forceUpdate (e.g. inside child\r\n    // component's mounted hook), which relies on vm._watcher being already defined\r\n    new Watcher(vm, updateComponent, noop, watcherOptions, true /* isRenderWatcher */);\r\n    hydrating = false;\r\n    // flush buffer for flush: \"pre\" watchers queued in setup()\r\n    var preWatchers = vm._preWatchers;\r\n    if (preWatchers) {\r\n        for (var i = 0; i < preWatchers.length; i++) {\r\n            preWatchers[i].run();\r\n        }\r\n    }\r\n    // manually mounted instance, call mounted on self\r\n    // mounted is called for render-created child components in its inserted hook\r\n    if (vm.$vnode == null) {\r\n        vm._isMounted = true;\r\n        callHook$1(vm, 'mounted');\r\n    }\r\n    return vm;\r\n}\r\nfunction updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {\r\n    if (true) {\r\n        isUpdatingChildComponent = true;\r\n    }\r\n    // determine whether component has slot children\r\n    // we need to do this before overwriting $options._renderChildren.\r\n    // check if there are dynamic scopedSlots (hand-written or compiled but with\r\n    // dynamic slot names). Static scoped slots compiled from template has the\r\n    // \"$stable\" marker.\r\n    var newScopedSlots = parentVnode.data.scopedSlots;\r\n    var oldScopedSlots = vm.$scopedSlots;\r\n    var hasDynamicScopedSlot = !!((newScopedSlots && !newScopedSlots.$stable) ||\r\n        (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\r\n        (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key) ||\r\n        (!newScopedSlots && vm.$scopedSlots.$key));\r\n    // Any static slot children from the parent may have changed during parent's\r\n    // update. Dynamic scoped slots may also have changed. In such cases, a forced\r\n    // update is necessary to ensure correctness.\r\n    var needsForceUpdate = !!(renderChildren || // has new static slots\r\n        vm.$options._renderChildren || // has old static slots\r\n        hasDynamicScopedSlot);\r\n    var prevVNode = vm.$vnode;\r\n    vm.$options._parentVnode = parentVnode;\r\n    vm.$vnode = parentVnode; // update vm's placeholder node without re-render\r\n    if (vm._vnode) {\r\n        // update child tree's parent\r\n        vm._vnode.parent = parentVnode;\r\n    }\r\n    vm.$options._renderChildren = renderChildren;\r\n    // update $attrs and $listeners hash\r\n    // these are also reactive so they may trigger child update if the child\r\n    // used them during render\r\n    var attrs = parentVnode.data.attrs || emptyObject;\r\n    if (vm._attrsProxy) {\r\n        // force update if attrs are accessed and has changed since it may be\r\n        // passed to a child component.\r\n        if (syncSetupProxy(vm._attrsProxy, attrs, (prevVNode.data && prevVNode.data.attrs) || emptyObject, vm, '$attrs')) {\r\n            needsForceUpdate = true;\r\n        }\r\n    }\r\n    vm.$attrs = attrs;\r\n    // update listeners\r\n    listeners = listeners || emptyObject;\r\n    var prevListeners = vm.$options._parentListeners;\r\n    if (vm._listenersProxy) {\r\n        syncSetupProxy(vm._listenersProxy, listeners, prevListeners || emptyObject, vm, '$listeners');\r\n    }\r\n    vm.$listeners = vm.$options._parentListeners = listeners;\r\n    updateComponentListeners(vm, listeners, prevListeners);\r\n    // update props\r\n    if (propsData && vm.$options.props) {\r\n        toggleObserving(false);\r\n        var props = vm._props;\r\n        var propKeys = vm.$options._propKeys || [];\r\n        for (var i = 0; i < propKeys.length; i++) {\r\n            var key = propKeys[i];\r\n            var propOptions = vm.$options.props; // wtf flow?\r\n            props[key] = validateProp(key, propOptions, propsData, vm);\r\n        }\r\n        toggleObserving(true);\r\n        // keep a copy of raw propsData\r\n        vm.$options.propsData = propsData;\r\n    }\r\n    // resolve slots + force update if has children\r\n    if (needsForceUpdate) {\r\n        vm.$slots = resolveSlots(renderChildren, parentVnode.context);\r\n        vm.$forceUpdate();\r\n    }\r\n    if (true) {\r\n        isUpdatingChildComponent = false;\r\n    }\r\n}\r\nfunction isInInactiveTree(vm) {\r\n    while (vm && (vm = vm.$parent)) {\r\n        if (vm._inactive)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nfunction activateChildComponent(vm, direct) {\r\n    if (direct) {\r\n        vm._directInactive = false;\r\n        if (isInInactiveTree(vm)) {\r\n            return;\r\n        }\r\n    }\r\n    else if (vm._directInactive) {\r\n        return;\r\n    }\r\n    if (vm._inactive || vm._inactive === null) {\r\n        vm._inactive = false;\r\n        for (var i = 0; i < vm.$children.length; i++) {\r\n            activateChildComponent(vm.$children[i]);\r\n        }\r\n        callHook$1(vm, 'activated');\r\n    }\r\n}\r\nfunction deactivateChildComponent(vm, direct) {\r\n    if (direct) {\r\n        vm._directInactive = true;\r\n        if (isInInactiveTree(vm)) {\r\n            return;\r\n        }\r\n    }\r\n    if (!vm._inactive) {\r\n        vm._inactive = true;\r\n        for (var i = 0; i < vm.$children.length; i++) {\r\n            deactivateChildComponent(vm.$children[i]);\r\n        }\r\n        callHook$1(vm, 'deactivated');\r\n    }\r\n}\r\nfunction callHook$1(vm, hook, args, setContext) {\r\n    if (setContext === void 0) { setContext = true; }\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var prev = currentInstance;\r\n    setContext && setCurrentInstance(vm);\r\n    var handlers = vm.$options[hook];\r\n    var info = \"\".concat(hook, \" hook\");\r\n    if (handlers) {\r\n        for (var i = 0, j = handlers.length; i < j; i++) {\r\n            invokeWithErrorHandling(handlers[i], vm, args || null, vm, info);\r\n        }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n        vm.$emit('hook:' + hook);\r\n    }\r\n    setContext && setCurrentInstance(prev);\r\n    popTarget();\r\n}\n\nvar MAX_UPDATE_COUNT = 100;\r\nvar queue = [];\r\nvar activatedChildren = [];\r\nvar has = {};\r\nvar circular = {};\r\nvar waiting = false;\r\nvar flushing = false;\r\nvar index$1 = 0;\r\n/**\r\n * Reset the scheduler's state.\r\n */\r\nfunction resetSchedulerState() {\r\n    index$1 = queue.length = activatedChildren.length = 0;\r\n    has = {};\r\n    if (true) {\r\n        circular = {};\r\n    }\r\n    waiting = flushing = false;\r\n}\r\n// Async edge case #6566 requires saving the timestamp when event listeners are\r\n// attached. However, calling performance.now() has a perf overhead especially\r\n// if the page has thousands of event listeners. Instead, we take a timestamp\r\n// every time the scheduler flushes and use that for all event listeners\r\n// attached during that flush.\r\nvar currentFlushTimestamp = 0;\r\n// Async edge case fix requires storing an event listener's attach timestamp.\r\nvar getNow = Date.now;\r\n// Determine what event timestamp the browser is using. Annoyingly, the\r\n// timestamp can either be hi-res (relative to page load) or low-res\r\n// (relative to UNIX epoch), so in order to compare time we have to use the\r\n// same timestamp type when saving the flush timestamp.\r\n// All IE versions use low-res event timestamps, and have problematic clock\r\n// implementations (#9632)\r\nif (inBrowser && !isIE) {\r\n    var performance_1 = window.performance;\r\n    if (performance_1 &&\r\n        typeof performance_1.now === 'function' &&\r\n        getNow() > document.createEvent('Event').timeStamp) {\r\n        // if the event timestamp, although evaluated AFTER the Date.now(), is\r\n        // smaller than it, it means the event is using a hi-res timestamp,\r\n        // and we need to use the hi-res version for event listener timestamps as\r\n        // well.\r\n        getNow = function () { return performance_1.now(); };\r\n    }\r\n}\r\nvar sortCompareFn = function (a, b) {\r\n    if (a.post) {\r\n        if (!b.post)\r\n            return 1;\r\n    }\r\n    else if (b.post) {\r\n        return -1;\r\n    }\r\n    return a.id - b.id;\r\n};\r\n/**\r\n * Flush both queues and run the watchers.\r\n */\r\nfunction flushSchedulerQueue() {\r\n    currentFlushTimestamp = getNow();\r\n    flushing = true;\r\n    var watcher, id;\r\n    // Sort queue before flush.\r\n    // This ensures that:\r\n    // 1. Components are updated from parent to child. (because parent is always\r\n    //    created before the child)\r\n    // 2. A component's user watchers are run before its render watcher (because\r\n    //    user watchers are created before the render watcher)\r\n    // 3. If a component is destroyed during a parent component's watcher run,\r\n    //    its watchers can be skipped.\r\n    queue.sort(sortCompareFn);\r\n    // do not cache length because more watchers might be pushed\r\n    // as we run existing watchers\r\n    for (index$1 = 0; index$1 < queue.length; index$1++) {\r\n        watcher = queue[index$1];\r\n        if (watcher.before) {\r\n            watcher.before();\r\n        }\r\n        id = watcher.id;\r\n        has[id] = null;\r\n        watcher.run();\r\n        // in dev build, check and stop circular updates.\r\n        if ( true && has[id] != null) {\r\n            circular[id] = (circular[id] || 0) + 1;\r\n            if (circular[id] > MAX_UPDATE_COUNT) {\r\n                warn$2('You may have an infinite update loop ' +\r\n                    (watcher.user\r\n                        ? \"in watcher with expression \\\"\".concat(watcher.expression, \"\\\"\")\r\n                        : \"in a component render function.\"), watcher.vm);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // keep copies of post queues before resetting state\r\n    var activatedQueue = activatedChildren.slice();\r\n    var updatedQueue = queue.slice();\r\n    resetSchedulerState();\r\n    // call component updated and activated hooks\r\n    callActivatedHooks(activatedQueue);\r\n    callUpdatedHooks(updatedQueue);\r\n    // devtool hook\r\n    /* istanbul ignore if */\r\n    if (devtools && config.devtools) {\r\n        devtools.emit('flush');\r\n    }\r\n}\r\nfunction callUpdatedHooks(queue) {\r\n    var i = queue.length;\r\n    while (i--) {\r\n        var watcher = queue[i];\r\n        var vm = watcher.vm;\r\n        if (vm && vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\r\n            callHook$1(vm, 'updated');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Queue a kept-alive component that was activated during patch.\r\n * The queue will be processed after the entire tree has been patched.\r\n */\r\nfunction queueActivatedComponent(vm) {\r\n    // setting _inactive to false here so that a render function can\r\n    // rely on checking whether it's in an inactive tree (e.g. router-view)\r\n    vm._inactive = false;\r\n    activatedChildren.push(vm);\r\n}\r\nfunction callActivatedHooks(queue) {\r\n    for (var i = 0; i < queue.length; i++) {\r\n        queue[i]._inactive = true;\r\n        activateChildComponent(queue[i], true /* true */);\r\n    }\r\n}\r\n/**\r\n * Push a watcher into the watcher queue.\r\n * Jobs with duplicate IDs will be skipped unless it's\r\n * pushed when the queue is being flushed.\r\n */\r\nfunction queueWatcher(watcher) {\r\n    var id = watcher.id;\r\n    if (has[id] != null) {\r\n        return;\r\n    }\r\n    if (watcher === Dep.target && watcher.noRecurse) {\r\n        return;\r\n    }\r\n    has[id] = true;\r\n    if (!flushing) {\r\n        queue.push(watcher);\r\n    }\r\n    else {\r\n        // if already flushing, splice the watcher based on its id\r\n        // if already past its id, it will be run next immediately.\r\n        var i = queue.length - 1;\r\n        while (i > index$1 && queue[i].id > watcher.id) {\r\n            i--;\r\n        }\r\n        queue.splice(i + 1, 0, watcher);\r\n    }\r\n    // queue the flush\r\n    if (!waiting) {\r\n        waiting = true;\r\n        if ( true && !config.async) {\r\n            flushSchedulerQueue();\r\n            return;\r\n        }\r\n        nextTick(flushSchedulerQueue);\r\n    }\r\n}\n\nvar WATCHER = \"watcher\";\r\nvar WATCHER_CB = \"\".concat(WATCHER, \" callback\");\r\nvar WATCHER_GETTER = \"\".concat(WATCHER, \" getter\");\r\nvar WATCHER_CLEANUP = \"\".concat(WATCHER, \" cleanup\");\r\n// Simple effect.\r\nfunction watchEffect(effect, options) {\r\n    return doWatch(effect, null, options);\r\n}\r\nfunction watchPostEffect(effect, options) {\r\n    return doWatch(effect, null, ( true\r\n        ? __assign(__assign({}, options), { flush: 'post' }) : 0));\r\n}\r\nfunction watchSyncEffect(effect, options) {\r\n    return doWatch(effect, null, ( true\r\n        ? __assign(__assign({}, options), { flush: 'sync' }) : 0));\r\n}\r\n// initial value for watchers to trigger on undefined initial values\r\nvar INITIAL_WATCHER_VALUE = {};\r\n// implementation\r\nfunction watch(source, cb, options) {\r\n    if ( true && typeof cb !== 'function') {\r\n        warn$2(\"`watch(fn, options?)` signature has been moved to a separate API. \" +\r\n            \"Use `watchEffect(fn, options?)` instead. `watch` now only \" +\r\n            \"supports `watch(source, cb, options?) signature.\");\r\n    }\r\n    return doWatch(source, cb, options);\r\n}\r\nfunction doWatch(source, cb, _a) {\r\n    var _b = _a === void 0 ? emptyObject : _a, immediate = _b.immediate, deep = _b.deep, _c = _b.flush, flush = _c === void 0 ? 'pre' : _c, onTrack = _b.onTrack, onTrigger = _b.onTrigger;\r\n    if ( true && !cb) {\r\n        if (immediate !== undefined) {\r\n            warn$2(\"watch() \\\"immediate\\\" option is only respected when using the \" +\r\n                \"watch(source, callback, options?) signature.\");\r\n        }\r\n        if (deep !== undefined) {\r\n            warn$2(\"watch() \\\"deep\\\" option is only respected when using the \" +\r\n                \"watch(source, callback, options?) signature.\");\r\n        }\r\n    }\r\n    var warnInvalidSource = function (s) {\r\n        warn$2(\"Invalid watch source: \".concat(s, \". A watch source can only be a getter/effect \") +\r\n            \"function, a ref, a reactive object, or an array of these types.\");\r\n    };\r\n    var instance = currentInstance;\r\n    var call = function (fn, type, args) {\r\n        if (args === void 0) { args = null; }\r\n        return invokeWithErrorHandling(fn, null, args, instance, type);\r\n    };\r\n    var getter;\r\n    var forceTrigger = false;\r\n    var isMultiSource = false;\r\n    if (isRef(source)) {\r\n        getter = function () { return source.value; };\r\n        forceTrigger = isShallow(source);\r\n    }\r\n    else if (isReactive(source)) {\r\n        getter = function () {\r\n            source.__ob__.dep.depend();\r\n            return source;\r\n        };\r\n        deep = true;\r\n    }\r\n    else if (isArray(source)) {\r\n        isMultiSource = true;\r\n        forceTrigger = source.some(function (s) { return isReactive(s) || isShallow(s); });\r\n        getter = function () {\r\n            return source.map(function (s) {\r\n                if (isRef(s)) {\r\n                    return s.value;\r\n                }\r\n                else if (isReactive(s)) {\r\n                    return traverse(s);\r\n                }\r\n                else if (isFunction(s)) {\r\n                    return call(s, WATCHER_GETTER);\r\n                }\r\n                else {\r\n                     true && warnInvalidSource(s);\r\n                }\r\n            });\r\n        };\r\n    }\r\n    else if (isFunction(source)) {\r\n        if (cb) {\r\n            // getter with cb\r\n            getter = function () { return call(source, WATCHER_GETTER); };\r\n        }\r\n        else {\r\n            // no cb -> simple effect\r\n            getter = function () {\r\n                if (instance && instance._isDestroyed) {\r\n                    return;\r\n                }\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                return call(source, WATCHER, [onCleanup]);\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        getter = noop;\r\n         true && warnInvalidSource(source);\r\n    }\r\n    if (cb && deep) {\r\n        var baseGetter_1 = getter;\r\n        getter = function () { return traverse(baseGetter_1()); };\r\n    }\r\n    var cleanup;\r\n    var onCleanup = function (fn) {\r\n        cleanup = watcher.onStop = function () {\r\n            call(fn, WATCHER_CLEANUP);\r\n        };\r\n    };\r\n    // in SSR there is no need to setup an actual effect, and it should be noop\r\n    // unless it's eager\r\n    if (isServerRendering()) {\r\n        // we will also not call the invalidate callback (+ runner is not set up)\r\n        onCleanup = noop;\r\n        if (!cb) {\r\n            getter();\r\n        }\r\n        else if (immediate) {\r\n            call(cb, WATCHER_CB, [\r\n                getter(),\r\n                isMultiSource ? [] : undefined,\r\n                onCleanup\r\n            ]);\r\n        }\r\n        return noop;\r\n    }\r\n    var watcher = new Watcher(currentInstance, getter, noop, {\r\n        lazy: true\r\n    });\r\n    watcher.noRecurse = !cb;\r\n    var oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;\r\n    // overwrite default run\r\n    watcher.run = function () {\r\n        if (!watcher.active &&\r\n            !(flush === 'pre' && instance && instance._isBeingDestroyed)) {\r\n            return;\r\n        }\r\n        if (cb) {\r\n            // watch(source, cb)\r\n            var newValue = watcher.get();\r\n            if (deep ||\r\n                forceTrigger ||\r\n                (isMultiSource\r\n                    ? newValue.some(function (v, i) {\r\n                        return hasChanged(v, oldValue[i]);\r\n                    })\r\n                    : hasChanged(newValue, oldValue))) {\r\n                // cleanup before running cb again\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                call(cb, WATCHER_CB, [\r\n                    newValue,\r\n                    // pass undefined as the old value when it's changed for the first time\r\n                    oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,\r\n                    onCleanup\r\n                ]);\r\n                oldValue = newValue;\r\n            }\r\n        }\r\n        else {\r\n            // watchEffect\r\n            watcher.get();\r\n        }\r\n    };\r\n    if (flush === 'sync') {\r\n        watcher.update = watcher.run;\r\n    }\r\n    else if (flush === 'post') {\r\n        watcher.post = true;\r\n        watcher.update = function () { return queueWatcher(watcher); };\r\n    }\r\n    else {\r\n        // pre\r\n        watcher.update = function () {\r\n            if (instance && instance === currentInstance && !instance._isMounted) {\r\n                // pre-watcher triggered before\r\n                var buffer = instance._preWatchers || (instance._preWatchers = []);\r\n                if (buffer.indexOf(watcher) < 0)\r\n                    buffer.push(watcher);\r\n            }\r\n            else {\r\n                queueWatcher(watcher);\r\n            }\r\n        };\r\n    }\r\n    if (true) {\r\n        watcher.onTrack = onTrack;\r\n        watcher.onTrigger = onTrigger;\r\n    }\r\n    // initial run\r\n    if (cb) {\r\n        if (immediate) {\r\n            watcher.run();\r\n        }\r\n        else {\r\n            oldValue = watcher.get();\r\n        }\r\n    }\r\n    else if (flush === 'post' && instance) {\r\n        instance.$once('hook:mounted', function () { return watcher.get(); });\r\n    }\r\n    else {\r\n        watcher.get();\r\n    }\r\n    return function () {\r\n        watcher.teardown();\r\n    };\r\n}\n\nvar activeEffectScope;\r\nvar EffectScope = /** @class */ (function () {\r\n    function EffectScope(detached) {\r\n        if (detached === void 0) { detached = false; }\r\n        /**\r\n         * @internal\r\n         */\r\n        this.active = true;\r\n        /**\r\n         * @internal\r\n         */\r\n        this.effects = [];\r\n        /**\r\n         * @internal\r\n         */\r\n        this.cleanups = [];\r\n        if (!detached && activeEffectScope) {\r\n            this.parent = activeEffectScope;\r\n            this.index =\r\n                (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;\r\n        }\r\n    }\r\n    EffectScope.prototype.run = function (fn) {\r\n        if (this.active) {\r\n            var currentEffectScope = activeEffectScope;\r\n            try {\r\n                activeEffectScope = this;\r\n                return fn();\r\n            }\r\n            finally {\r\n                activeEffectScope = currentEffectScope;\r\n            }\r\n        }\r\n        else if (true) {\r\n            warn$2(\"cannot run an inactive effect scope.\");\r\n        }\r\n    };\r\n    /**\r\n     * This should only be called on non-detached scopes\r\n     * @internal\r\n     */\r\n    EffectScope.prototype.on = function () {\r\n        activeEffectScope = this;\r\n    };\r\n    /**\r\n     * This should only be called on non-detached scopes\r\n     * @internal\r\n     */\r\n    EffectScope.prototype.off = function () {\r\n        activeEffectScope = this.parent;\r\n    };\r\n    EffectScope.prototype.stop = function (fromParent) {\r\n        if (this.active) {\r\n            var i = void 0, l = void 0;\r\n            for (i = 0, l = this.effects.length; i < l; i++) {\r\n                this.effects[i].teardown();\r\n            }\r\n            for (i = 0, l = this.cleanups.length; i < l; i++) {\r\n                this.cleanups[i]();\r\n            }\r\n            if (this.scopes) {\r\n                for (i = 0, l = this.scopes.length; i < l; i++) {\r\n                    this.scopes[i].stop(true);\r\n                }\r\n            }\r\n            // nested scope, dereference from parent to avoid memory leaks\r\n            if (this.parent && !fromParent) {\r\n                // optimized O(1) removal\r\n                var last = this.parent.scopes.pop();\r\n                if (last && last !== this) {\r\n                    this.parent.scopes[this.index] = last;\r\n                    last.index = this.index;\r\n                }\r\n            }\r\n            this.active = false;\r\n        }\r\n    };\r\n    return EffectScope;\r\n}());\r\nfunction effectScope(detached) {\r\n    return new EffectScope(detached);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction recordEffectScope(effect, scope) {\r\n    if (scope === void 0) { scope = activeEffectScope; }\r\n    if (scope && scope.active) {\r\n        scope.effects.push(effect);\r\n    }\r\n}\r\nfunction getCurrentScope() {\r\n    return activeEffectScope;\r\n}\r\nfunction onScopeDispose(fn) {\r\n    if (activeEffectScope) {\r\n        activeEffectScope.cleanups.push(fn);\r\n    }\r\n    else if (true) {\r\n        warn$2(\"onScopeDispose() is called when there is no active effect scope\" +\r\n            \" to be associated with.\");\r\n    }\r\n}\n\nfunction provide(key, value) {\r\n    if (!currentInstance) {\r\n        if (true) {\r\n            warn$2(\"provide() can only be used inside setup().\");\r\n        }\r\n    }\r\n    else {\r\n        // TS doesn't allow symbol as index type\r\n        resolveProvided(currentInstance)[key] = value;\r\n    }\r\n}\r\nfunction resolveProvided(vm) {\r\n    // by default an instance inherits its parent's provides object\r\n    // but when it needs to provide values of its own, it creates its\r\n    // own provides object using parent provides object as prototype.\r\n    // this way in `inject` we can simply look up injections from direct\r\n    // parent and let the prototype chain do the work.\r\n    var existing = vm._provided;\r\n    var parentProvides = vm.$parent && vm.$parent._provided;\r\n    if (parentProvides === existing) {\r\n        return (vm._provided = Object.create(parentProvides));\r\n    }\r\n    else {\r\n        return existing;\r\n    }\r\n}\r\nfunction inject(key, defaultValue, treatDefaultAsFactory) {\r\n    if (treatDefaultAsFactory === void 0) { treatDefaultAsFactory = false; }\r\n    // fallback to `currentRenderingInstance` so that this can be called in\r\n    // a functional component\r\n    var instance = currentInstance;\r\n    if (instance) {\r\n        // #2400\r\n        // to support `app.use` plugins,\r\n        // fallback to appContext's `provides` if the instance is at root\r\n        var provides = instance.$parent && instance.$parent._provided;\r\n        if (provides && key in provides) {\r\n            // TS doesn't allow symbol as index type\r\n            return provides[key];\r\n        }\r\n        else if (arguments.length > 1) {\r\n            return treatDefaultAsFactory && isFunction(defaultValue)\r\n                ? defaultValue.call(instance)\r\n                : defaultValue;\r\n        }\r\n        else if (true) {\r\n            warn$2(\"injection \\\"\".concat(String(key), \"\\\" not found.\"));\r\n        }\r\n    }\r\n    else if (true) {\r\n        warn$2(\"inject() can only be used inside setup() or functional components.\");\r\n    }\r\n}\n\n/**\r\n * @internal this function needs manual public type declaration because it relies\r\n * on previously manually authored types from Vue 2\r\n */\r\nfunction h(type, props, children) {\r\n    if (!currentInstance) {\r\n         true &&\r\n            warn$2(\"globally imported h() can only be invoked when there is an active \" +\r\n                \"component instance, e.g. synchronously in a component's render or setup function.\");\r\n    }\r\n    return createElement$1(currentInstance, type, props, children, 2, true);\r\n}\n\nfunction handleError(err, vm, info) {\r\n    // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\r\n    // See: https://github.com/vuejs/vuex/issues/1505\r\n    pushTarget();\r\n    try {\r\n        if (vm) {\r\n            var cur = vm;\r\n            while ((cur = cur.$parent)) {\r\n                var hooks = cur.$options.errorCaptured;\r\n                if (hooks) {\r\n                    for (var i = 0; i < hooks.length; i++) {\r\n                        try {\r\n                            var capture = hooks[i].call(cur, err, vm, info) === false;\r\n                            if (capture)\r\n                                return;\r\n                        }\r\n                        catch (e) {\r\n                            globalHandleError(e, cur, 'errorCaptured hook');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        globalHandleError(err, vm, info);\r\n    }\r\n    finally {\r\n        popTarget();\r\n    }\r\n}\r\nfunction invokeWithErrorHandling(handler, context, args, vm, info) {\r\n    var res;\r\n    try {\r\n        res = args ? handler.apply(context, args) : handler.call(context);\r\n        if (res && !res._isVue && isPromise(res) && !res._handled) {\r\n            res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\r\n            res._handled = true;\r\n        }\r\n    }\r\n    catch (e) {\r\n        handleError(e, vm, info);\r\n    }\r\n    return res;\r\n}\r\nfunction globalHandleError(err, vm, info) {\r\n    if (config.errorHandler) {\r\n        try {\r\n            return config.errorHandler.call(null, err, vm, info);\r\n        }\r\n        catch (e) {\r\n            // if the user intentionally throws the original error in the handler,\r\n            // do not log it twice\r\n            if (e !== err) {\r\n                logError(e, null, 'config.errorHandler');\r\n            }\r\n        }\r\n    }\r\n    logError(err, vm, info);\r\n}\r\nfunction logError(err, vm, info) {\r\n    if (true) {\r\n        warn$2(\"Error in \".concat(info, \": \\\"\").concat(err.toString(), \"\\\"\"), vm);\r\n    }\r\n    /* istanbul ignore else */\r\n    if (inBrowser && typeof console !== 'undefined') {\r\n        console.error(err);\r\n    }\r\n    else {\r\n        throw err;\r\n    }\r\n}\n\n/* globals MutationObserver */\r\nvar isUsingMicroTask = false;\r\nvar callbacks = [];\r\nvar pending = false;\r\nfunction flushCallbacks() {\r\n    pending = false;\r\n    var copies = callbacks.slice(0);\r\n    callbacks.length = 0;\r\n    for (var i = 0; i < copies.length; i++) {\r\n        copies[i]();\r\n    }\r\n}\r\n// Here we have async deferring wrappers using microtasks.\r\n// In 2.5 we used (macro) tasks (in combination with microtasks).\r\n// However, it has subtle problems when state is changed right before repaint\r\n// (e.g. #6813, out-in transitions).\r\n// Also, using (macro) tasks in event handler would cause some weird behaviors\r\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\r\n// So we now use microtasks everywhere, again.\r\n// A major drawback of this tradeoff is that there are some scenarios\r\n// where microtasks have too high a priority and fire in between supposedly\r\n// sequential events (e.g. #4521, #6690, which have workarounds)\r\n// or even between bubbling of the same event (#6566).\r\nvar timerFunc;\r\n// The nextTick behavior leverages the microtask queue, which can be accessed\r\n// via either native Promise.then or MutationObserver.\r\n// MutationObserver has wider support, however it is seriously bugged in\r\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\r\n// completely stops working after triggering a few times... so, if native\r\n// Promise is available, we will use it:\r\n/* istanbul ignore next, $flow-disable-line */\r\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\r\n    var p_1 = Promise.resolve();\r\n    timerFunc = function () {\r\n        p_1.then(flushCallbacks);\r\n        // In problematic UIWebViews, Promise.then doesn't completely break, but\r\n        // it can get stuck in a weird state where callbacks are pushed into the\r\n        // microtask queue but the queue isn't being flushed, until the browser\r\n        // needs to do some other work, e.g. handle a timer. Therefore we can\r\n        // \"force\" the microtask queue to be flushed by adding an empty timer.\r\n        if (isIOS)\r\n            setTimeout(noop);\r\n    };\r\n    isUsingMicroTask = true;\r\n}\r\nelse if (!isIE &&\r\n    typeof MutationObserver !== 'undefined' &&\r\n    (isNative(MutationObserver) ||\r\n        // PhantomJS and iOS 7.x\r\n        MutationObserver.toString() === '[object MutationObserverConstructor]')) {\r\n    // Use MutationObserver where native Promise is not available,\r\n    // e.g. PhantomJS, iOS7, Android 4.4\r\n    // (#6466 MutationObserver is unreliable in IE11)\r\n    var counter_1 = 1;\r\n    var observer = new MutationObserver(flushCallbacks);\r\n    var textNode_1 = document.createTextNode(String(counter_1));\r\n    observer.observe(textNode_1, {\r\n        characterData: true\r\n    });\r\n    timerFunc = function () {\r\n        counter_1 = (counter_1 + 1) % 2;\r\n        textNode_1.data = String(counter_1);\r\n    };\r\n    isUsingMicroTask = true;\r\n}\r\nelse if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\r\n    // Fallback to setImmediate.\r\n    // Technically it leverages the (macro) task queue,\r\n    // but it is still a better choice than setTimeout.\r\n    timerFunc = function () {\r\n        setImmediate(flushCallbacks);\r\n    };\r\n}\r\nelse {\r\n    // Fallback to setTimeout.\r\n    timerFunc = function () {\r\n        setTimeout(flushCallbacks, 0);\r\n    };\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction nextTick(cb, ctx) {\r\n    var _resolve;\r\n    callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(ctx);\r\n            }\r\n            catch (e) {\r\n                handleError(e, ctx, 'nextTick');\r\n            }\r\n        }\r\n        else if (_resolve) {\r\n            _resolve(ctx);\r\n        }\r\n    });\r\n    if (!pending) {\r\n        pending = true;\r\n        timerFunc();\r\n    }\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        });\r\n    }\r\n}\n\nfunction useCssModule(name) {\r\n    if (name === void 0) { name = '$style'; }\r\n    /* istanbul ignore else */\r\n    {\r\n        if (!currentInstance) {\r\n             true && warn$2(\"useCssModule must be called inside setup()\");\r\n            return emptyObject;\r\n        }\r\n        var mod = currentInstance[name];\r\n        if (!mod) {\r\n             true &&\r\n                warn$2(\"Current instance does not have CSS module named \\\"\".concat(name, \"\\\".\"));\r\n            return emptyObject;\r\n        }\r\n        return mod;\r\n    }\r\n}\n\n/**\r\n * Runtime helper for SFC's CSS variable injection feature.\r\n * @private\r\n */\r\nfunction useCssVars(getter) {\r\n    if (!inBrowser && !false)\r\n        return;\r\n    var instance = currentInstance;\r\n    if (!instance) {\r\n         true &&\r\n            warn$2(\"useCssVars is called without current active component instance.\");\r\n        return;\r\n    }\r\n    watchPostEffect(function () {\r\n        var el = instance.$el;\r\n        var vars = getter(instance, instance._setupProxy);\r\n        if (el && el.nodeType === 1) {\r\n            var style = el.style;\r\n            for (var key in vars) {\r\n                style.setProperty(\"--\".concat(key), vars[key]);\r\n            }\r\n        }\r\n    });\r\n}\n\n/**\r\n * v3-compatible async component API.\r\n * @internal the type is manually declared in <root>/types/v3-define-async-component.d.ts\r\n * because it relies on existing manual types\r\n */\r\nfunction defineAsyncComponent(source) {\r\n    if (isFunction(source)) {\r\n        source = { loader: source };\r\n    }\r\n    var loader = source.loader, loadingComponent = source.loadingComponent, errorComponent = source.errorComponent, _a = source.delay, delay = _a === void 0 ? 200 : _a, timeout = source.timeout, // undefined = never times out\r\n    _b = source.suspensible, // undefined = never times out\r\n    suspensible = _b === void 0 ? false : _b, // in Vue 3 default is true\r\n    userOnError = source.onError;\r\n    if ( true && suspensible) {\r\n        warn$2(\"The suspensiblbe option for async components is not supported in Vue2. It is ignored.\");\r\n    }\r\n    var pendingRequest = null;\r\n    var retries = 0;\r\n    var retry = function () {\r\n        retries++;\r\n        pendingRequest = null;\r\n        return load();\r\n    };\r\n    var load = function () {\r\n        var thisRequest;\r\n        return (pendingRequest ||\r\n            (thisRequest = pendingRequest =\r\n                loader()\r\n                    .catch(function (err) {\r\n                    err = err instanceof Error ? err : new Error(String(err));\r\n                    if (userOnError) {\r\n                        return new Promise(function (resolve, reject) {\r\n                            var userRetry = function () { return resolve(retry()); };\r\n                            var userFail = function () { return reject(err); };\r\n                            userOnError(err, userRetry, userFail, retries + 1);\r\n                        });\r\n                    }\r\n                    else {\r\n                        throw err;\r\n                    }\r\n                })\r\n                    .then(function (comp) {\r\n                    if (thisRequest !== pendingRequest && pendingRequest) {\r\n                        return pendingRequest;\r\n                    }\r\n                    if ( true && !comp) {\r\n                        warn$2(\"Async component loader resolved to undefined. \" +\r\n                            \"If you are using retry(), make sure to return its return value.\");\r\n                    }\r\n                    // interop module default\r\n                    if (comp &&\r\n                        (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) {\r\n                        comp = comp.default;\r\n                    }\r\n                    if ( true && comp && !isObject(comp) && !isFunction(comp)) {\r\n                        throw new Error(\"Invalid async component load result: \".concat(comp));\r\n                    }\r\n                    return comp;\r\n                })));\r\n    };\r\n    return function () {\r\n        var component = load();\r\n        return {\r\n            component: component,\r\n            delay: delay,\r\n            timeout: timeout,\r\n            error: errorComponent,\r\n            loading: loadingComponent\r\n        };\r\n    };\r\n}\n\nfunction createLifeCycle(hookName) {\r\n    return function (fn, target) {\r\n        if (target === void 0) { target = currentInstance; }\r\n        if (!target) {\r\n             true &&\r\n                warn$2(\"\".concat(formatName(hookName), \" is called when there is no active component instance to be \") +\r\n                    \"associated with. \" +\r\n                    \"Lifecycle injection APIs can only be used during execution of setup().\");\r\n            return;\r\n        }\r\n        return injectHook(target, hookName, fn);\r\n    };\r\n}\r\nfunction formatName(name) {\r\n    if (name === 'beforeDestroy') {\r\n        name = 'beforeUnmount';\r\n    }\r\n    else if (name === 'destroyed') {\r\n        name = 'unmounted';\r\n    }\r\n    return \"on\".concat(name[0].toUpperCase() + name.slice(1));\r\n}\r\nfunction injectHook(instance, hookName, fn) {\r\n    var options = instance.$options;\r\n    options[hookName] = mergeLifecycleHook(options[hookName], fn);\r\n}\r\nvar onBeforeMount = createLifeCycle('beforeMount');\r\nvar onMounted = createLifeCycle('mounted');\r\nvar onBeforeUpdate = createLifeCycle('beforeUpdate');\r\nvar onUpdated = createLifeCycle('updated');\r\nvar onBeforeUnmount = createLifeCycle('beforeDestroy');\r\nvar onUnmounted = createLifeCycle('destroyed');\r\nvar onErrorCaptured = createLifeCycle('errorCaptured');\r\nvar onActivated = createLifeCycle('activated');\r\nvar onDeactivated = createLifeCycle('deactivated');\r\nvar onServerPrefetch = createLifeCycle('serverPrefetch');\r\nvar onRenderTracked = createLifeCycle('renderTracked');\r\nvar onRenderTriggered = createLifeCycle('renderTriggered');\n\n/**\r\n * Note: also update dist/vue.runtime.mjs when adding new exports to this file.\r\n */\r\nvar version = '2.7.8';\r\n/**\r\n * @internal type is manually declared in <root>/types/v3-define-component.d.ts\r\n */\r\nfunction defineComponent(options) {\r\n    return options;\r\n}\n\nvar seenObjects = new _Set();\r\n/**\r\n * Recursively traverse an object to evoke all converted\r\n * getters, so that every nested property inside the object\r\n * is collected as a \"deep\" dependency.\r\n */\r\nfunction traverse(val) {\r\n    _traverse(val, seenObjects);\r\n    seenObjects.clear();\r\n    return val;\r\n}\r\nfunction _traverse(val, seen) {\r\n    var i, keys;\r\n    var isA = isArray(val);\r\n    if ((!isA && !isObject(val)) ||\r\n        Object.isFrozen(val) ||\r\n        val instanceof VNode) {\r\n        return;\r\n    }\r\n    if (val.__ob__) {\r\n        var depId = val.__ob__.dep.id;\r\n        if (seen.has(depId)) {\r\n            return;\r\n        }\r\n        seen.add(depId);\r\n    }\r\n    if (isA) {\r\n        i = val.length;\r\n        while (i--)\r\n            _traverse(val[i], seen);\r\n    }\r\n    else if (isRef(val)) {\r\n        _traverse(val.value, seen);\r\n    }\r\n    else {\r\n        keys = Object.keys(val);\r\n        i = keys.length;\r\n        while (i--)\r\n            _traverse(val[keys[i]], seen);\r\n    }\r\n}\n\nvar uid$1 = 0;\r\n/**\r\n * A watcher parses an expression, collects dependencies,\r\n * and fires callback when the expression value changes.\r\n * This is used for both the $watch() api and directives.\r\n * @internal\r\n */\r\nvar Watcher = /** @class */ (function () {\r\n    function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {\r\n        recordEffectScope(this, activeEffectScope || (vm ? vm._scope : undefined));\r\n        if ((this.vm = vm)) {\r\n            if (isRenderWatcher) {\r\n                vm._watcher = this;\r\n            }\r\n        }\r\n        // options\r\n        if (options) {\r\n            this.deep = !!options.deep;\r\n            this.user = !!options.user;\r\n            this.lazy = !!options.lazy;\r\n            this.sync = !!options.sync;\r\n            this.before = options.before;\r\n            if (true) {\r\n                this.onTrack = options.onTrack;\r\n                this.onTrigger = options.onTrigger;\r\n            }\r\n        }\r\n        else {\r\n            this.deep = this.user = this.lazy = this.sync = false;\r\n        }\r\n        this.cb = cb;\r\n        this.id = ++uid$1; // uid for batching\r\n        this.active = true;\r\n        this.post = false;\r\n        this.dirty = this.lazy; // for lazy watchers\r\n        this.deps = [];\r\n        this.newDeps = [];\r\n        this.depIds = new _Set();\r\n        this.newDepIds = new _Set();\r\n        this.expression =  true ? expOrFn.toString() : 0;\r\n        // parse expression for getter\r\n        if (isFunction(expOrFn)) {\r\n            this.getter = expOrFn;\r\n        }\r\n        else {\r\n            this.getter = parsePath(expOrFn);\r\n            if (!this.getter) {\r\n                this.getter = noop;\r\n                 true &&\r\n                    warn$2(\"Failed watching path: \\\"\".concat(expOrFn, \"\\\" \") +\r\n                        'Watcher only accepts simple dot-delimited paths. ' +\r\n                        'For full control, use a function instead.', vm);\r\n            }\r\n        }\r\n        this.value = this.lazy ? undefined : this.get();\r\n    }\r\n    /**\r\n     * Evaluate the getter, and re-collect dependencies.\r\n     */\r\n    Watcher.prototype.get = function () {\r\n        pushTarget(this);\r\n        var value;\r\n        var vm = this.vm;\r\n        try {\r\n            value = this.getter.call(vm, vm);\r\n        }\r\n        catch (e) {\r\n            if (this.user) {\r\n                handleError(e, vm, \"getter for watcher \\\"\".concat(this.expression, \"\\\"\"));\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        finally {\r\n            // \"touch\" every property so they are all tracked as\r\n            // dependencies for deep watching\r\n            if (this.deep) {\r\n                traverse(value);\r\n            }\r\n            popTarget();\r\n            this.cleanupDeps();\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Add a dependency to this directive.\r\n     */\r\n    Watcher.prototype.addDep = function (dep) {\r\n        var id = dep.id;\r\n        if (!this.newDepIds.has(id)) {\r\n            this.newDepIds.add(id);\r\n            this.newDeps.push(dep);\r\n            if (!this.depIds.has(id)) {\r\n                dep.addSub(this);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Clean up for dependency collection.\r\n     */\r\n    Watcher.prototype.cleanupDeps = function () {\r\n        var i = this.deps.length;\r\n        while (i--) {\r\n            var dep = this.deps[i];\r\n            if (!this.newDepIds.has(dep.id)) {\r\n                dep.removeSub(this);\r\n            }\r\n        }\r\n        var tmp = this.depIds;\r\n        this.depIds = this.newDepIds;\r\n        this.newDepIds = tmp;\r\n        this.newDepIds.clear();\r\n        tmp = this.deps;\r\n        this.deps = this.newDeps;\r\n        this.newDeps = tmp;\r\n        this.newDeps.length = 0;\r\n    };\r\n    /**\r\n     * Subscriber interface.\r\n     * Will be called when a dependency changes.\r\n     */\r\n    Watcher.prototype.update = function () {\r\n        /* istanbul ignore else */\r\n        if (this.lazy) {\r\n            this.dirty = true;\r\n        }\r\n        else if (this.sync) {\r\n            this.run();\r\n        }\r\n        else {\r\n            queueWatcher(this);\r\n        }\r\n    };\r\n    /**\r\n     * Scheduler job interface.\r\n     * Will be called by the scheduler.\r\n     */\r\n    Watcher.prototype.run = function () {\r\n        if (this.active) {\r\n            var value = this.get();\r\n            if (value !== this.value ||\r\n                // Deep watchers and watchers on Object/Arrays should fire even\r\n                // when the value is the same, because the value may\r\n                // have mutated.\r\n                isObject(value) ||\r\n                this.deep) {\r\n                // set new value\r\n                var oldValue = this.value;\r\n                this.value = value;\r\n                if (this.user) {\r\n                    var info = \"callback for watcher \\\"\".concat(this.expression, \"\\\"\");\r\n                    invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);\r\n                }\r\n                else {\r\n                    this.cb.call(this.vm, value, oldValue);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Evaluate the value of the watcher.\r\n     * This only gets called for lazy watchers.\r\n     */\r\n    Watcher.prototype.evaluate = function () {\r\n        this.value = this.get();\r\n        this.dirty = false;\r\n    };\r\n    /**\r\n     * Depend on all deps collected by this watcher.\r\n     */\r\n    Watcher.prototype.depend = function () {\r\n        var i = this.deps.length;\r\n        while (i--) {\r\n            this.deps[i].depend();\r\n        }\r\n    };\r\n    /**\r\n     * Remove self from all dependencies' subscriber list.\r\n     */\r\n    Watcher.prototype.teardown = function () {\r\n        if (this.vm && !this.vm._isBeingDestroyed) {\r\n            remove$2(this.vm._scope.effects, this);\r\n        }\r\n        if (this.active) {\r\n            var i = this.deps.length;\r\n            while (i--) {\r\n                this.deps[i].removeSub(this);\r\n            }\r\n            this.active = false;\r\n            if (this.onStop) {\r\n                this.onStop();\r\n            }\r\n        }\r\n    };\r\n    return Watcher;\r\n}());\n\nvar sharedPropertyDefinition = {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get: noop,\r\n    set: noop\r\n};\r\nfunction proxy(target, sourceKey, key) {\r\n    sharedPropertyDefinition.get = function proxyGetter() {\r\n        return this[sourceKey][key];\r\n    };\r\n    sharedPropertyDefinition.set = function proxySetter(val) {\r\n        this[sourceKey][key] = val;\r\n    };\r\n    Object.defineProperty(target, key, sharedPropertyDefinition);\r\n}\r\nfunction initState(vm) {\r\n    var opts = vm.$options;\r\n    if (opts.props)\r\n        initProps$1(vm, opts.props);\r\n    // Composition API\r\n    initSetup(vm);\r\n    if (opts.methods)\r\n        initMethods(vm, opts.methods);\r\n    if (opts.data) {\r\n        initData(vm);\r\n    }\r\n    else {\r\n        var ob = observe((vm._data = {}));\r\n        ob && ob.vmCount++;\r\n    }\r\n    if (opts.computed)\r\n        initComputed$1(vm, opts.computed);\r\n    if (opts.watch && opts.watch !== nativeWatch) {\r\n        initWatch(vm, opts.watch);\r\n    }\r\n}\r\nfunction initProps$1(vm, propsOptions) {\r\n    var propsData = vm.$options.propsData || {};\r\n    var props = (vm._props = shallowReactive({}));\r\n    // cache prop keys so that future props updates can iterate using Array\r\n    // instead of dynamic object key enumeration.\r\n    var keys = (vm.$options._propKeys = []);\r\n    var isRoot = !vm.$parent;\r\n    // root instance props should be converted\r\n    if (!isRoot) {\r\n        toggleObserving(false);\r\n    }\r\n    var _loop_1 = function (key) {\r\n        keys.push(key);\r\n        var value = validateProp(key, propsOptions, propsData, vm);\r\n        /* istanbul ignore else */\r\n        if (true) {\r\n            var hyphenatedKey = hyphenate(key);\r\n            if (isReservedAttribute(hyphenatedKey) ||\r\n                config.isReservedAttr(hyphenatedKey)) {\r\n                warn$2(\"\\\"\".concat(hyphenatedKey, \"\\\" is a reserved attribute and cannot be used as component prop.\"), vm);\r\n            }\r\n            defineReactive(props, key, value, function () {\r\n                if (!isRoot && !isUpdatingChildComponent) {\r\n                    warn$2(\"Avoid mutating a prop directly since the value will be \" +\r\n                        \"overwritten whenever the parent component re-renders. \" +\r\n                        \"Instead, use a data or computed property based on the prop's \" +\r\n                        \"value. Prop being mutated: \\\"\".concat(key, \"\\\"\"), vm);\r\n                }\r\n            });\r\n        }\r\n        else {}\r\n        // static props are already proxied on the component's prototype\r\n        // during Vue.extend(). We only need to proxy props defined at\r\n        // instantiation here.\r\n        if (!(key in vm)) {\r\n            proxy(vm, \"_props\", key);\r\n        }\r\n    };\r\n    for (var key in propsOptions) {\r\n        _loop_1(key);\r\n    }\r\n    toggleObserving(true);\r\n}\r\nfunction initData(vm) {\r\n    var data = vm.$options.data;\r\n    data = vm._data = isFunction(data) ? getData(data, vm) : data || {};\r\n    if (!isPlainObject(data)) {\r\n        data = {};\r\n         true &&\r\n            warn$2('data functions should return an object:\\n' +\r\n                'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);\r\n    }\r\n    // proxy data on instance\r\n    var keys = Object.keys(data);\r\n    var props = vm.$options.props;\r\n    var methods = vm.$options.methods;\r\n    var i = keys.length;\r\n    while (i--) {\r\n        var key = keys[i];\r\n        if (true) {\r\n            if (methods && hasOwn(methods, key)) {\r\n                warn$2(\"Method \\\"\".concat(key, \"\\\" has already been defined as a data property.\"), vm);\r\n            }\r\n        }\r\n        if (props && hasOwn(props, key)) {\r\n             true &&\r\n                warn$2(\"The data property \\\"\".concat(key, \"\\\" is already declared as a prop. \") +\r\n                    \"Use prop default value instead.\", vm);\r\n        }\r\n        else if (!isReserved(key)) {\r\n            proxy(vm, \"_data\", key);\r\n        }\r\n    }\r\n    // observe data\r\n    var ob = observe(data);\r\n    ob && ob.vmCount++;\r\n}\r\nfunction getData(data, vm) {\r\n    // #7573 disable dep collection when invoking data getters\r\n    pushTarget();\r\n    try {\r\n        return data.call(vm, vm);\r\n    }\r\n    catch (e) {\r\n        handleError(e, vm, \"data()\");\r\n        return {};\r\n    }\r\n    finally {\r\n        popTarget();\r\n    }\r\n}\r\nvar computedWatcherOptions = { lazy: true };\r\nfunction initComputed$1(vm, computed) {\r\n    // $flow-disable-line\r\n    var watchers = (vm._computedWatchers = Object.create(null));\r\n    // computed properties are just getters during SSR\r\n    var isSSR = isServerRendering();\r\n    for (var key in computed) {\r\n        var userDef = computed[key];\r\n        var getter = isFunction(userDef) ? userDef : userDef.get;\r\n        if ( true && getter == null) {\r\n            warn$2(\"Getter is missing for computed property \\\"\".concat(key, \"\\\".\"), vm);\r\n        }\r\n        if (!isSSR) {\r\n            // create internal watcher for the computed property.\r\n            watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);\r\n        }\r\n        // component-defined computed properties are already defined on the\r\n        // component prototype. We only need to define computed properties defined\r\n        // at instantiation here.\r\n        if (!(key in vm)) {\r\n            defineComputed(vm, key, userDef);\r\n        }\r\n        else if (true) {\r\n            if (key in vm.$data) {\r\n                warn$2(\"The computed property \\\"\".concat(key, \"\\\" is already defined in data.\"), vm);\r\n            }\r\n            else if (vm.$options.props && key in vm.$options.props) {\r\n                warn$2(\"The computed property \\\"\".concat(key, \"\\\" is already defined as a prop.\"), vm);\r\n            }\r\n            else if (vm.$options.methods && key in vm.$options.methods) {\r\n                warn$2(\"The computed property \\\"\".concat(key, \"\\\" is already defined as a method.\"), vm);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction defineComputed(target, key, userDef) {\r\n    var shouldCache = !isServerRendering();\r\n    if (isFunction(userDef)) {\r\n        sharedPropertyDefinition.get = shouldCache\r\n            ? createComputedGetter(key)\r\n            : createGetterInvoker(userDef);\r\n        sharedPropertyDefinition.set = noop;\r\n    }\r\n    else {\r\n        sharedPropertyDefinition.get = userDef.get\r\n            ? shouldCache && userDef.cache !== false\r\n                ? createComputedGetter(key)\r\n                : createGetterInvoker(userDef.get)\r\n            : noop;\r\n        sharedPropertyDefinition.set = userDef.set || noop;\r\n    }\r\n    if ( true && sharedPropertyDefinition.set === noop) {\r\n        sharedPropertyDefinition.set = function () {\r\n            warn$2(\"Computed property \\\"\".concat(key, \"\\\" was assigned to but it has no setter.\"), this);\r\n        };\r\n    }\r\n    Object.defineProperty(target, key, sharedPropertyDefinition);\r\n}\r\nfunction createComputedGetter(key) {\r\n    return function computedGetter() {\r\n        var watcher = this._computedWatchers && this._computedWatchers[key];\r\n        if (watcher) {\r\n            if (watcher.dirty) {\r\n                watcher.evaluate();\r\n            }\r\n            if (Dep.target) {\r\n                if ( true && Dep.target.onTrack) {\r\n                    Dep.target.onTrack({\r\n                        effect: Dep.target,\r\n                        target: this,\r\n                        type: \"get\" /* TrackOpTypes.GET */,\r\n                        key: key\r\n                    });\r\n                }\r\n                watcher.depend();\r\n            }\r\n            return watcher.value;\r\n        }\r\n    };\r\n}\r\nfunction createGetterInvoker(fn) {\r\n    return function computedGetter() {\r\n        return fn.call(this, this);\r\n    };\r\n}\r\nfunction initMethods(vm, methods) {\r\n    var props = vm.$options.props;\r\n    for (var key in methods) {\r\n        if (true) {\r\n            if (typeof methods[key] !== 'function') {\r\n                warn$2(\"Method \\\"\".concat(key, \"\\\" has type \\\"\").concat(typeof methods[key], \"\\\" in the component definition. \") +\r\n                    \"Did you reference the function correctly?\", vm);\r\n            }\r\n            if (props && hasOwn(props, key)) {\r\n                warn$2(\"Method \\\"\".concat(key, \"\\\" has already been defined as a prop.\"), vm);\r\n            }\r\n            if (key in vm && isReserved(key)) {\r\n                warn$2(\"Method \\\"\".concat(key, \"\\\" conflicts with an existing Vue instance method. \") +\r\n                    \"Avoid defining component methods that start with _ or $.\");\r\n            }\r\n        }\r\n        vm[key] = typeof methods[key] !== 'function' ? noop : bind$1(methods[key], vm);\r\n    }\r\n}\r\nfunction initWatch(vm, watch) {\r\n    for (var key in watch) {\r\n        var handler = watch[key];\r\n        if (isArray(handler)) {\r\n            for (var i = 0; i < handler.length; i++) {\r\n                createWatcher(vm, key, handler[i]);\r\n            }\r\n        }\r\n        else {\r\n            createWatcher(vm, key, handler);\r\n        }\r\n    }\r\n}\r\nfunction createWatcher(vm, expOrFn, handler, options) {\r\n    if (isPlainObject(handler)) {\r\n        options = handler;\r\n        handler = handler.handler;\r\n    }\r\n    if (typeof handler === 'string') {\r\n        handler = vm[handler];\r\n    }\r\n    return vm.$watch(expOrFn, handler, options);\r\n}\r\nfunction stateMixin(Vue) {\r\n    // flow somehow has problems with directly declared definition object\r\n    // when using Object.defineProperty, so we have to procedurally build up\r\n    // the object here.\r\n    var dataDef = {};\r\n    dataDef.get = function () {\r\n        return this._data;\r\n    };\r\n    var propsDef = {};\r\n    propsDef.get = function () {\r\n        return this._props;\r\n    };\r\n    if (true) {\r\n        dataDef.set = function () {\r\n            warn$2('Avoid replacing instance root $data. ' +\r\n                'Use nested data properties instead.', this);\r\n        };\r\n        propsDef.set = function () {\r\n            warn$2(\"$props is readonly.\", this);\r\n        };\r\n    }\r\n    Object.defineProperty(Vue.prototype, '$data', dataDef);\r\n    Object.defineProperty(Vue.prototype, '$props', propsDef);\r\n    Vue.prototype.$set = set;\r\n    Vue.prototype.$delete = del;\r\n    Vue.prototype.$watch = function (expOrFn, cb, options) {\r\n        var vm = this;\r\n        if (isPlainObject(cb)) {\r\n            return createWatcher(vm, expOrFn, cb, options);\r\n        }\r\n        options = options || {};\r\n        options.user = true;\r\n        var watcher = new Watcher(vm, expOrFn, cb, options);\r\n        if (options.immediate) {\r\n            var info = \"callback for immediate watcher \\\"\".concat(watcher.expression, \"\\\"\");\r\n            pushTarget();\r\n            invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);\r\n            popTarget();\r\n        }\r\n        return function unwatchFn() {\r\n            watcher.teardown();\r\n        };\r\n    };\r\n}\n\nfunction initProvide(vm) {\r\n    var provideOption = vm.$options.provide;\r\n    if (provideOption) {\r\n        var provided = isFunction(provideOption)\r\n            ? provideOption.call(vm)\r\n            : provideOption;\r\n        if (!isObject(provided)) {\r\n            return;\r\n        }\r\n        var source = resolveProvided(vm);\r\n        // IE9 doesn't support Object.getOwnPropertyDescriptors so we have to\r\n        // iterate the keys ourselves.\r\n        var keys = hasSymbol ? Reflect.ownKeys(provided) : Object.keys(provided);\r\n        for (var i = 0; i < keys.length; i++) {\r\n            var key = keys[i];\r\n            Object.defineProperty(source, key, Object.getOwnPropertyDescriptor(provided, key));\r\n        }\r\n    }\r\n}\r\nfunction initInjections(vm) {\r\n    var result = resolveInject(vm.$options.inject, vm);\r\n    if (result) {\r\n        toggleObserving(false);\r\n        Object.keys(result).forEach(function (key) {\r\n            /* istanbul ignore else */\r\n            if (true) {\r\n                defineReactive(vm, key, result[key], function () {\r\n                    warn$2(\"Avoid mutating an injected value directly since the changes will be \" +\r\n                        \"overwritten whenever the provided component re-renders. \" +\r\n                        \"injection being mutated: \\\"\".concat(key, \"\\\"\"), vm);\r\n                });\r\n            }\r\n            else {}\r\n        });\r\n        toggleObserving(true);\r\n    }\r\n}\r\nfunction resolveInject(inject, vm) {\r\n    if (inject) {\r\n        // inject is :any because flow is not smart enough to figure out cached\r\n        var result = Object.create(null);\r\n        var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);\r\n        for (var i = 0; i < keys.length; i++) {\r\n            var key = keys[i];\r\n            // #6574 in case the inject object is observed...\r\n            if (key === '__ob__')\r\n                continue;\r\n            var provideKey = inject[key].from;\r\n            if (provideKey in vm._provided) {\r\n                result[key] = vm._provided[provideKey];\r\n            }\r\n            else if ('default' in inject[key]) {\r\n                var provideDefault = inject[key].default;\r\n                result[key] = isFunction(provideDefault)\r\n                    ? provideDefault.call(vm)\r\n                    : provideDefault;\r\n            }\r\n            else if (true) {\r\n                warn$2(\"Injection \\\"\".concat(key, \"\\\" not found\"), vm);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\n\nvar uid = 0;\r\nfunction initMixin$1(Vue) {\r\n    Vue.prototype._init = function (options) {\r\n        var vm = this;\r\n        // a uid\r\n        vm._uid = uid++;\r\n        var startTag, endTag;\r\n        /* istanbul ignore if */\r\n        if ( true && config.performance && mark) {\r\n            startTag = \"vue-perf-start:\".concat(vm._uid);\r\n            endTag = \"vue-perf-end:\".concat(vm._uid);\r\n            mark(startTag);\r\n        }\r\n        // a flag to mark this as a Vue instance without having to do instanceof\r\n        // check\r\n        vm._isVue = true;\r\n        // avoid instances from being observed\r\n        vm.__v_skip = true;\r\n        // effect scope\r\n        vm._scope = new EffectScope(true /* detached */);\r\n        // merge options\r\n        if (options && options._isComponent) {\r\n            // optimize internal component instantiation\r\n            // since dynamic options merging is pretty slow, and none of the\r\n            // internal component options needs special treatment.\r\n            initInternalComponent(vm, options);\r\n        }\r\n        else {\r\n            vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);\r\n        }\r\n        /* istanbul ignore else */\r\n        if (true) {\r\n            initProxy(vm);\r\n        }\r\n        else {}\r\n        // expose real self\r\n        vm._self = vm;\r\n        initLifecycle(vm);\r\n        initEvents(vm);\r\n        initRender(vm);\r\n        callHook$1(vm, 'beforeCreate', undefined, false /* setContext */);\r\n        initInjections(vm); // resolve injections before data/props\r\n        initState(vm);\r\n        initProvide(vm); // resolve provide after data/props\r\n        callHook$1(vm, 'created');\r\n        /* istanbul ignore if */\r\n        if ( true && config.performance && mark) {\r\n            vm._name = formatComponentName(vm, false);\r\n            mark(endTag);\r\n            measure(\"vue \".concat(vm._name, \" init\"), startTag, endTag);\r\n        }\r\n        if (vm.$options.el) {\r\n            vm.$mount(vm.$options.el);\r\n        }\r\n    };\r\n}\r\nfunction initInternalComponent(vm, options) {\r\n    var opts = (vm.$options = Object.create(vm.constructor.options));\r\n    // doing this because it's faster than dynamic enumeration.\r\n    var parentVnode = options._parentVnode;\r\n    opts.parent = options.parent;\r\n    opts._parentVnode = parentVnode;\r\n    var vnodeComponentOptions = parentVnode.componentOptions;\r\n    opts.propsData = vnodeComponentOptions.propsData;\r\n    opts._parentListeners = vnodeComponentOptions.listeners;\r\n    opts._renderChildren = vnodeComponentOptions.children;\r\n    opts._componentTag = vnodeComponentOptions.tag;\r\n    if (options.render) {\r\n        opts.render = options.render;\r\n        opts.staticRenderFns = options.staticRenderFns;\r\n    }\r\n}\r\nfunction resolveConstructorOptions(Ctor) {\r\n    var options = Ctor.options;\r\n    if (Ctor.super) {\r\n        var superOptions = resolveConstructorOptions(Ctor.super);\r\n        var cachedSuperOptions = Ctor.superOptions;\r\n        if (superOptions !== cachedSuperOptions) {\r\n            // super option changed,\r\n            // need to resolve new options.\r\n            Ctor.superOptions = superOptions;\r\n            // check if there are any late-modified/attached options (#4976)\r\n            var modifiedOptions = resolveModifiedOptions(Ctor);\r\n            // update base extend options\r\n            if (modifiedOptions) {\r\n                extend(Ctor.extendOptions, modifiedOptions);\r\n            }\r\n            options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\r\n            if (options.name) {\r\n                options.components[options.name] = Ctor;\r\n            }\r\n        }\r\n    }\r\n    return options;\r\n}\r\nfunction resolveModifiedOptions(Ctor) {\r\n    var modified;\r\n    var latest = Ctor.options;\r\n    var sealed = Ctor.sealedOptions;\r\n    for (var key in latest) {\r\n        if (latest[key] !== sealed[key]) {\r\n            if (!modified)\r\n                modified = {};\r\n            modified[key] = latest[key];\r\n        }\r\n    }\r\n    return modified;\r\n}\n\nfunction FunctionalRenderContext(data, props, children, parent, Ctor) {\r\n    var _this = this;\r\n    var options = Ctor.options;\r\n    // ensure the createElement function in functional components\r\n    // gets a unique context - this is necessary for correct named slot check\r\n    var contextVm;\r\n    if (hasOwn(parent, '_uid')) {\r\n        contextVm = Object.create(parent);\r\n        contextVm._original = parent;\r\n    }\r\n    else {\r\n        // the context vm passed in is a functional context as well.\r\n        // in this case we want to make sure we are able to get a hold to the\r\n        // real context instance.\r\n        contextVm = parent;\r\n        // @ts-ignore\r\n        parent = parent._original;\r\n    }\r\n    var isCompiled = isTrue(options._compiled);\r\n    var needNormalization = !isCompiled;\r\n    this.data = data;\r\n    this.props = props;\r\n    this.children = children;\r\n    this.parent = parent;\r\n    this.listeners = data.on || emptyObject;\r\n    this.injections = resolveInject(options.inject, parent);\r\n    this.slots = function () {\r\n        if (!_this.$slots) {\r\n            normalizeScopedSlots(parent, data.scopedSlots, (_this.$slots = resolveSlots(children, parent)));\r\n        }\r\n        return _this.$slots;\r\n    };\r\n    Object.defineProperty(this, 'scopedSlots', {\r\n        enumerable: true,\r\n        get: function () {\r\n            return normalizeScopedSlots(parent, data.scopedSlots, this.slots());\r\n        }\r\n    });\r\n    // support for compiled functional template\r\n    if (isCompiled) {\r\n        // exposing $options for renderStatic()\r\n        this.$options = options;\r\n        // pre-resolve slots for renderSlot()\r\n        this.$slots = this.slots();\r\n        this.$scopedSlots = normalizeScopedSlots(parent, data.scopedSlots, this.$slots);\r\n    }\r\n    if (options._scopeId) {\r\n        this._c = function (a, b, c, d) {\r\n            var vnode = createElement$1(contextVm, a, b, c, d, needNormalization);\r\n            if (vnode && !isArray(vnode)) {\r\n                vnode.fnScopeId = options._scopeId;\r\n                vnode.fnContext = parent;\r\n            }\r\n            return vnode;\r\n        };\r\n    }\r\n    else {\r\n        this._c = function (a, b, c, d) {\r\n            return createElement$1(contextVm, a, b, c, d, needNormalization);\r\n        };\r\n    }\r\n}\r\ninstallRenderHelpers(FunctionalRenderContext.prototype);\r\nfunction createFunctionalComponent(Ctor, propsData, data, contextVm, children) {\r\n    var options = Ctor.options;\r\n    var props = {};\r\n    var propOptions = options.props;\r\n    if (isDef(propOptions)) {\r\n        for (var key in propOptions) {\r\n            props[key] = validateProp(key, propOptions, propsData || emptyObject);\r\n        }\r\n    }\r\n    else {\r\n        if (isDef(data.attrs))\r\n            mergeProps(props, data.attrs);\r\n        if (isDef(data.props))\r\n            mergeProps(props, data.props);\r\n    }\r\n    var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);\r\n    var vnode = options.render.call(null, renderContext._c, renderContext);\r\n    if (vnode instanceof VNode) {\r\n        return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);\r\n    }\r\n    else if (isArray(vnode)) {\r\n        var vnodes = normalizeChildren(vnode) || [];\r\n        var res = new Array(vnodes.length);\r\n        for (var i = 0; i < vnodes.length; i++) {\r\n            res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\r\n        }\r\n        return res;\r\n    }\r\n}\r\nfunction cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {\r\n    // #7817 clone node before setting fnContext, otherwise if the node is reused\r\n    // (e.g. it was from a cached normal slot) the fnContext causes named slots\r\n    // that should not be matched to match.\r\n    var clone = cloneVNode(vnode);\r\n    clone.fnContext = contextVm;\r\n    clone.fnOptions = options;\r\n    if (true) {\r\n        (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext =\r\n            renderContext;\r\n    }\r\n    if (data.slot) {\r\n        (clone.data || (clone.data = {})).slot = data.slot;\r\n    }\r\n    return clone;\r\n}\r\nfunction mergeProps(to, from) {\r\n    for (var key in from) {\r\n        to[camelize(key)] = from[key];\r\n    }\r\n}\n\nfunction getComponentName(options) {\r\n    return options.name || options.__name || options._componentTag;\r\n}\r\n// inline hooks to be invoked on component VNodes during patch\r\nvar componentVNodeHooks = {\r\n    init: function (vnode, hydrating) {\r\n        if (vnode.componentInstance &&\r\n            !vnode.componentInstance._isDestroyed &&\r\n            vnode.data.keepAlive) {\r\n            // kept-alive components, treat as a patch\r\n            var mountedNode = vnode; // work around flow\r\n            componentVNodeHooks.prepatch(mountedNode, mountedNode);\r\n        }\r\n        else {\r\n            var child = (vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance));\r\n            child.$mount(hydrating ? vnode.elm : undefined, hydrating);\r\n        }\r\n    },\r\n    prepatch: function (oldVnode, vnode) {\r\n        var options = vnode.componentOptions;\r\n        var child = (vnode.componentInstance = oldVnode.componentInstance);\r\n        updateChildComponent(child, options.propsData, // updated props\r\n        options.listeners, // updated listeners\r\n        vnode, // new parent vnode\r\n        options.children // new children\r\n        );\r\n    },\r\n    insert: function (vnode) {\r\n        var context = vnode.context, componentInstance = vnode.componentInstance;\r\n        if (!componentInstance._isMounted) {\r\n            componentInstance._isMounted = true;\r\n            callHook$1(componentInstance, 'mounted');\r\n        }\r\n        if (vnode.data.keepAlive) {\r\n            if (context._isMounted) {\r\n                // vue-router#1212\r\n                // During updates, a kept-alive component's child components may\r\n                // change, so directly walking the tree here may call activated hooks\r\n                // on incorrect children. Instead we push them into a queue which will\r\n                // be processed after the whole patch process ended.\r\n                queueActivatedComponent(componentInstance);\r\n            }\r\n            else {\r\n                activateChildComponent(componentInstance, true /* direct */);\r\n            }\r\n        }\r\n    },\r\n    destroy: function (vnode) {\r\n        var componentInstance = vnode.componentInstance;\r\n        if (!componentInstance._isDestroyed) {\r\n            if (!vnode.data.keepAlive) {\r\n                componentInstance.$destroy();\r\n            }\r\n            else {\r\n                deactivateChildComponent(componentInstance, true /* direct */);\r\n            }\r\n        }\r\n    }\r\n};\r\nvar hooksToMerge = Object.keys(componentVNodeHooks);\r\nfunction createComponent(Ctor, data, context, children, tag) {\r\n    if (isUndef(Ctor)) {\r\n        return;\r\n    }\r\n    var baseCtor = context.$options._base;\r\n    // plain options object: turn it into a constructor\r\n    if (isObject(Ctor)) {\r\n        Ctor = baseCtor.extend(Ctor);\r\n    }\r\n    // if at this stage it's not a constructor or an async component factory,\r\n    // reject.\r\n    if (typeof Ctor !== 'function') {\r\n        if (true) {\r\n            warn$2(\"Invalid Component definition: \".concat(String(Ctor)), context);\r\n        }\r\n        return;\r\n    }\r\n    // async component\r\n    var asyncFactory;\r\n    // @ts-expect-error\r\n    if (isUndef(Ctor.cid)) {\r\n        asyncFactory = Ctor;\r\n        Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\r\n        if (Ctor === undefined) {\r\n            // return a placeholder node for async component, which is rendered\r\n            // as a comment node but preserves all the raw information for the node.\r\n            // the information will be used for async server-rendering and hydration.\r\n            return createAsyncPlaceholder(asyncFactory, data, context, children, tag);\r\n        }\r\n    }\r\n    data = data || {};\r\n    // resolve constructor options in case global mixins are applied after\r\n    // component constructor creation\r\n    resolveConstructorOptions(Ctor);\r\n    // transform component v-model data into props & events\r\n    if (isDef(data.model)) {\r\n        // @ts-expect-error\r\n        transformModel(Ctor.options, data);\r\n    }\r\n    // extract props\r\n    // @ts-expect-error\r\n    var propsData = extractPropsFromVNodeData(data, Ctor, tag);\r\n    // functional component\r\n    // @ts-expect-error\r\n    if (isTrue(Ctor.options.functional)) {\r\n        return createFunctionalComponent(Ctor, propsData, data, context, children);\r\n    }\r\n    // extract listeners, since these needs to be treated as\r\n    // child component listeners instead of DOM listeners\r\n    var listeners = data.on;\r\n    // replace with listeners with .native modifier\r\n    // so it gets processed during parent component patch.\r\n    data.on = data.nativeOn;\r\n    // @ts-expect-error\r\n    if (isTrue(Ctor.options.abstract)) {\r\n        // abstract components do not keep anything\r\n        // other than props & listeners & slot\r\n        // work around flow\r\n        var slot = data.slot;\r\n        data = {};\r\n        if (slot) {\r\n            data.slot = slot;\r\n        }\r\n    }\r\n    // install component management hooks onto the placeholder node\r\n    installComponentHooks(data);\r\n    // return a placeholder vnode\r\n    // @ts-expect-error\r\n    var name = getComponentName(Ctor.options) || tag;\r\n    var vnode = new VNode(\r\n    // @ts-expect-error\r\n    \"vue-component-\".concat(Ctor.cid).concat(name ? \"-\".concat(name) : ''), data, undefined, undefined, undefined, context, \r\n    // @ts-expect-error\r\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }, asyncFactory);\r\n    return vnode;\r\n}\r\nfunction createComponentInstanceForVnode(\r\n// we know it's MountedComponentVNode but flow doesn't\r\nvnode, \r\n// activeInstance in lifecycle state\r\nparent) {\r\n    var options = {\r\n        _isComponent: true,\r\n        _parentVnode: vnode,\r\n        parent: parent\r\n    };\r\n    // check inline-template render functions\r\n    var inlineTemplate = vnode.data.inlineTemplate;\r\n    if (isDef(inlineTemplate)) {\r\n        options.render = inlineTemplate.render;\r\n        options.staticRenderFns = inlineTemplate.staticRenderFns;\r\n    }\r\n    return new vnode.componentOptions.Ctor(options);\r\n}\r\nfunction installComponentHooks(data) {\r\n    var hooks = data.hook || (data.hook = {});\r\n    for (var i = 0; i < hooksToMerge.length; i++) {\r\n        var key = hooksToMerge[i];\r\n        var existing = hooks[key];\r\n        var toMerge = componentVNodeHooks[key];\r\n        // @ts-expect-error\r\n        if (existing !== toMerge && !(existing && existing._merged)) {\r\n            hooks[key] = existing ? mergeHook(toMerge, existing) : toMerge;\r\n        }\r\n    }\r\n}\r\nfunction mergeHook(f1, f2) {\r\n    var merged = function (a, b) {\r\n        // flow complains about extra args which is why we use any\r\n        f1(a, b);\r\n        f2(a, b);\r\n    };\r\n    merged._merged = true;\r\n    return merged;\r\n}\r\n// transform component v-model info (value and callback) into\r\n// prop and event handler respectively.\r\nfunction transformModel(options, data) {\r\n    var prop = (options.model && options.model.prop) || 'value';\r\n    var event = (options.model && options.model.event) || 'input';\r\n    (data.attrs || (data.attrs = {}))[prop] = data.model.value;\r\n    var on = data.on || (data.on = {});\r\n    var existing = on[event];\r\n    var callback = data.model.callback;\r\n    if (isDef(existing)) {\r\n        if (isArray(existing)\r\n            ? existing.indexOf(callback) === -1\r\n            : existing !== callback) {\r\n            on[event] = [callback].concat(existing);\r\n        }\r\n    }\r\n    else {\r\n        on[event] = callback;\r\n    }\r\n}\n\nvar warn$2 = noop;\r\nvar tip = noop;\r\nvar generateComponentTrace; // work around flow check\r\nvar formatComponentName;\r\nif (true) {\r\n    var hasConsole_1 = typeof console !== 'undefined';\r\n    var classifyRE_1 = /(?:^|[-_])(\\w)/g;\r\n    var classify_1 = function (str) {\r\n        return str.replace(classifyRE_1, function (c) { return c.toUpperCase(); }).replace(/[-_]/g, '');\r\n    };\r\n    warn$2 = function (msg, vm) {\r\n        if (vm === void 0) { vm = currentInstance; }\r\n        var trace = vm ? generateComponentTrace(vm) : '';\r\n        if (config.warnHandler) {\r\n            config.warnHandler.call(null, msg, vm, trace);\r\n        }\r\n        else if (hasConsole_1 && !config.silent) {\r\n            console.error(\"[Vue warn]: \".concat(msg).concat(trace));\r\n        }\r\n    };\r\n    tip = function (msg, vm) {\r\n        if (hasConsole_1 && !config.silent) {\r\n            console.warn(\"[Vue tip]: \".concat(msg) + (vm ? generateComponentTrace(vm) : ''));\r\n        }\r\n    };\r\n    formatComponentName = function (vm, includeFile) {\r\n        if (vm.$root === vm) {\r\n            return '<Root>';\r\n        }\r\n        var options = isFunction(vm) && vm.cid != null\r\n            ? vm.options\r\n            : vm._isVue\r\n                ? vm.$options || vm.constructor.options\r\n                : vm;\r\n        var name = getComponentName(options);\r\n        var file = options.__file;\r\n        if (!name && file) {\r\n            var match = file.match(/([^/\\\\]+)\\.vue$/);\r\n            name = match && match[1];\r\n        }\r\n        return ((name ? \"<\".concat(classify_1(name), \">\") : \"<Anonymous>\") +\r\n            (file && includeFile !== false ? \" at \".concat(file) : ''));\r\n    };\r\n    var repeat_1 = function (str, n) {\r\n        var res = '';\r\n        while (n) {\r\n            if (n % 2 === 1)\r\n                res += str;\r\n            if (n > 1)\r\n                str += str;\r\n            n >>= 1;\r\n        }\r\n        return res;\r\n    };\r\n    generateComponentTrace = function (vm) {\r\n        if (vm._isVue && vm.$parent) {\r\n            var tree = [];\r\n            var currentRecursiveSequence = 0;\r\n            while (vm) {\r\n                if (tree.length > 0) {\r\n                    var last = tree[tree.length - 1];\r\n                    if (last.constructor === vm.constructor) {\r\n                        currentRecursiveSequence++;\r\n                        vm = vm.$parent;\r\n                        continue;\r\n                    }\r\n                    else if (currentRecursiveSequence > 0) {\r\n                        tree[tree.length - 1] = [last, currentRecursiveSequence];\r\n                        currentRecursiveSequence = 0;\r\n                    }\r\n                }\r\n                tree.push(vm);\r\n                vm = vm.$parent;\r\n            }\r\n            return ('\\n\\nfound in\\n\\n' +\r\n                tree\r\n                    .map(function (vm, i) {\r\n                    return \"\".concat(i === 0 ? '---> ' : repeat_1(' ', 5 + i * 2)).concat(isArray(vm)\r\n                        ? \"\".concat(formatComponentName(vm[0]), \"... (\").concat(vm[1], \" recursive calls)\")\r\n                        : formatComponentName(vm));\r\n                })\r\n                    .join('\\n'));\r\n        }\r\n        else {\r\n            return \"\\n\\n(found in \".concat(formatComponentName(vm), \")\");\r\n        }\r\n    };\r\n}\n\n/**\r\n * Option overwriting strategies are functions that handle\r\n * how to merge a parent option value and a child option\r\n * value into the final value.\r\n */\r\nvar strats = config.optionMergeStrategies;\r\n/**\r\n * Options with restrictions\r\n */\r\nif (true) {\r\n    strats.el = strats.propsData = function (parent, child, vm, key) {\r\n        if (!vm) {\r\n            warn$2(\"option \\\"\".concat(key, \"\\\" can only be used during instance \") +\r\n                'creation with the `new` keyword.');\r\n        }\r\n        return defaultStrat(parent, child);\r\n    };\r\n}\r\n/**\r\n * Helper that recursively merges two data objects together.\r\n */\r\nfunction mergeData(to, from) {\r\n    if (!from)\r\n        return to;\r\n    var key, toVal, fromVal;\r\n    var keys = hasSymbol\r\n        ? Reflect.ownKeys(from)\r\n        : Object.keys(from);\r\n    for (var i = 0; i < keys.length; i++) {\r\n        key = keys[i];\r\n        // in case the object is already observed...\r\n        if (key === '__ob__')\r\n            continue;\r\n        toVal = to[key];\r\n        fromVal = from[key];\r\n        if (!hasOwn(to, key)) {\r\n            set(to, key, fromVal);\r\n        }\r\n        else if (toVal !== fromVal &&\r\n            isPlainObject(toVal) &&\r\n            isPlainObject(fromVal)) {\r\n            mergeData(toVal, fromVal);\r\n        }\r\n    }\r\n    return to;\r\n}\r\n/**\r\n * Data\r\n */\r\nfunction mergeDataOrFn(parentVal, childVal, vm) {\r\n    if (!vm) {\r\n        // in a Vue.extend merge, both should be functions\r\n        if (!childVal) {\r\n            return parentVal;\r\n        }\r\n        if (!parentVal) {\r\n            return childVal;\r\n        }\r\n        // when parentVal & childVal are both present,\r\n        // we need to return a function that returns the\r\n        // merged result of both functions... no need to\r\n        // check if parentVal is a function here because\r\n        // it has to be a function to pass previous merges.\r\n        return function mergedDataFn() {\r\n            return mergeData(isFunction(childVal) ? childVal.call(this, this) : childVal, isFunction(parentVal) ? parentVal.call(this, this) : parentVal);\r\n        };\r\n    }\r\n    else {\r\n        return function mergedInstanceDataFn() {\r\n            // instance merge\r\n            var instanceData = isFunction(childVal)\r\n                ? childVal.call(vm, vm)\r\n                : childVal;\r\n            var defaultData = isFunction(parentVal)\r\n                ? parentVal.call(vm, vm)\r\n                : parentVal;\r\n            if (instanceData) {\r\n                return mergeData(instanceData, defaultData);\r\n            }\r\n            else {\r\n                return defaultData;\r\n            }\r\n        };\r\n    }\r\n}\r\nstrats.data = function (parentVal, childVal, vm) {\r\n    if (!vm) {\r\n        if (childVal && typeof childVal !== 'function') {\r\n             true &&\r\n                warn$2('The \"data\" option should be a function ' +\r\n                    'that returns a per-instance value in component ' +\r\n                    'definitions.', vm);\r\n            return parentVal;\r\n        }\r\n        return mergeDataOrFn(parentVal, childVal);\r\n    }\r\n    return mergeDataOrFn(parentVal, childVal, vm);\r\n};\r\n/**\r\n * Hooks and props are merged as arrays.\r\n */\r\nfunction mergeLifecycleHook(parentVal, childVal) {\r\n    var res = childVal\r\n        ? parentVal\r\n            ? parentVal.concat(childVal)\r\n            : isArray(childVal)\r\n                ? childVal\r\n                : [childVal]\r\n        : parentVal;\r\n    return res ? dedupeHooks(res) : res;\r\n}\r\nfunction dedupeHooks(hooks) {\r\n    var res = [];\r\n    for (var i = 0; i < hooks.length; i++) {\r\n        if (res.indexOf(hooks[i]) === -1) {\r\n            res.push(hooks[i]);\r\n        }\r\n    }\r\n    return res;\r\n}\r\nLIFECYCLE_HOOKS.forEach(function (hook) {\r\n    strats[hook] = mergeLifecycleHook;\r\n});\r\n/**\r\n * Assets\r\n *\r\n * When a vm is present (instance creation), we need to do\r\n * a three-way merge between constructor options, instance\r\n * options and parent options.\r\n */\r\nfunction mergeAssets(parentVal, childVal, vm, key) {\r\n    var res = Object.create(parentVal || null);\r\n    if (childVal) {\r\n         true && assertObjectType(key, childVal, vm);\r\n        return extend(res, childVal);\r\n    }\r\n    else {\r\n        return res;\r\n    }\r\n}\r\nASSET_TYPES.forEach(function (type) {\r\n    strats[type + 's'] = mergeAssets;\r\n});\r\n/**\r\n * Watchers.\r\n *\r\n * Watchers hashes should not overwrite one\r\n * another, so we merge them as arrays.\r\n */\r\nstrats.watch = function (parentVal, childVal, vm, key) {\r\n    // work around Firefox's Object.prototype.watch...\r\n    //@ts-expect-error work around\r\n    if (parentVal === nativeWatch)\r\n        parentVal = undefined;\r\n    //@ts-expect-error work around\r\n    if (childVal === nativeWatch)\r\n        childVal = undefined;\r\n    /* istanbul ignore if */\r\n    if (!childVal)\r\n        return Object.create(parentVal || null);\r\n    if (true) {\r\n        assertObjectType(key, childVal, vm);\r\n    }\r\n    if (!parentVal)\r\n        return childVal;\r\n    var ret = {};\r\n    extend(ret, parentVal);\r\n    for (var key_1 in childVal) {\r\n        var parent_1 = ret[key_1];\r\n        var child = childVal[key_1];\r\n        if (parent_1 && !isArray(parent_1)) {\r\n            parent_1 = [parent_1];\r\n        }\r\n        ret[key_1] = parent_1 ? parent_1.concat(child) : isArray(child) ? child : [child];\r\n    }\r\n    return ret;\r\n};\r\n/**\r\n * Other object hashes.\r\n */\r\nstrats.props =\r\n    strats.methods =\r\n        strats.inject =\r\n            strats.computed =\r\n                function (parentVal, childVal, vm, key) {\r\n                    if (childVal && \"development\" !== 'production') {\r\n                        assertObjectType(key, childVal, vm);\r\n                    }\r\n                    if (!parentVal)\r\n                        return childVal;\r\n                    var ret = Object.create(null);\r\n                    extend(ret, parentVal);\r\n                    if (childVal)\r\n                        extend(ret, childVal);\r\n                    return ret;\r\n                };\r\nstrats.provide = mergeDataOrFn;\r\n/**\r\n * Default strategy.\r\n */\r\nvar defaultStrat = function (parentVal, childVal) {\r\n    return childVal === undefined ? parentVal : childVal;\r\n};\r\n/**\r\n * Validate component names\r\n */\r\nfunction checkComponents(options) {\r\n    for (var key in options.components) {\r\n        validateComponentName(key);\r\n    }\r\n}\r\nfunction validateComponentName(name) {\r\n    if (!new RegExp(\"^[a-zA-Z][\\\\-\\\\.0-9_\".concat(unicodeRegExp.source, \"]*$\")).test(name)) {\r\n        warn$2('Invalid component name: \"' +\r\n            name +\r\n            '\". Component names ' +\r\n            'should conform to valid custom element name in html5 specification.');\r\n    }\r\n    if (isBuiltInTag(name) || config.isReservedTag(name)) {\r\n        warn$2('Do not use built-in or reserved HTML elements as component ' +\r\n            'id: ' +\r\n            name);\r\n    }\r\n}\r\n/**\r\n * Ensure all props option syntax are normalized into the\r\n * Object-based format.\r\n */\r\nfunction normalizeProps(options, vm) {\r\n    var props = options.props;\r\n    if (!props)\r\n        return;\r\n    var res = {};\r\n    var i, val, name;\r\n    if (isArray(props)) {\r\n        i = props.length;\r\n        while (i--) {\r\n            val = props[i];\r\n            if (typeof val === 'string') {\r\n                name = camelize(val);\r\n                res[name] = { type: null };\r\n            }\r\n            else if (true) {\r\n                warn$2('props must be strings when using array syntax.');\r\n            }\r\n        }\r\n    }\r\n    else if (isPlainObject(props)) {\r\n        for (var key in props) {\r\n            val = props[key];\r\n            name = camelize(key);\r\n            res[name] = isPlainObject(val) ? val : { type: val };\r\n        }\r\n    }\r\n    else if (true) {\r\n        warn$2(\"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\r\n            \"but got \".concat(toRawType(props), \".\"), vm);\r\n    }\r\n    options.props = res;\r\n}\r\n/**\r\n * Normalize all injections into Object-based format\r\n */\r\nfunction normalizeInject(options, vm) {\r\n    var inject = options.inject;\r\n    if (!inject)\r\n        return;\r\n    var normalized = (options.inject = {});\r\n    if (isArray(inject)) {\r\n        for (var i = 0; i < inject.length; i++) {\r\n            normalized[inject[i]] = { from: inject[i] };\r\n        }\r\n    }\r\n    else if (isPlainObject(inject)) {\r\n        for (var key in inject) {\r\n            var val = inject[key];\r\n            normalized[key] = isPlainObject(val)\r\n                ? extend({ from: key }, val)\r\n                : { from: val };\r\n        }\r\n    }\r\n    else if (true) {\r\n        warn$2(\"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\r\n            \"but got \".concat(toRawType(inject), \".\"), vm);\r\n    }\r\n}\r\n/**\r\n * Normalize raw function directives into object format.\r\n */\r\nfunction normalizeDirectives$1(options) {\r\n    var dirs = options.directives;\r\n    if (dirs) {\r\n        for (var key in dirs) {\r\n            var def = dirs[key];\r\n            if (isFunction(def)) {\r\n                dirs[key] = { bind: def, update: def };\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction assertObjectType(name, value, vm) {\r\n    if (!isPlainObject(value)) {\r\n        warn$2(\"Invalid value for option \\\"\".concat(name, \"\\\": expected an Object, \") +\r\n            \"but got \".concat(toRawType(value), \".\"), vm);\r\n    }\r\n}\r\n/**\r\n * Merge two option objects into a new one.\r\n * Core utility used in both instantiation and inheritance.\r\n */\r\nfunction mergeOptions(parent, child, vm) {\r\n    if (true) {\r\n        checkComponents(child);\r\n    }\r\n    if (isFunction(child)) {\r\n        // @ts-expect-error\r\n        child = child.options;\r\n    }\r\n    normalizeProps(child, vm);\r\n    normalizeInject(child, vm);\r\n    normalizeDirectives$1(child);\r\n    // Apply extends and mixins on the child options,\r\n    // but only if it is a raw options object that isn't\r\n    // the result of another mergeOptions call.\r\n    // Only merged options has the _base property.\r\n    if (!child._base) {\r\n        if (child.extends) {\r\n            parent = mergeOptions(parent, child.extends, vm);\r\n        }\r\n        if (child.mixins) {\r\n            for (var i = 0, l = child.mixins.length; i < l; i++) {\r\n                parent = mergeOptions(parent, child.mixins[i], vm);\r\n            }\r\n        }\r\n    }\r\n    var options = {};\r\n    var key;\r\n    for (key in parent) {\r\n        mergeField(key);\r\n    }\r\n    for (key in child) {\r\n        if (!hasOwn(parent, key)) {\r\n            mergeField(key);\r\n        }\r\n    }\r\n    function mergeField(key) {\r\n        var strat = strats[key] || defaultStrat;\r\n        options[key] = strat(parent[key], child[key], vm, key);\r\n    }\r\n    return options;\r\n}\r\n/**\r\n * Resolve an asset.\r\n * This function is used because child instances need access\r\n * to assets defined in its ancestor chain.\r\n */\r\nfunction resolveAsset(options, type, id, warnMissing) {\r\n    /* istanbul ignore if */\r\n    if (typeof id !== 'string') {\r\n        return;\r\n    }\r\n    var assets = options[type];\r\n    // check local registration variations first\r\n    if (hasOwn(assets, id))\r\n        return assets[id];\r\n    var camelizedId = camelize(id);\r\n    if (hasOwn(assets, camelizedId))\r\n        return assets[camelizedId];\r\n    var PascalCaseId = capitalize(camelizedId);\r\n    if (hasOwn(assets, PascalCaseId))\r\n        return assets[PascalCaseId];\r\n    // fallback to prototype chain\r\n    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\r\n    if ( true && warnMissing && !res) {\r\n        warn$2('Failed to resolve ' + type.slice(0, -1) + ': ' + id);\r\n    }\r\n    return res;\r\n}\n\nfunction validateProp(key, propOptions, propsData, vm) {\r\n    var prop = propOptions[key];\r\n    var absent = !hasOwn(propsData, key);\r\n    var value = propsData[key];\r\n    // boolean casting\r\n    var booleanIndex = getTypeIndex(Boolean, prop.type);\r\n    if (booleanIndex > -1) {\r\n        if (absent && !hasOwn(prop, 'default')) {\r\n            value = false;\r\n        }\r\n        else if (value === '' || value === hyphenate(key)) {\r\n            // only cast empty string / same name to boolean if\r\n            // boolean has higher priority\r\n            var stringIndex = getTypeIndex(String, prop.type);\r\n            if (stringIndex < 0 || booleanIndex < stringIndex) {\r\n                value = true;\r\n            }\r\n        }\r\n    }\r\n    // check default value\r\n    if (value === undefined) {\r\n        value = getPropDefaultValue(vm, prop, key);\r\n        // since the default value is a fresh copy,\r\n        // make sure to observe it.\r\n        var prevShouldObserve = shouldObserve;\r\n        toggleObserving(true);\r\n        observe(value);\r\n        toggleObserving(prevShouldObserve);\r\n    }\r\n    if (true) {\r\n        assertProp(prop, key, value, vm, absent);\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Get the default value of a prop.\r\n */\r\nfunction getPropDefaultValue(vm, prop, key) {\r\n    // no default, return undefined\r\n    if (!hasOwn(prop, 'default')) {\r\n        return undefined;\r\n    }\r\n    var def = prop.default;\r\n    // warn against non-factory defaults for Object & Array\r\n    if ( true && isObject(def)) {\r\n        warn$2('Invalid default value for prop \"' +\r\n            key +\r\n            '\": ' +\r\n            'Props with type Object/Array must use a factory function ' +\r\n            'to return the default value.', vm);\r\n    }\r\n    // the raw prop value was also undefined from previous render,\r\n    // return previous default value to avoid unnecessary watcher trigger\r\n    if (vm &&\r\n        vm.$options.propsData &&\r\n        vm.$options.propsData[key] === undefined &&\r\n        vm._props[key] !== undefined) {\r\n        return vm._props[key];\r\n    }\r\n    // call factory function for non-Function types\r\n    // a value is Function if its prototype is function even across different execution context\r\n    return isFunction(def) && getType(prop.type) !== 'Function'\r\n        ? def.call(vm)\r\n        : def;\r\n}\r\n/**\r\n * Assert whether a prop is valid.\r\n */\r\nfunction assertProp(prop, name, value, vm, absent) {\r\n    if (prop.required && absent) {\r\n        warn$2('Missing required prop: \"' + name + '\"', vm);\r\n        return;\r\n    }\r\n    if (value == null && !prop.required) {\r\n        return;\r\n    }\r\n    var type = prop.type;\r\n    var valid = !type || type === true;\r\n    var expectedTypes = [];\r\n    if (type) {\r\n        if (!isArray(type)) {\r\n            type = [type];\r\n        }\r\n        for (var i = 0; i < type.length && !valid; i++) {\r\n            var assertedType = assertType(value, type[i], vm);\r\n            expectedTypes.push(assertedType.expectedType || '');\r\n            valid = assertedType.valid;\r\n        }\r\n    }\r\n    var haveExpectedTypes = expectedTypes.some(function (t) { return t; });\r\n    if (!valid && haveExpectedTypes) {\r\n        warn$2(getInvalidTypeMessage(name, value, expectedTypes), vm);\r\n        return;\r\n    }\r\n    var validator = prop.validator;\r\n    if (validator) {\r\n        if (!validator(value)) {\r\n            warn$2('Invalid prop: custom validator check failed for prop \"' + name + '\".', vm);\r\n        }\r\n    }\r\n}\r\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;\r\nfunction assertType(value, type, vm) {\r\n    var valid;\r\n    var expectedType = getType(type);\r\n    if (simpleCheckRE.test(expectedType)) {\r\n        var t = typeof value;\r\n        valid = t === expectedType.toLowerCase();\r\n        // for primitive wrapper objects\r\n        if (!valid && t === 'object') {\r\n            valid = value instanceof type;\r\n        }\r\n    }\r\n    else if (expectedType === 'Object') {\r\n        valid = isPlainObject(value);\r\n    }\r\n    else if (expectedType === 'Array') {\r\n        valid = isArray(value);\r\n    }\r\n    else {\r\n        try {\r\n            valid = value instanceof type;\r\n        }\r\n        catch (e) {\r\n            warn$2('Invalid prop type: \"' + String(type) + '\" is not a constructor', vm);\r\n            valid = false;\r\n        }\r\n    }\r\n    return {\r\n        valid: valid,\r\n        expectedType: expectedType\r\n    };\r\n}\r\nvar functionTypeCheckRE = /^\\s*function (\\w+)/;\r\n/**\r\n * Use function string name to check built-in types,\r\n * because a simple equality check will fail when running\r\n * across different vms / iframes.\r\n */\r\nfunction getType(fn) {\r\n    var match = fn && fn.toString().match(functionTypeCheckRE);\r\n    return match ? match[1] : '';\r\n}\r\nfunction isSameType(a, b) {\r\n    return getType(a) === getType(b);\r\n}\r\nfunction getTypeIndex(type, expectedTypes) {\r\n    if (!isArray(expectedTypes)) {\r\n        return isSameType(expectedTypes, type) ? 0 : -1;\r\n    }\r\n    for (var i = 0, len = expectedTypes.length; i < len; i++) {\r\n        if (isSameType(expectedTypes[i], type)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nfunction getInvalidTypeMessage(name, value, expectedTypes) {\r\n    var message = \"Invalid prop: type check failed for prop \\\"\".concat(name, \"\\\".\") +\r\n        \" Expected \".concat(expectedTypes.map(capitalize).join(', '));\r\n    var expectedType = expectedTypes[0];\r\n    var receivedType = toRawType(value);\r\n    // check if we need to specify expected value\r\n    if (expectedTypes.length === 1 &&\r\n        isExplicable(expectedType) &&\r\n        isExplicable(typeof value) &&\r\n        !isBoolean(expectedType, receivedType)) {\r\n        message += \" with value \".concat(styleValue(value, expectedType));\r\n    }\r\n    message += \", got \".concat(receivedType, \" \");\r\n    // check if we need to specify received value\r\n    if (isExplicable(receivedType)) {\r\n        message += \"with value \".concat(styleValue(value, receivedType), \".\");\r\n    }\r\n    return message;\r\n}\r\nfunction styleValue(value, type) {\r\n    if (type === 'String') {\r\n        return \"\\\"\".concat(value, \"\\\"\");\r\n    }\r\n    else if (type === 'Number') {\r\n        return \"\".concat(Number(value));\r\n    }\r\n    else {\r\n        return \"\".concat(value);\r\n    }\r\n}\r\nvar EXPLICABLE_TYPES = ['string', 'number', 'boolean'];\r\nfunction isExplicable(value) {\r\n    return EXPLICABLE_TYPES.some(function (elem) { return value.toLowerCase() === elem; });\r\n}\r\nfunction isBoolean() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; });\r\n}\n\nfunction Vue(options) {\r\n    if ( true && !(this instanceof Vue)) {\r\n        warn$2('Vue is a constructor and should be called with the `new` keyword');\r\n    }\r\n    this._init(options);\r\n}\r\n//@ts-expect-error Vue has function type\r\ninitMixin$1(Vue);\r\n//@ts-expect-error Vue has function type\r\nstateMixin(Vue);\r\n//@ts-expect-error Vue has function type\r\neventsMixin(Vue);\r\n//@ts-expect-error Vue has function type\r\nlifecycleMixin(Vue);\r\n//@ts-expect-error Vue has function type\r\nrenderMixin(Vue);\n\nfunction initUse(Vue) {\r\n    Vue.use = function (plugin) {\r\n        var installedPlugins = this._installedPlugins || (this._installedPlugins = []);\r\n        if (installedPlugins.indexOf(plugin) > -1) {\r\n            return this;\r\n        }\r\n        // additional parameters\r\n        var args = toArray(arguments, 1);\r\n        args.unshift(this);\r\n        if (isFunction(plugin.install)) {\r\n            plugin.install.apply(plugin, args);\r\n        }\r\n        else if (isFunction(plugin)) {\r\n            plugin.apply(null, args);\r\n        }\r\n        installedPlugins.push(plugin);\r\n        return this;\r\n    };\r\n}\n\nfunction initMixin(Vue) {\r\n    Vue.mixin = function (mixin) {\r\n        this.options = mergeOptions(this.options, mixin);\r\n        return this;\r\n    };\r\n}\n\nfunction initExtend(Vue) {\r\n    /**\r\n     * Each instance constructor, including Vue, has a unique\r\n     * cid. This enables us to create wrapped \"child\r\n     * constructors\" for prototypal inheritance and cache them.\r\n     */\r\n    Vue.cid = 0;\r\n    var cid = 1;\r\n    /**\r\n     * Class inheritance\r\n     */\r\n    Vue.extend = function (extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n        var Super = this;\r\n        var SuperId = Super.cid;\r\n        var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\r\n        if (cachedCtors[SuperId]) {\r\n            return cachedCtors[SuperId];\r\n        }\r\n        var name = getComponentName(extendOptions) || getComponentName(Super.options);\r\n        if ( true && name) {\r\n            validateComponentName(name);\r\n        }\r\n        var Sub = function VueComponent(options) {\r\n            this._init(options);\r\n        };\r\n        Sub.prototype = Object.create(Super.prototype);\r\n        Sub.prototype.constructor = Sub;\r\n        Sub.cid = cid++;\r\n        Sub.options = mergeOptions(Super.options, extendOptions);\r\n        Sub['super'] = Super;\r\n        // For props and computed properties, we define the proxy getters on\r\n        // the Vue instances at extension time, on the extended prototype. This\r\n        // avoids Object.defineProperty calls for each instance created.\r\n        if (Sub.options.props) {\r\n            initProps(Sub);\r\n        }\r\n        if (Sub.options.computed) {\r\n            initComputed(Sub);\r\n        }\r\n        // allow further extension/mixin/plugin usage\r\n        Sub.extend = Super.extend;\r\n        Sub.mixin = Super.mixin;\r\n        Sub.use = Super.use;\r\n        // create asset registers, so extended classes\r\n        // can have their private assets too.\r\n        ASSET_TYPES.forEach(function (type) {\r\n            Sub[type] = Super[type];\r\n        });\r\n        // enable recursive self-lookup\r\n        if (name) {\r\n            Sub.options.components[name] = Sub;\r\n        }\r\n        // keep a reference to the super options at extension time.\r\n        // later at instantiation we can check if Super's options have\r\n        // been updated.\r\n        Sub.superOptions = Super.options;\r\n        Sub.extendOptions = extendOptions;\r\n        Sub.sealedOptions = extend({}, Sub.options);\r\n        // cache constructor\r\n        cachedCtors[SuperId] = Sub;\r\n        return Sub;\r\n    };\r\n}\r\nfunction initProps(Comp) {\r\n    var props = Comp.options.props;\r\n    for (var key in props) {\r\n        proxy(Comp.prototype, \"_props\", key);\r\n    }\r\n}\r\nfunction initComputed(Comp) {\r\n    var computed = Comp.options.computed;\r\n    for (var key in computed) {\r\n        defineComputed(Comp.prototype, key, computed[key]);\r\n    }\r\n}\n\nfunction initAssetRegisters(Vue) {\r\n    /**\r\n     * Create asset registration methods.\r\n     */\r\n    ASSET_TYPES.forEach(function (type) {\r\n        // @ts-expect-error function is not exact same type\r\n        Vue[type] = function (id, definition) {\r\n            if (!definition) {\r\n                return this.options[type + 's'][id];\r\n            }\r\n            else {\r\n                /* istanbul ignore if */\r\n                if ( true && type === 'component') {\r\n                    validateComponentName(id);\r\n                }\r\n                if (type === 'component' && isPlainObject(definition)) {\r\n                    // @ts-expect-error\r\n                    definition.name = definition.name || id;\r\n                    definition = this.options._base.extend(definition);\r\n                }\r\n                if (type === 'directive' && isFunction(definition)) {\r\n                    definition = { bind: definition, update: definition };\r\n                }\r\n                this.options[type + 's'][id] = definition;\r\n                return definition;\r\n            }\r\n        };\r\n    });\r\n}\n\nfunction _getComponentName(opts) {\r\n    return opts && (getComponentName(opts.Ctor.options) || opts.tag);\r\n}\r\nfunction matches(pattern, name) {\r\n    if (isArray(pattern)) {\r\n        return pattern.indexOf(name) > -1;\r\n    }\r\n    else if (typeof pattern === 'string') {\r\n        return pattern.split(',').indexOf(name) > -1;\r\n    }\r\n    else if (isRegExp(pattern)) {\r\n        return pattern.test(name);\r\n    }\r\n    /* istanbul ignore next */\r\n    return false;\r\n}\r\nfunction pruneCache(keepAliveInstance, filter) {\r\n    var cache = keepAliveInstance.cache, keys = keepAliveInstance.keys, _vnode = keepAliveInstance._vnode;\r\n    for (var key in cache) {\r\n        var entry = cache[key];\r\n        if (entry) {\r\n            var name_1 = entry.name;\r\n            if (name_1 && !filter(name_1)) {\r\n                pruneCacheEntry(cache, key, keys, _vnode);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction pruneCacheEntry(cache, key, keys, current) {\r\n    var entry = cache[key];\r\n    if (entry && (!current || entry.tag !== current.tag)) {\r\n        // @ts-expect-error can be undefined\r\n        entry.componentInstance.$destroy();\r\n    }\r\n    cache[key] = null;\r\n    remove$2(keys, key);\r\n}\r\nvar patternTypes = [String, RegExp, Array];\r\n// TODO defineComponent\r\nvar KeepAlive = {\r\n    name: 'keep-alive',\r\n    abstract: true,\r\n    props: {\r\n        include: patternTypes,\r\n        exclude: patternTypes,\r\n        max: [String, Number]\r\n    },\r\n    methods: {\r\n        cacheVNode: function () {\r\n            var _a = this, cache = _a.cache, keys = _a.keys, vnodeToCache = _a.vnodeToCache, keyToCache = _a.keyToCache;\r\n            if (vnodeToCache) {\r\n                var tag = vnodeToCache.tag, componentInstance = vnodeToCache.componentInstance, componentOptions = vnodeToCache.componentOptions;\r\n                cache[keyToCache] = {\r\n                    name: _getComponentName(componentOptions),\r\n                    tag: tag,\r\n                    componentInstance: componentInstance\r\n                };\r\n                keys.push(keyToCache);\r\n                // prune oldest entry\r\n                if (this.max && keys.length > parseInt(this.max)) {\r\n                    pruneCacheEntry(cache, keys[0], keys, this._vnode);\r\n                }\r\n                this.vnodeToCache = null;\r\n            }\r\n        }\r\n    },\r\n    created: function () {\r\n        this.cache = Object.create(null);\r\n        this.keys = [];\r\n    },\r\n    destroyed: function () {\r\n        for (var key in this.cache) {\r\n            pruneCacheEntry(this.cache, key, this.keys);\r\n        }\r\n    },\r\n    mounted: function () {\r\n        var _this = this;\r\n        this.cacheVNode();\r\n        this.$watch('include', function (val) {\r\n            pruneCache(_this, function (name) { return matches(val, name); });\r\n        });\r\n        this.$watch('exclude', function (val) {\r\n            pruneCache(_this, function (name) { return !matches(val, name); });\r\n        });\r\n    },\r\n    updated: function () {\r\n        this.cacheVNode();\r\n    },\r\n    render: function () {\r\n        var slot = this.$slots.default;\r\n        var vnode = getFirstComponentChild(slot);\r\n        var componentOptions = vnode && vnode.componentOptions;\r\n        if (componentOptions) {\r\n            // check pattern\r\n            var name_2 = _getComponentName(componentOptions);\r\n            var _a = this, include = _a.include, exclude = _a.exclude;\r\n            if (\r\n            // not included\r\n            (include && (!name_2 || !matches(include, name_2))) ||\r\n                // excluded\r\n                (exclude && name_2 && matches(exclude, name_2))) {\r\n                return vnode;\r\n            }\r\n            var _b = this, cache = _b.cache, keys = _b.keys;\r\n            var key = vnode.key == null\r\n                ? // same constructor may get registered as different local components\r\n                    // so cid alone is not enough (#3269)\r\n                    componentOptions.Ctor.cid +\r\n                        (componentOptions.tag ? \"::\".concat(componentOptions.tag) : '')\r\n                : vnode.key;\r\n            if (cache[key]) {\r\n                vnode.componentInstance = cache[key].componentInstance;\r\n                // make current key freshest\r\n                remove$2(keys, key);\r\n                keys.push(key);\r\n            }\r\n            else {\r\n                // delay setting the cache until update\r\n                this.vnodeToCache = vnode;\r\n                this.keyToCache = key;\r\n            }\r\n            // @ts-expect-error can vnode.data can be undefined\r\n            vnode.data.keepAlive = true;\r\n        }\r\n        return vnode || (slot && slot[0]);\r\n    }\r\n};\n\nvar builtInComponents = {\r\n    KeepAlive: KeepAlive\r\n};\n\nfunction initGlobalAPI(Vue) {\r\n    // config\r\n    var configDef = {};\r\n    configDef.get = function () { return config; };\r\n    if (true) {\r\n        configDef.set = function () {\r\n            warn$2('Do not replace the Vue.config object, set individual fields instead.');\r\n        };\r\n    }\r\n    Object.defineProperty(Vue, 'config', configDef);\r\n    // exposed util methods.\r\n    // NOTE: these are not considered part of the public API - avoid relying on\r\n    // them unless you are aware of the risk.\r\n    Vue.util = {\r\n        warn: warn$2,\r\n        extend: extend,\r\n        mergeOptions: mergeOptions,\r\n        defineReactive: defineReactive\r\n    };\r\n    Vue.set = set;\r\n    Vue.delete = del;\r\n    Vue.nextTick = nextTick;\r\n    // 2.6 explicit observable API\r\n    Vue.observable = function (obj) {\r\n        observe(obj);\r\n        return obj;\r\n    };\r\n    Vue.options = Object.create(null);\r\n    ASSET_TYPES.forEach(function (type) {\r\n        Vue.options[type + 's'] = Object.create(null);\r\n    });\r\n    // this is used to identify the \"base\" constructor to extend all plain-object\r\n    // components with in Weex's multi-instance scenarios.\r\n    Vue.options._base = Vue;\r\n    extend(Vue.options.components, builtInComponents);\r\n    initUse(Vue);\r\n    initMixin(Vue);\r\n    initExtend(Vue);\r\n    initAssetRegisters(Vue);\r\n}\n\ninitGlobalAPI(Vue);\r\nObject.defineProperty(Vue.prototype, '$isServer', {\r\n    get: isServerRendering\r\n});\r\nObject.defineProperty(Vue.prototype, '$ssrContext', {\r\n    get: function () {\r\n        /* istanbul ignore next */\r\n        return this.$vnode && this.$vnode.ssrContext;\r\n    }\r\n});\r\n// expose FunctionalRenderContext for ssr runtime helper installation\r\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\r\n    value: FunctionalRenderContext\r\n});\r\nVue.version = version;\n\n// these are reserved for web because they are directly compiled away\r\n// during template compilation\r\nvar isReservedAttr = makeMap('style,class');\r\n// attributes that should be using props for binding\r\nvar acceptValue = makeMap('input,textarea,option,select,progress');\r\nvar mustUseProp = function (tag, type, attr) {\r\n    return ((attr === 'value' && acceptValue(tag) && type !== 'button') ||\r\n        (attr === 'selected' && tag === 'option') ||\r\n        (attr === 'checked' && tag === 'input') ||\r\n        (attr === 'muted' && tag === 'video'));\r\n};\r\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\r\nvar isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');\r\nvar convertEnumeratedValue = function (key, value) {\r\n    return isFalsyAttrValue(value) || value === 'false'\r\n        ? 'false'\r\n        : // allow arbitrary string value for contenteditable\r\n            key === 'contenteditable' && isValidContentEditableValue(value)\r\n                ? value\r\n                : 'true';\r\n};\r\nvar isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\r\n    'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\r\n    'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\r\n    'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\r\n    'required,reversed,scoped,seamless,selected,sortable,' +\r\n    'truespeed,typemustmatch,visible');\r\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\r\nvar isXlink = function (name) {\r\n    return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';\r\n};\r\nvar getXlinkProp = function (name) {\r\n    return isXlink(name) ? name.slice(6, name.length) : '';\r\n};\r\nvar isFalsyAttrValue = function (val) {\r\n    return val == null || val === false;\r\n};\n\nfunction genClassForVnode(vnode) {\r\n    var data = vnode.data;\r\n    var parentNode = vnode;\r\n    var childNode = vnode;\r\n    while (isDef(childNode.componentInstance)) {\r\n        childNode = childNode.componentInstance._vnode;\r\n        if (childNode && childNode.data) {\r\n            data = mergeClassData(childNode.data, data);\r\n        }\r\n    }\r\n    // @ts-expect-error parentNode.parent not VNodeWithData\r\n    while (isDef((parentNode = parentNode.parent))) {\r\n        if (parentNode && parentNode.data) {\r\n            data = mergeClassData(data, parentNode.data);\r\n        }\r\n    }\r\n    return renderClass(data.staticClass, data.class);\r\n}\r\nfunction mergeClassData(child, parent) {\r\n    return {\r\n        staticClass: concat(child.staticClass, parent.staticClass),\r\n        class: isDef(child.class) ? [child.class, parent.class] : parent.class\r\n    };\r\n}\r\nfunction renderClass(staticClass, dynamicClass) {\r\n    if (isDef(staticClass) || isDef(dynamicClass)) {\r\n        return concat(staticClass, stringifyClass(dynamicClass));\r\n    }\r\n    /* istanbul ignore next */\r\n    return '';\r\n}\r\nfunction concat(a, b) {\r\n    return a ? (b ? a + ' ' + b : a) : b || '';\r\n}\r\nfunction stringifyClass(value) {\r\n    if (Array.isArray(value)) {\r\n        return stringifyArray(value);\r\n    }\r\n    if (isObject(value)) {\r\n        return stringifyObject(value);\r\n    }\r\n    if (typeof value === 'string') {\r\n        return value;\r\n    }\r\n    /* istanbul ignore next */\r\n    return '';\r\n}\r\nfunction stringifyArray(value) {\r\n    var res = '';\r\n    var stringified;\r\n    for (var i = 0, l = value.length; i < l; i++) {\r\n        if (isDef((stringified = stringifyClass(value[i]))) && stringified !== '') {\r\n            if (res)\r\n                res += ' ';\r\n            res += stringified;\r\n        }\r\n    }\r\n    return res;\r\n}\r\nfunction stringifyObject(value) {\r\n    var res = '';\r\n    for (var key in value) {\r\n        if (value[key]) {\r\n            if (res)\r\n                res += ' ';\r\n            res += key;\r\n        }\r\n    }\r\n    return res;\r\n}\n\nvar namespaceMap = {\r\n    svg: 'http://www.w3.org/2000/svg',\r\n    math: 'http://www.w3.org/1998/Math/MathML'\r\n};\r\nvar isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' +\r\n    'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\r\n    'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\r\n    'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\r\n    's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\r\n    'embed,object,param,source,canvas,script,noscript,del,ins,' +\r\n    'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\r\n    'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\r\n    'output,progress,select,textarea,' +\r\n    'details,dialog,menu,menuitem,summary,' +\r\n    'content,element,shadow,template,blockquote,iframe,tfoot');\r\n// this map is intentionally selective, only covering SVG elements that may\r\n// contain child elements.\r\nvar isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\r\n    'foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\r\n    'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);\r\nvar isPreTag = function (tag) { return tag === 'pre'; };\r\nvar isReservedTag = function (tag) {\r\n    return isHTMLTag(tag) || isSVG(tag);\r\n};\r\nfunction getTagNamespace(tag) {\r\n    if (isSVG(tag)) {\r\n        return 'svg';\r\n    }\r\n    // basic support for MathML\r\n    // note it doesn't support other MathML elements being component roots\r\n    if (tag === 'math') {\r\n        return 'math';\r\n    }\r\n}\r\nvar unknownElementCache = Object.create(null);\r\nfunction isUnknownElement(tag) {\r\n    /* istanbul ignore if */\r\n    if (!inBrowser) {\r\n        return true;\r\n    }\r\n    if (isReservedTag(tag)) {\r\n        return false;\r\n    }\r\n    tag = tag.toLowerCase();\r\n    /* istanbul ignore if */\r\n    if (unknownElementCache[tag] != null) {\r\n        return unknownElementCache[tag];\r\n    }\r\n    var el = document.createElement(tag);\r\n    if (tag.indexOf('-') > -1) {\r\n        // http://stackoverflow.com/a/28210364/1070244\r\n        return (unknownElementCache[tag] =\r\n            el.constructor === window.HTMLUnknownElement ||\r\n                el.constructor === window.HTMLElement);\r\n    }\r\n    else {\r\n        return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()));\r\n    }\r\n}\r\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/**\r\n * Query an element selector if it's not an element already.\r\n */\r\nfunction query(el) {\r\n    if (typeof el === 'string') {\r\n        var selected = document.querySelector(el);\r\n        if (!selected) {\r\n             true && warn$2('Cannot find element: ' + el);\r\n            return document.createElement('div');\r\n        }\r\n        return selected;\r\n    }\r\n    else {\r\n        return el;\r\n    }\r\n}\n\nfunction createElement(tagName, vnode) {\r\n    var elm = document.createElement(tagName);\r\n    if (tagName !== 'select') {\r\n        return elm;\r\n    }\r\n    // false or null will remove the attribute but undefined will not\r\n    if (vnode.data &&\r\n        vnode.data.attrs &&\r\n        vnode.data.attrs.multiple !== undefined) {\r\n        elm.setAttribute('multiple', 'multiple');\r\n    }\r\n    return elm;\r\n}\r\nfunction createElementNS(namespace, tagName) {\r\n    return document.createElementNS(namespaceMap[namespace], tagName);\r\n}\r\nfunction createTextNode(text) {\r\n    return document.createTextNode(text);\r\n}\r\nfunction createComment(text) {\r\n    return document.createComment(text);\r\n}\r\nfunction insertBefore(parentNode, newNode, referenceNode) {\r\n    parentNode.insertBefore(newNode, referenceNode);\r\n}\r\nfunction removeChild(node, child) {\r\n    node.removeChild(child);\r\n}\r\nfunction appendChild(node, child) {\r\n    node.appendChild(child);\r\n}\r\nfunction parentNode(node) {\r\n    return node.parentNode;\r\n}\r\nfunction nextSibling(node) {\r\n    return node.nextSibling;\r\n}\r\nfunction tagName(node) {\r\n    return node.tagName;\r\n}\r\nfunction setTextContent(node, text) {\r\n    node.textContent = text;\r\n}\r\nfunction setStyleScope(node, scopeId) {\r\n    node.setAttribute(scopeId, '');\r\n}\n\nvar nodeOps = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createElement: createElement,\n  createElementNS: createElementNS,\n  createTextNode: createTextNode,\n  createComment: createComment,\n  insertBefore: insertBefore,\n  removeChild: removeChild,\n  appendChild: appendChild,\n  parentNode: parentNode,\n  nextSibling: nextSibling,\n  tagName: tagName,\n  setTextContent: setTextContent,\n  setStyleScope: setStyleScope\n});\n\nvar ref = {\r\n    create: function (_, vnode) {\r\n        registerRef(vnode);\r\n    },\r\n    update: function (oldVnode, vnode) {\r\n        if (oldVnode.data.ref !== vnode.data.ref) {\r\n            registerRef(oldVnode, true);\r\n            registerRef(vnode);\r\n        }\r\n    },\r\n    destroy: function (vnode) {\r\n        registerRef(vnode, true);\r\n    }\r\n};\r\nfunction registerRef(vnode, isRemoval) {\r\n    var ref = vnode.data.ref;\r\n    if (!isDef(ref))\r\n        return;\r\n    var vm = vnode.context;\r\n    var refValue = vnode.componentInstance || vnode.elm;\r\n    var value = isRemoval ? null : refValue;\r\n    var $refsValue = isRemoval ? undefined : refValue;\r\n    if (isFunction(ref)) {\r\n        invokeWithErrorHandling(ref, vm, [value], vm, \"template ref function\");\r\n        return;\r\n    }\r\n    var isFor = vnode.data.refInFor;\r\n    var _isString = typeof ref === 'string' || typeof ref === 'number';\r\n    var _isRef = isRef(ref);\r\n    var refs = vm.$refs;\r\n    if (_isString || _isRef) {\r\n        if (isFor) {\r\n            var existing = _isString ? refs[ref] : ref.value;\r\n            if (isRemoval) {\r\n                isArray(existing) && remove$2(existing, refValue);\r\n            }\r\n            else {\r\n                if (!isArray(existing)) {\r\n                    if (_isString) {\r\n                        refs[ref] = [refValue];\r\n                        setSetupRef(vm, ref, refs[ref]);\r\n                    }\r\n                    else {\r\n                        ref.value = [refValue];\r\n                    }\r\n                }\r\n                else if (!existing.includes(refValue)) {\r\n                    existing.push(refValue);\r\n                }\r\n            }\r\n        }\r\n        else if (_isString) {\r\n            if (isRemoval && refs[ref] !== refValue) {\r\n                return;\r\n            }\r\n            refs[ref] = $refsValue;\r\n            setSetupRef(vm, ref, value);\r\n        }\r\n        else if (_isRef) {\r\n            if (isRemoval && ref.value !== refValue) {\r\n                return;\r\n            }\r\n            ref.value = value;\r\n        }\r\n        else if (true) {\r\n            warn$2(\"Invalid template ref type: \".concat(typeof ref));\r\n        }\r\n    }\r\n}\r\nfunction setSetupRef(_a, key, val) {\r\n    var _setupState = _a._setupState;\r\n    if (_setupState && hasOwn(_setupState, key)) {\r\n        if (isRef(_setupState[key])) {\r\n            _setupState[key].value = val;\r\n        }\r\n        else {\r\n            _setupState[key] = val;\r\n        }\r\n    }\r\n}\n\n/**\r\n * Virtual DOM patching algorithm based on Snabbdom by\r\n * Simon Friis Vindum (@paldepind)\r\n * Licensed under the MIT License\r\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\r\n *\r\n * modified by Evan You (@yyx990803)\r\n *\r\n * Not type-checking this because this file is perf-critical and the cost\r\n * of making flow understand it is not worth it.\r\n */\r\nvar emptyNode = new VNode('', {}, []);\r\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\r\nfunction sameVnode(a, b) {\r\n    return (a.key === b.key &&\r\n        a.asyncFactory === b.asyncFactory &&\r\n        ((a.tag === b.tag &&\r\n            a.isComment === b.isComment &&\r\n            isDef(a.data) === isDef(b.data) &&\r\n            sameInputType(a, b)) ||\r\n            (isTrue(a.isAsyncPlaceholder) && isUndef(b.asyncFactory.error))));\r\n}\r\nfunction sameInputType(a, b) {\r\n    if (a.tag !== 'input')\r\n        return true;\r\n    var i;\r\n    var typeA = isDef((i = a.data)) && isDef((i = i.attrs)) && i.type;\r\n    var typeB = isDef((i = b.data)) && isDef((i = i.attrs)) && i.type;\r\n    return typeA === typeB || (isTextInputType(typeA) && isTextInputType(typeB));\r\n}\r\nfunction createKeyToOldIdx(children, beginIdx, endIdx) {\r\n    var i, key;\r\n    var map = {};\r\n    for (i = beginIdx; i <= endIdx; ++i) {\r\n        key = children[i].key;\r\n        if (isDef(key))\r\n            map[key] = i;\r\n    }\r\n    return map;\r\n}\r\nfunction createPatchFunction(backend) {\r\n    var i, j;\r\n    var cbs = {};\r\n    var modules = backend.modules, nodeOps = backend.nodeOps;\r\n    for (i = 0; i < hooks.length; ++i) {\r\n        cbs[hooks[i]] = [];\r\n        for (j = 0; j < modules.length; ++j) {\r\n            if (isDef(modules[j][hooks[i]])) {\r\n                cbs[hooks[i]].push(modules[j][hooks[i]]);\r\n            }\r\n        }\r\n    }\r\n    function emptyNodeAt(elm) {\r\n        return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);\r\n    }\r\n    function createRmCb(childElm, listeners) {\r\n        function remove() {\r\n            if (--remove.listeners === 0) {\r\n                removeNode(childElm);\r\n            }\r\n        }\r\n        remove.listeners = listeners;\r\n        return remove;\r\n    }\r\n    function removeNode(el) {\r\n        var parent = nodeOps.parentNode(el);\r\n        // element may have already been removed due to v-html / v-text\r\n        if (isDef(parent)) {\r\n            nodeOps.removeChild(parent, el);\r\n        }\r\n    }\r\n    function isUnknownElement(vnode, inVPre) {\r\n        return (!inVPre &&\r\n            !vnode.ns &&\r\n            !(config.ignoredElements.length &&\r\n                config.ignoredElements.some(function (ignore) {\r\n                    return isRegExp(ignore)\r\n                        ? ignore.test(vnode.tag)\r\n                        : ignore === vnode.tag;\r\n                })) &&\r\n            config.isUnknownElement(vnode.tag));\r\n    }\r\n    var creatingElmInVPre = 0;\r\n    function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {\r\n        if (isDef(vnode.elm) && isDef(ownerArray)) {\r\n            // This vnode was used in a previous render!\r\n            // now it's used as a new node, overwriting its elm would cause\r\n            // potential patch errors down the road when it's used as an insertion\r\n            // reference node. Instead, we clone the node on-demand before creating\r\n            // associated DOM element for it.\r\n            vnode = ownerArray[index] = cloneVNode(vnode);\r\n        }\r\n        vnode.isRootInsert = !nested; // for transition enter check\r\n        if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\r\n            return;\r\n        }\r\n        var data = vnode.data;\r\n        var children = vnode.children;\r\n        var tag = vnode.tag;\r\n        if (isDef(tag)) {\r\n            if (true) {\r\n                if (data && data.pre) {\r\n                    creatingElmInVPre++;\r\n                }\r\n                if (isUnknownElement(vnode, creatingElmInVPre)) {\r\n                    warn$2('Unknown custom element: <' +\r\n                        tag +\r\n                        '> - did you ' +\r\n                        'register the component correctly? For recursive components, ' +\r\n                        'make sure to provide the \"name\" option.', vnode.context);\r\n                }\r\n            }\r\n            vnode.elm = vnode.ns\r\n                ? nodeOps.createElementNS(vnode.ns, tag)\r\n                : nodeOps.createElement(tag, vnode);\r\n            setScope(vnode);\r\n            createChildren(vnode, children, insertedVnodeQueue);\r\n            if (isDef(data)) {\r\n                invokeCreateHooks(vnode, insertedVnodeQueue);\r\n            }\r\n            insert(parentElm, vnode.elm, refElm);\r\n            if ( true && data && data.pre) {\r\n                creatingElmInVPre--;\r\n            }\r\n        }\r\n        else if (isTrue(vnode.isComment)) {\r\n            vnode.elm = nodeOps.createComment(vnode.text);\r\n            insert(parentElm, vnode.elm, refElm);\r\n        }\r\n        else {\r\n            vnode.elm = nodeOps.createTextNode(vnode.text);\r\n            insert(parentElm, vnode.elm, refElm);\r\n        }\r\n    }\r\n    function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\r\n        var i = vnode.data;\r\n        if (isDef(i)) {\r\n            var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\r\n            if (isDef((i = i.hook)) && isDef((i = i.init))) {\r\n                i(vnode, false /* hydrating */);\r\n            }\r\n            // after calling the init hook, if the vnode is a child component\r\n            // it should've created a child instance and mounted it. the child\r\n            // component also has set the placeholder vnode's elm.\r\n            // in that case we can just return the element and be done.\r\n            if (isDef(vnode.componentInstance)) {\r\n                initComponent(vnode, insertedVnodeQueue);\r\n                insert(parentElm, vnode.elm, refElm);\r\n                if (isTrue(isReactivated)) {\r\n                    reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    function initComponent(vnode, insertedVnodeQueue) {\r\n        if (isDef(vnode.data.pendingInsert)) {\r\n            insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\r\n            vnode.data.pendingInsert = null;\r\n        }\r\n        vnode.elm = vnode.componentInstance.$el;\r\n        if (isPatchable(vnode)) {\r\n            invokeCreateHooks(vnode, insertedVnodeQueue);\r\n            setScope(vnode);\r\n        }\r\n        else {\r\n            // empty component root.\r\n            // skip all element-related modules except for ref (#3455)\r\n            registerRef(vnode);\r\n            // make sure to invoke the insert hook\r\n            insertedVnodeQueue.push(vnode);\r\n        }\r\n    }\r\n    function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\r\n        var i;\r\n        // hack for #4339: a reactivated component with inner transition\r\n        // does not trigger because the inner node's created hooks are not called\r\n        // again. It's not ideal to involve module-specific logic in here but\r\n        // there doesn't seem to be a better way to do it.\r\n        var innerNode = vnode;\r\n        while (innerNode.componentInstance) {\r\n            innerNode = innerNode.componentInstance._vnode;\r\n            if (isDef((i = innerNode.data)) && isDef((i = i.transition))) {\r\n                for (i = 0; i < cbs.activate.length; ++i) {\r\n                    cbs.activate[i](emptyNode, innerNode);\r\n                }\r\n                insertedVnodeQueue.push(innerNode);\r\n                break;\r\n            }\r\n        }\r\n        // unlike a newly created component,\r\n        // a reactivated keep-alive component doesn't insert itself\r\n        insert(parentElm, vnode.elm, refElm);\r\n    }\r\n    function insert(parent, elm, ref) {\r\n        if (isDef(parent)) {\r\n            if (isDef(ref)) {\r\n                if (nodeOps.parentNode(ref) === parent) {\r\n                    nodeOps.insertBefore(parent, elm, ref);\r\n                }\r\n            }\r\n            else {\r\n                nodeOps.appendChild(parent, elm);\r\n            }\r\n        }\r\n    }\r\n    function createChildren(vnode, children, insertedVnodeQueue) {\r\n        if (isArray(children)) {\r\n            if (true) {\r\n                checkDuplicateKeys(children);\r\n            }\r\n            for (var i_1 = 0; i_1 < children.length; ++i_1) {\r\n                createElm(children[i_1], insertedVnodeQueue, vnode.elm, null, true, children, i_1);\r\n            }\r\n        }\r\n        else if (isPrimitive(vnode.text)) {\r\n            nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\r\n        }\r\n    }\r\n    function isPatchable(vnode) {\r\n        while (vnode.componentInstance) {\r\n            vnode = vnode.componentInstance._vnode;\r\n        }\r\n        return isDef(vnode.tag);\r\n    }\r\n    function invokeCreateHooks(vnode, insertedVnodeQueue) {\r\n        for (var i_2 = 0; i_2 < cbs.create.length; ++i_2) {\r\n            cbs.create[i_2](emptyNode, vnode);\r\n        }\r\n        i = vnode.data.hook; // Reuse variable\r\n        if (isDef(i)) {\r\n            if (isDef(i.create))\r\n                i.create(emptyNode, vnode);\r\n            if (isDef(i.insert))\r\n                insertedVnodeQueue.push(vnode);\r\n        }\r\n    }\r\n    // set scope id attribute for scoped CSS.\r\n    // this is implemented as a special case to avoid the overhead\r\n    // of going through the normal attribute patching process.\r\n    function setScope(vnode) {\r\n        var i;\r\n        if (isDef((i = vnode.fnScopeId))) {\r\n            nodeOps.setStyleScope(vnode.elm, i);\r\n        }\r\n        else {\r\n            var ancestor = vnode;\r\n            while (ancestor) {\r\n                if (isDef((i = ancestor.context)) && isDef((i = i.$options._scopeId))) {\r\n                    nodeOps.setStyleScope(vnode.elm, i);\r\n                }\r\n                ancestor = ancestor.parent;\r\n            }\r\n        }\r\n        // for slot content they should also get the scopeId from the host instance.\r\n        if (isDef((i = activeInstance)) &&\r\n            i !== vnode.context &&\r\n            i !== vnode.fnContext &&\r\n            isDef((i = i.$options._scopeId))) {\r\n            nodeOps.setStyleScope(vnode.elm, i);\r\n        }\r\n    }\r\n    function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\r\n        for (; startIdx <= endIdx; ++startIdx) {\r\n            createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\r\n        }\r\n    }\r\n    function invokeDestroyHook(vnode) {\r\n        var i, j;\r\n        var data = vnode.data;\r\n        if (isDef(data)) {\r\n            if (isDef((i = data.hook)) && isDef((i = i.destroy)))\r\n                i(vnode);\r\n            for (i = 0; i < cbs.destroy.length; ++i)\r\n                cbs.destroy[i](vnode);\r\n        }\r\n        if (isDef((i = vnode.children))) {\r\n            for (j = 0; j < vnode.children.length; ++j) {\r\n                invokeDestroyHook(vnode.children[j]);\r\n            }\r\n        }\r\n    }\r\n    function removeVnodes(vnodes, startIdx, endIdx) {\r\n        for (; startIdx <= endIdx; ++startIdx) {\r\n            var ch = vnodes[startIdx];\r\n            if (isDef(ch)) {\r\n                if (isDef(ch.tag)) {\r\n                    removeAndInvokeRemoveHook(ch);\r\n                    invokeDestroyHook(ch);\r\n                }\r\n                else {\r\n                    // Text node\r\n                    removeNode(ch.elm);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function removeAndInvokeRemoveHook(vnode, rm) {\r\n        if (isDef(rm) || isDef(vnode.data)) {\r\n            var i_3;\r\n            var listeners = cbs.remove.length + 1;\r\n            if (isDef(rm)) {\r\n                // we have a recursively passed down rm callback\r\n                // increase the listeners count\r\n                rm.listeners += listeners;\r\n            }\r\n            else {\r\n                // directly removing\r\n                rm = createRmCb(vnode.elm, listeners);\r\n            }\r\n            // recursively invoke hooks on child component root node\r\n            if (isDef((i_3 = vnode.componentInstance)) &&\r\n                isDef((i_3 = i_3._vnode)) &&\r\n                isDef(i_3.data)) {\r\n                removeAndInvokeRemoveHook(i_3, rm);\r\n            }\r\n            for (i_3 = 0; i_3 < cbs.remove.length; ++i_3) {\r\n                cbs.remove[i_3](vnode, rm);\r\n            }\r\n            if (isDef((i_3 = vnode.data.hook)) && isDef((i_3 = i_3.remove))) {\r\n                i_3(vnode, rm);\r\n            }\r\n            else {\r\n                rm();\r\n            }\r\n        }\r\n        else {\r\n            removeNode(vnode.elm);\r\n        }\r\n    }\r\n    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\r\n        var oldStartIdx = 0;\r\n        var newStartIdx = 0;\r\n        var oldEndIdx = oldCh.length - 1;\r\n        var oldStartVnode = oldCh[0];\r\n        var oldEndVnode = oldCh[oldEndIdx];\r\n        var newEndIdx = newCh.length - 1;\r\n        var newStartVnode = newCh[0];\r\n        var newEndVnode = newCh[newEndIdx];\r\n        var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\r\n        // removeOnly is a special flag used only by <transition-group>\r\n        // to ensure removed elements stay in correct relative positions\r\n        // during leaving transitions\r\n        var canMove = !removeOnly;\r\n        if (true) {\r\n            checkDuplicateKeys(newCh);\r\n        }\r\n        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\r\n            if (isUndef(oldStartVnode)) {\r\n                oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\r\n            }\r\n            else if (isUndef(oldEndVnode)) {\r\n                oldEndVnode = oldCh[--oldEndIdx];\r\n            }\r\n            else if (sameVnode(oldStartVnode, newStartVnode)) {\r\n                patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\r\n                oldStartVnode = oldCh[++oldStartIdx];\r\n                newStartVnode = newCh[++newStartIdx];\r\n            }\r\n            else if (sameVnode(oldEndVnode, newEndVnode)) {\r\n                patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\r\n                oldEndVnode = oldCh[--oldEndIdx];\r\n                newEndVnode = newCh[--newEndIdx];\r\n            }\r\n            else if (sameVnode(oldStartVnode, newEndVnode)) {\r\n                // Vnode moved right\r\n                patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\r\n                canMove &&\r\n                    nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\r\n                oldStartVnode = oldCh[++oldStartIdx];\r\n                newEndVnode = newCh[--newEndIdx];\r\n            }\r\n            else if (sameVnode(oldEndVnode, newStartVnode)) {\r\n                // Vnode moved left\r\n                patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\r\n                canMove &&\r\n                    nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\r\n                oldEndVnode = oldCh[--oldEndIdx];\r\n                newStartVnode = newCh[++newStartIdx];\r\n            }\r\n            else {\r\n                if (isUndef(oldKeyToIdx))\r\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\r\n                idxInOld = isDef(newStartVnode.key)\r\n                    ? oldKeyToIdx[newStartVnode.key]\r\n                    : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\r\n                if (isUndef(idxInOld)) {\r\n                    // New element\r\n                    createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\r\n                }\r\n                else {\r\n                    vnodeToMove = oldCh[idxInOld];\r\n                    if (sameVnode(vnodeToMove, newStartVnode)) {\r\n                        patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\r\n                        oldCh[idxInOld] = undefined;\r\n                        canMove &&\r\n                            nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\r\n                    }\r\n                    else {\r\n                        // same key but different element. treat as new element\r\n                        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\r\n                    }\r\n                }\r\n                newStartVnode = newCh[++newStartIdx];\r\n            }\r\n        }\r\n        if (oldStartIdx > oldEndIdx) {\r\n            refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\r\n            addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\r\n        }\r\n        else if (newStartIdx > newEndIdx) {\r\n            removeVnodes(oldCh, oldStartIdx, oldEndIdx);\r\n        }\r\n    }\r\n    function checkDuplicateKeys(children) {\r\n        var seenKeys = {};\r\n        for (var i_4 = 0; i_4 < children.length; i_4++) {\r\n            var vnode = children[i_4];\r\n            var key = vnode.key;\r\n            if (isDef(key)) {\r\n                if (seenKeys[key]) {\r\n                    warn$2(\"Duplicate keys detected: '\".concat(key, \"'. This may cause an update error.\"), vnode.context);\r\n                }\r\n                else {\r\n                    seenKeys[key] = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function findIdxInOld(node, oldCh, start, end) {\r\n        for (var i_5 = start; i_5 < end; i_5++) {\r\n            var c = oldCh[i_5];\r\n            if (isDef(c) && sameVnode(node, c))\r\n                return i_5;\r\n        }\r\n    }\r\n    function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {\r\n        if (oldVnode === vnode) {\r\n            return;\r\n        }\r\n        if (isDef(vnode.elm) && isDef(ownerArray)) {\r\n            // clone reused vnode\r\n            vnode = ownerArray[index] = cloneVNode(vnode);\r\n        }\r\n        var elm = (vnode.elm = oldVnode.elm);\r\n        if (isTrue(oldVnode.isAsyncPlaceholder)) {\r\n            if (isDef(vnode.asyncFactory.resolved)) {\r\n                hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\r\n            }\r\n            else {\r\n                vnode.isAsyncPlaceholder = true;\r\n            }\r\n            return;\r\n        }\r\n        // reuse element for static trees.\r\n        // note we only do this if the vnode is cloned -\r\n        // if the new node is not cloned it means the render functions have been\r\n        // reset by the hot-reload-api and we need to do a proper re-render.\r\n        if (isTrue(vnode.isStatic) &&\r\n            isTrue(oldVnode.isStatic) &&\r\n            vnode.key === oldVnode.key &&\r\n            (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {\r\n            vnode.componentInstance = oldVnode.componentInstance;\r\n            return;\r\n        }\r\n        var i;\r\n        var data = vnode.data;\r\n        if (isDef(data) && isDef((i = data.hook)) && isDef((i = i.prepatch))) {\r\n            i(oldVnode, vnode);\r\n        }\r\n        var oldCh = oldVnode.children;\r\n        var ch = vnode.children;\r\n        if (isDef(data) && isPatchable(vnode)) {\r\n            for (i = 0; i < cbs.update.length; ++i)\r\n                cbs.update[i](oldVnode, vnode);\r\n            if (isDef((i = data.hook)) && isDef((i = i.update)))\r\n                i(oldVnode, vnode);\r\n        }\r\n        if (isUndef(vnode.text)) {\r\n            if (isDef(oldCh) && isDef(ch)) {\r\n                if (oldCh !== ch)\r\n                    updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);\r\n            }\r\n            else if (isDef(ch)) {\r\n                if (true) {\r\n                    checkDuplicateKeys(ch);\r\n                }\r\n                if (isDef(oldVnode.text))\r\n                    nodeOps.setTextContent(elm, '');\r\n                addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\r\n            }\r\n            else if (isDef(oldCh)) {\r\n                removeVnodes(oldCh, 0, oldCh.length - 1);\r\n            }\r\n            else if (isDef(oldVnode.text)) {\r\n                nodeOps.setTextContent(elm, '');\r\n            }\r\n        }\r\n        else if (oldVnode.text !== vnode.text) {\r\n            nodeOps.setTextContent(elm, vnode.text);\r\n        }\r\n        if (isDef(data)) {\r\n            if (isDef((i = data.hook)) && isDef((i = i.postpatch)))\r\n                i(oldVnode, vnode);\r\n        }\r\n    }\r\n    function invokeInsertHook(vnode, queue, initial) {\r\n        // delay insert hooks for component root nodes, invoke them after the\r\n        // element is really inserted\r\n        if (isTrue(initial) && isDef(vnode.parent)) {\r\n            vnode.parent.data.pendingInsert = queue;\r\n        }\r\n        else {\r\n            for (var i_6 = 0; i_6 < queue.length; ++i_6) {\r\n                queue[i_6].data.hook.insert(queue[i_6]);\r\n            }\r\n        }\r\n    }\r\n    var hydrationBailed = false;\r\n    // list of modules that can skip create hook during hydration because they\r\n    // are already rendered on the client or has no need for initialization\r\n    // Note: style is excluded because it relies on initial clone for future\r\n    // deep updates (#7063).\r\n    var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\r\n    // Note: this is a browser-only function so we can assume elms are DOM nodes.\r\n    function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {\r\n        var i;\r\n        var tag = vnode.tag, data = vnode.data, children = vnode.children;\r\n        inVPre = inVPre || (data && data.pre);\r\n        vnode.elm = elm;\r\n        if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\r\n            vnode.isAsyncPlaceholder = true;\r\n            return true;\r\n        }\r\n        // assert node match\r\n        if (true) {\r\n            if (!assertNodeMatch(elm, vnode, inVPre)) {\r\n                return false;\r\n            }\r\n        }\r\n        if (isDef(data)) {\r\n            if (isDef((i = data.hook)) && isDef((i = i.init)))\r\n                i(vnode, true /* hydrating */);\r\n            if (isDef((i = vnode.componentInstance))) {\r\n                // child component. it should have hydrated its own tree.\r\n                initComponent(vnode, insertedVnodeQueue);\r\n                return true;\r\n            }\r\n        }\r\n        if (isDef(tag)) {\r\n            if (isDef(children)) {\r\n                // empty element, allow client to pick up and populate children\r\n                if (!elm.hasChildNodes()) {\r\n                    createChildren(vnode, children, insertedVnodeQueue);\r\n                }\r\n                else {\r\n                    // v-html and domProps: innerHTML\r\n                    if (isDef((i = data)) &&\r\n                        isDef((i = i.domProps)) &&\r\n                        isDef((i = i.innerHTML))) {\r\n                        if (i !== elm.innerHTML) {\r\n                            /* istanbul ignore if */\r\n                            if ( true &&\r\n                                typeof console !== 'undefined' &&\r\n                                !hydrationBailed) {\r\n                                hydrationBailed = true;\r\n                                console.warn('Parent: ', elm);\r\n                                console.warn('server innerHTML: ', i);\r\n                                console.warn('client innerHTML: ', elm.innerHTML);\r\n                            }\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // iterate and compare children lists\r\n                        var childrenMatch = true;\r\n                        var childNode = elm.firstChild;\r\n                        for (var i_7 = 0; i_7 < children.length; i_7++) {\r\n                            if (!childNode ||\r\n                                !hydrate(childNode, children[i_7], insertedVnodeQueue, inVPre)) {\r\n                                childrenMatch = false;\r\n                                break;\r\n                            }\r\n                            childNode = childNode.nextSibling;\r\n                        }\r\n                        // if childNode is not null, it means the actual childNodes list is\r\n                        // longer than the virtual children list.\r\n                        if (!childrenMatch || childNode) {\r\n                            /* istanbul ignore if */\r\n                            if ( true &&\r\n                                typeof console !== 'undefined' &&\r\n                                !hydrationBailed) {\r\n                                hydrationBailed = true;\r\n                                console.warn('Parent: ', elm);\r\n                                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\r\n                            }\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isDef(data)) {\r\n                var fullInvoke = false;\r\n                for (var key in data) {\r\n                    if (!isRenderedModule(key)) {\r\n                        fullInvoke = true;\r\n                        invokeCreateHooks(vnode, insertedVnodeQueue);\r\n                        break;\r\n                    }\r\n                }\r\n                if (!fullInvoke && data['class']) {\r\n                    // ensure collecting deps for deep class bindings for future updates\r\n                    traverse(data['class']);\r\n                }\r\n            }\r\n        }\r\n        else if (elm.data !== vnode.text) {\r\n            elm.data = vnode.text;\r\n        }\r\n        return true;\r\n    }\r\n    function assertNodeMatch(node, vnode, inVPre) {\r\n        if (isDef(vnode.tag)) {\r\n            return (vnode.tag.indexOf('vue-component') === 0 ||\r\n                (!isUnknownElement(vnode, inVPre) &&\r\n                    vnode.tag.toLowerCase() ===\r\n                        (node.tagName && node.tagName.toLowerCase())));\r\n        }\r\n        else {\r\n            return node.nodeType === (vnode.isComment ? 8 : 3);\r\n        }\r\n    }\r\n    return function patch(oldVnode, vnode, hydrating, removeOnly) {\r\n        if (isUndef(vnode)) {\r\n            if (isDef(oldVnode))\r\n                invokeDestroyHook(oldVnode);\r\n            return;\r\n        }\r\n        var isInitialPatch = false;\r\n        var insertedVnodeQueue = [];\r\n        if (isUndef(oldVnode)) {\r\n            // empty mount (likely as component), create new root element\r\n            isInitialPatch = true;\r\n            createElm(vnode, insertedVnodeQueue);\r\n        }\r\n        else {\r\n            var isRealElement = isDef(oldVnode.nodeType);\r\n            if (!isRealElement && sameVnode(oldVnode, vnode)) {\r\n                // patch existing root node\r\n                patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\r\n            }\r\n            else {\r\n                if (isRealElement) {\r\n                    // mounting to a real element\r\n                    // check if this is server-rendered content and if we can perform\r\n                    // a successful hydration.\r\n                    if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\r\n                        oldVnode.removeAttribute(SSR_ATTR);\r\n                        hydrating = true;\r\n                    }\r\n                    if (isTrue(hydrating)) {\r\n                        if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\r\n                            invokeInsertHook(vnode, insertedVnodeQueue, true);\r\n                            return oldVnode;\r\n                        }\r\n                        else if (true) {\r\n                            warn$2('The client-side rendered virtual DOM tree is not matching ' +\r\n                                'server-rendered content. This is likely caused by incorrect ' +\r\n                                'HTML markup, for example nesting block-level elements inside ' +\r\n                                '<p>, or missing <tbody>. Bailing hydration and performing ' +\r\n                                'full client-side render.');\r\n                        }\r\n                    }\r\n                    // either not server-rendered, or hydration failed.\r\n                    // create an empty node and replace it\r\n                    oldVnode = emptyNodeAt(oldVnode);\r\n                }\r\n                // replacing existing element\r\n                var oldElm = oldVnode.elm;\r\n                var parentElm = nodeOps.parentNode(oldElm);\r\n                // create new node\r\n                createElm(vnode, insertedVnodeQueue, \r\n                // extremely rare edge case: do not insert if old element is in a\r\n                // leaving transition. Only happens when combining transition +\r\n                // keep-alive + HOCs. (#4590)\r\n                oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm));\r\n                // update parent placeholder node element, recursively\r\n                if (isDef(vnode.parent)) {\r\n                    var ancestor = vnode.parent;\r\n                    var patchable = isPatchable(vnode);\r\n                    while (ancestor) {\r\n                        for (var i_8 = 0; i_8 < cbs.destroy.length; ++i_8) {\r\n                            cbs.destroy[i_8](ancestor);\r\n                        }\r\n                        ancestor.elm = vnode.elm;\r\n                        if (patchable) {\r\n                            for (var i_9 = 0; i_9 < cbs.create.length; ++i_9) {\r\n                                cbs.create[i_9](emptyNode, ancestor);\r\n                            }\r\n                            // #6513\r\n                            // invoke insert hooks that may have been merged by create hooks.\r\n                            // e.g. for directives that uses the \"inserted\" hook.\r\n                            var insert_1 = ancestor.data.hook.insert;\r\n                            if (insert_1.merged) {\r\n                                // start at index 1 to avoid re-invoking component mounted hook\r\n                                for (var i_10 = 1; i_10 < insert_1.fns.length; i_10++) {\r\n                                    insert_1.fns[i_10]();\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            registerRef(ancestor);\r\n                        }\r\n                        ancestor = ancestor.parent;\r\n                    }\r\n                }\r\n                // destroy old node\r\n                if (isDef(parentElm)) {\r\n                    removeVnodes([oldVnode], 0, 0);\r\n                }\r\n                else if (isDef(oldVnode.tag)) {\r\n                    invokeDestroyHook(oldVnode);\r\n                }\r\n            }\r\n        }\r\n        invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\r\n        return vnode.elm;\r\n    };\r\n}\n\nvar directives$1 = {\r\n    create: updateDirectives,\r\n    update: updateDirectives,\r\n    destroy: function unbindDirectives(vnode) {\r\n        // @ts-expect-error emptyNode is not VNodeWithData\r\n        updateDirectives(vnode, emptyNode);\r\n    }\r\n};\r\nfunction updateDirectives(oldVnode, vnode) {\r\n    if (oldVnode.data.directives || vnode.data.directives) {\r\n        _update(oldVnode, vnode);\r\n    }\r\n}\r\nfunction _update(oldVnode, vnode) {\r\n    var isCreate = oldVnode === emptyNode;\r\n    var isDestroy = vnode === emptyNode;\r\n    var oldDirs = normalizeDirectives(oldVnode.data.directives, oldVnode.context);\r\n    var newDirs = normalizeDirectives(vnode.data.directives, vnode.context);\r\n    var dirsWithInsert = [];\r\n    var dirsWithPostpatch = [];\r\n    var key, oldDir, dir;\r\n    for (key in newDirs) {\r\n        oldDir = oldDirs[key];\r\n        dir = newDirs[key];\r\n        if (!oldDir) {\r\n            // new directive, bind\r\n            callHook(dir, 'bind', vnode, oldVnode);\r\n            if (dir.def && dir.def.inserted) {\r\n                dirsWithInsert.push(dir);\r\n            }\r\n        }\r\n        else {\r\n            // existing directive, update\r\n            dir.oldValue = oldDir.value;\r\n            dir.oldArg = oldDir.arg;\r\n            callHook(dir, 'update', vnode, oldVnode);\r\n            if (dir.def && dir.def.componentUpdated) {\r\n                dirsWithPostpatch.push(dir);\r\n            }\r\n        }\r\n    }\r\n    if (dirsWithInsert.length) {\r\n        var callInsert = function () {\r\n            for (var i = 0; i < dirsWithInsert.length; i++) {\r\n                callHook(dirsWithInsert[i], 'inserted', vnode, oldVnode);\r\n            }\r\n        };\r\n        if (isCreate) {\r\n            mergeVNodeHook(vnode, 'insert', callInsert);\r\n        }\r\n        else {\r\n            callInsert();\r\n        }\r\n    }\r\n    if (dirsWithPostpatch.length) {\r\n        mergeVNodeHook(vnode, 'postpatch', function () {\r\n            for (var i = 0; i < dirsWithPostpatch.length; i++) {\r\n                callHook(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\r\n            }\r\n        });\r\n    }\r\n    if (!isCreate) {\r\n        for (key in oldDirs) {\r\n            if (!newDirs[key]) {\r\n                // no longer present, unbind\r\n                callHook(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\r\n            }\r\n        }\r\n    }\r\n}\r\nvar emptyModifiers = Object.create(null);\r\nfunction normalizeDirectives(dirs, vm) {\r\n    var res = Object.create(null);\r\n    if (!dirs) {\r\n        // $flow-disable-line\r\n        return res;\r\n    }\r\n    var i, dir;\r\n    for (i = 0; i < dirs.length; i++) {\r\n        dir = dirs[i];\r\n        if (!dir.modifiers) {\r\n            // $flow-disable-line\r\n            dir.modifiers = emptyModifiers;\r\n        }\r\n        res[getRawDirName(dir)] = dir;\r\n        if (vm._setupState && vm._setupState.__sfc) {\r\n            dir.def = dir.def || resolveAsset(vm, '_setupState', 'v-' + dir.name);\r\n        }\r\n        dir.def = dir.def || resolveAsset(vm.$options, 'directives', dir.name, true);\r\n    }\r\n    // $flow-disable-line\r\n    return res;\r\n}\r\nfunction getRawDirName(dir) {\r\n    return (dir.rawName || \"\".concat(dir.name, \".\").concat(Object.keys(dir.modifiers || {}).join('.')));\r\n}\r\nfunction callHook(dir, hook, vnode, oldVnode, isDestroy) {\r\n    var fn = dir.def && dir.def[hook];\r\n    if (fn) {\r\n        try {\r\n            fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\r\n        }\r\n        catch (e) {\r\n            handleError(e, vnode.context, \"directive \".concat(dir.name, \" \").concat(hook, \" hook\"));\r\n        }\r\n    }\r\n}\n\nvar baseModules = [ref, directives$1];\n\nfunction updateAttrs(oldVnode, vnode) {\r\n    var opts = vnode.componentOptions;\r\n    if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\r\n        return;\r\n    }\r\n    if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\r\n        return;\r\n    }\r\n    var key, cur, old;\r\n    var elm = vnode.elm;\r\n    var oldAttrs = oldVnode.data.attrs || {};\r\n    var attrs = vnode.data.attrs || {};\r\n    // clone observed objects, as the user probably wants to mutate it\r\n    if (isDef(attrs.__ob__) || isTrue(attrs._v_attr_proxy)) {\r\n        attrs = vnode.data.attrs = extend({}, attrs);\r\n    }\r\n    for (key in attrs) {\r\n        cur = attrs[key];\r\n        old = oldAttrs[key];\r\n        if (old !== cur) {\r\n            setAttr(elm, key, cur, vnode.data.pre);\r\n        }\r\n    }\r\n    // #4391: in IE9, setting type can reset value for input[type=radio]\r\n    // #6666: IE/Edge forces progress value down to 1 before setting a max\r\n    /* istanbul ignore if */\r\n    if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\r\n        setAttr(elm, 'value', attrs.value);\r\n    }\r\n    for (key in oldAttrs) {\r\n        if (isUndef(attrs[key])) {\r\n            if (isXlink(key)) {\r\n                elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\r\n            }\r\n            else if (!isEnumeratedAttr(key)) {\r\n                elm.removeAttribute(key);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction setAttr(el, key, value, isInPre) {\r\n    if (isInPre || el.tagName.indexOf('-') > -1) {\r\n        baseSetAttr(el, key, value);\r\n    }\r\n    else if (isBooleanAttr(key)) {\r\n        // set attribute for blank value\r\n        // e.g. <option disabled>Select one</option>\r\n        if (isFalsyAttrValue(value)) {\r\n            el.removeAttribute(key);\r\n        }\r\n        else {\r\n            // technically allowfullscreen is a boolean attribute for <iframe>,\r\n            // but Flash expects a value of \"true\" when used on <embed> tag\r\n            value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;\r\n            el.setAttribute(key, value);\r\n        }\r\n    }\r\n    else if (isEnumeratedAttr(key)) {\r\n        el.setAttribute(key, convertEnumeratedValue(key, value));\r\n    }\r\n    else if (isXlink(key)) {\r\n        if (isFalsyAttrValue(value)) {\r\n            el.removeAttributeNS(xlinkNS, getXlinkProp(key));\r\n        }\r\n        else {\r\n            el.setAttributeNS(xlinkNS, key, value);\r\n        }\r\n    }\r\n    else {\r\n        baseSetAttr(el, key, value);\r\n    }\r\n}\r\nfunction baseSetAttr(el, key, value) {\r\n    if (isFalsyAttrValue(value)) {\r\n        el.removeAttribute(key);\r\n    }\r\n    else {\r\n        // #7138: IE10 & 11 fires input event when setting placeholder on\r\n        // <textarea>... block the first input event and remove the blocker\r\n        // immediately.\r\n        /* istanbul ignore if */\r\n        if (isIE &&\r\n            !isIE9 &&\r\n            el.tagName === 'TEXTAREA' &&\r\n            key === 'placeholder' &&\r\n            value !== '' &&\r\n            !el.__ieph) {\r\n            var blocker_1 = function (e) {\r\n                e.stopImmediatePropagation();\r\n                el.removeEventListener('input', blocker_1);\r\n            };\r\n            el.addEventListener('input', blocker_1);\r\n            // $flow-disable-line\r\n            el.__ieph = true; /* IE placeholder patched */\r\n        }\r\n        el.setAttribute(key, value);\r\n    }\r\n}\r\nvar attrs = {\r\n    create: updateAttrs,\r\n    update: updateAttrs\r\n};\n\nfunction updateClass(oldVnode, vnode) {\r\n    var el = vnode.elm;\r\n    var data = vnode.data;\r\n    var oldData = oldVnode.data;\r\n    if (isUndef(data.staticClass) &&\r\n        isUndef(data.class) &&\r\n        (isUndef(oldData) ||\r\n            (isUndef(oldData.staticClass) && isUndef(oldData.class)))) {\r\n        return;\r\n    }\r\n    var cls = genClassForVnode(vnode);\r\n    // handle transition classes\r\n    var transitionClass = el._transitionClasses;\r\n    if (isDef(transitionClass)) {\r\n        cls = concat(cls, stringifyClass(transitionClass));\r\n    }\r\n    // set the class\r\n    if (cls !== el._prevClass) {\r\n        el.setAttribute('class', cls);\r\n        el._prevClass = cls;\r\n    }\r\n}\r\nvar klass$1 = {\r\n    create: updateClass,\r\n    update: updateClass\r\n};\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\r\nfunction parseFilters(exp) {\r\n    var inSingle = false;\r\n    var inDouble = false;\r\n    var inTemplateString = false;\r\n    var inRegex = false;\r\n    var curly = 0;\r\n    var square = 0;\r\n    var paren = 0;\r\n    var lastFilterIndex = 0;\r\n    var c, prev, i, expression, filters;\r\n    for (i = 0; i < exp.length; i++) {\r\n        prev = c;\r\n        c = exp.charCodeAt(i);\r\n        if (inSingle) {\r\n            if (c === 0x27 && prev !== 0x5c)\r\n                inSingle = false;\r\n        }\r\n        else if (inDouble) {\r\n            if (c === 0x22 && prev !== 0x5c)\r\n                inDouble = false;\r\n        }\r\n        else if (inTemplateString) {\r\n            if (c === 0x60 && prev !== 0x5c)\r\n                inTemplateString = false;\r\n        }\r\n        else if (inRegex) {\r\n            if (c === 0x2f && prev !== 0x5c)\r\n                inRegex = false;\r\n        }\r\n        else if (c === 0x7c && // pipe\r\n            exp.charCodeAt(i + 1) !== 0x7c &&\r\n            exp.charCodeAt(i - 1) !== 0x7c &&\r\n            !curly &&\r\n            !square &&\r\n            !paren) {\r\n            if (expression === undefined) {\r\n                // first filter, end of expression\r\n                lastFilterIndex = i + 1;\r\n                expression = exp.slice(0, i).trim();\r\n            }\r\n            else {\r\n                pushFilter();\r\n            }\r\n        }\r\n        else {\r\n            switch (c) {\r\n                case 0x22:\r\n                    inDouble = true;\r\n                    break; // \"\r\n                case 0x27:\r\n                    inSingle = true;\r\n                    break; // '\r\n                case 0x60:\r\n                    inTemplateString = true;\r\n                    break; // `\r\n                case 0x28:\r\n                    paren++;\r\n                    break; // (\r\n                case 0x29:\r\n                    paren--;\r\n                    break; // )\r\n                case 0x5b:\r\n                    square++;\r\n                    break; // [\r\n                case 0x5d:\r\n                    square--;\r\n                    break; // ]\r\n                case 0x7b:\r\n                    curly++;\r\n                    break; // {\r\n                case 0x7d:\r\n                    curly--;\r\n                    break; // }\r\n            }\r\n            if (c === 0x2f) {\r\n                // /\r\n                var j = i - 1;\r\n                var p \r\n                // find first non-whitespace prev char\r\n                = void 0;\r\n                // find first non-whitespace prev char\r\n                for (; j >= 0; j--) {\r\n                    p = exp.charAt(j);\r\n                    if (p !== ' ')\r\n                        break;\r\n                }\r\n                if (!p || !validDivisionCharRE.test(p)) {\r\n                    inRegex = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (expression === undefined) {\r\n        expression = exp.slice(0, i).trim();\r\n    }\r\n    else if (lastFilterIndex !== 0) {\r\n        pushFilter();\r\n    }\r\n    function pushFilter() {\r\n        (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\r\n        lastFilterIndex = i + 1;\r\n    }\r\n    if (filters) {\r\n        for (i = 0; i < filters.length; i++) {\r\n            expression = wrapFilter(expression, filters[i]);\r\n        }\r\n    }\r\n    return expression;\r\n}\r\nfunction wrapFilter(exp, filter) {\r\n    var i = filter.indexOf('(');\r\n    if (i < 0) {\r\n        // _f: resolveFilter\r\n        return \"_f(\\\"\".concat(filter, \"\\\")(\").concat(exp, \")\");\r\n    }\r\n    else {\r\n        var name_1 = filter.slice(0, i);\r\n        var args = filter.slice(i + 1);\r\n        return \"_f(\\\"\".concat(name_1, \"\\\")(\").concat(exp).concat(args !== ')' ? ',' + args : args);\r\n    }\r\n}\n\n/* eslint-disable no-unused-vars */\r\nfunction baseWarn(msg, range) {\r\n    console.error(\"[Vue compiler]: \".concat(msg));\r\n}\r\n/* eslint-enable no-unused-vars */\r\nfunction pluckModuleFunction(modules, key) {\r\n    return modules ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; }) : [];\r\n}\r\nfunction addProp(el, name, value, range, dynamic) {\r\n    (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\r\n    el.plain = false;\r\n}\r\nfunction addAttr(el, name, value, range, dynamic) {\r\n    var attrs = dynamic\r\n        ? el.dynamicAttrs || (el.dynamicAttrs = [])\r\n        : el.attrs || (el.attrs = []);\r\n    attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\r\n    el.plain = false;\r\n}\r\n// add a raw attr (use this in preTransforms)\r\nfunction addRawAttr(el, name, value, range) {\r\n    el.attrsMap[name] = value;\r\n    el.attrsList.push(rangeSetItem({ name: name, value: value }, range));\r\n}\r\nfunction addDirective(el, name, rawName, value, arg, isDynamicArg, modifiers, range) {\r\n    (el.directives || (el.directives = [])).push(rangeSetItem({\r\n        name: name,\r\n        rawName: rawName,\r\n        value: value,\r\n        arg: arg,\r\n        isDynamicArg: isDynamicArg,\r\n        modifiers: modifiers\r\n    }, range));\r\n    el.plain = false;\r\n}\r\nfunction prependModifierMarker(symbol, name, dynamic) {\r\n    return dynamic ? \"_p(\".concat(name, \",\\\"\").concat(symbol, \"\\\")\") : symbol + name; // mark the event as captured\r\n}\r\nfunction addHandler(el, name, value, modifiers, important, warn, range, dynamic) {\r\n    modifiers = modifiers || emptyObject;\r\n    // warn prevent and passive modifier\r\n    /* istanbul ignore if */\r\n    if ( true && warn && modifiers.prevent && modifiers.passive) {\r\n        warn(\"passive and prevent can't be used together. \" +\r\n            \"Passive handler can't prevent default event.\", range);\r\n    }\r\n    // normalize click.right and click.middle since they don't actually fire\r\n    // this is technically browser-specific, but at least for now browsers are\r\n    // the only target envs that have right/middle clicks.\r\n    if (modifiers.right) {\r\n        if (dynamic) {\r\n            name = \"(\".concat(name, \")==='click'?'contextmenu':(\").concat(name, \")\");\r\n        }\r\n        else if (name === 'click') {\r\n            name = 'contextmenu';\r\n            delete modifiers.right;\r\n        }\r\n    }\r\n    else if (modifiers.middle) {\r\n        if (dynamic) {\r\n            name = \"(\".concat(name, \")==='click'?'mouseup':(\").concat(name, \")\");\r\n        }\r\n        else if (name === 'click') {\r\n            name = 'mouseup';\r\n        }\r\n    }\r\n    // check capture modifier\r\n    if (modifiers.capture) {\r\n        delete modifiers.capture;\r\n        name = prependModifierMarker('!', name, dynamic);\r\n    }\r\n    if (modifiers.once) {\r\n        delete modifiers.once;\r\n        name = prependModifierMarker('~', name, dynamic);\r\n    }\r\n    /* istanbul ignore if */\r\n    if (modifiers.passive) {\r\n        delete modifiers.passive;\r\n        name = prependModifierMarker('&', name, dynamic);\r\n    }\r\n    var events;\r\n    if (modifiers.native) {\r\n        delete modifiers.native;\r\n        events = el.nativeEvents || (el.nativeEvents = {});\r\n    }\r\n    else {\r\n        events = el.events || (el.events = {});\r\n    }\r\n    var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);\r\n    if (modifiers !== emptyObject) {\r\n        newHandler.modifiers = modifiers;\r\n    }\r\n    var handlers = events[name];\r\n    /* istanbul ignore if */\r\n    if (Array.isArray(handlers)) {\r\n        important ? handlers.unshift(newHandler) : handlers.push(newHandler);\r\n    }\r\n    else if (handlers) {\r\n        events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\r\n    }\r\n    else {\r\n        events[name] = newHandler;\r\n    }\r\n    el.plain = false;\r\n}\r\nfunction getRawBindingAttr(el, name) {\r\n    return (el.rawAttrsMap[':' + name] ||\r\n        el.rawAttrsMap['v-bind:' + name] ||\r\n        el.rawAttrsMap[name]);\r\n}\r\nfunction getBindingAttr(el, name, getStatic) {\r\n    var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);\r\n    if (dynamicValue != null) {\r\n        return parseFilters(dynamicValue);\r\n    }\r\n    else if (getStatic !== false) {\r\n        var staticValue = getAndRemoveAttr(el, name);\r\n        if (staticValue != null) {\r\n            return JSON.stringify(staticValue);\r\n        }\r\n    }\r\n}\r\n// note: this only removes the attr from the Array (attrsList) so that it\r\n// doesn't get processed by processAttrs.\r\n// By default it does NOT remove it from the map (attrsMap) because the map is\r\n// needed during codegen.\r\nfunction getAndRemoveAttr(el, name, removeFromMap) {\r\n    var val;\r\n    if ((val = el.attrsMap[name]) != null) {\r\n        var list = el.attrsList;\r\n        for (var i = 0, l = list.length; i < l; i++) {\r\n            if (list[i].name === name) {\r\n                list.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (removeFromMap) {\r\n        delete el.attrsMap[name];\r\n    }\r\n    return val;\r\n}\r\nfunction getAndRemoveAttrByRegex(el, name) {\r\n    var list = el.attrsList;\r\n    for (var i = 0, l = list.length; i < l; i++) {\r\n        var attr = list[i];\r\n        if (name.test(attr.name)) {\r\n            list.splice(i, 1);\r\n            return attr;\r\n        }\r\n    }\r\n}\r\nfunction rangeSetItem(item, range) {\r\n    if (range) {\r\n        if (range.start != null) {\r\n            item.start = range.start;\r\n        }\r\n        if (range.end != null) {\r\n            item.end = range.end;\r\n        }\r\n    }\r\n    return item;\r\n}\n\n/**\r\n * Cross-platform code generation for component v-model\r\n */\r\nfunction genComponentModel(el, value, modifiers) {\r\n    var _a = modifiers || {}, number = _a.number, trim = _a.trim;\r\n    var baseValueExpression = '$$v';\r\n    var valueExpression = baseValueExpression;\r\n    if (trim) {\r\n        valueExpression =\r\n            \"(typeof \".concat(baseValueExpression, \" === 'string'\") +\r\n                \"? \".concat(baseValueExpression, \".trim()\") +\r\n                \": \".concat(baseValueExpression, \")\");\r\n    }\r\n    if (number) {\r\n        valueExpression = \"_n(\".concat(valueExpression, \")\");\r\n    }\r\n    var assignment = genAssignmentCode(value, valueExpression);\r\n    el.model = {\r\n        value: \"(\".concat(value, \")\"),\r\n        expression: JSON.stringify(value),\r\n        callback: \"function (\".concat(baseValueExpression, \") {\").concat(assignment, \"}\")\r\n    };\r\n}\r\n/**\r\n * Cross-platform codegen helper for generating v-model value assignment code.\r\n */\r\nfunction genAssignmentCode(value, assignment) {\r\n    var res = parseModel(value);\r\n    if (res.key === null) {\r\n        return \"\".concat(value, \"=\").concat(assignment);\r\n    }\r\n    else {\r\n        return \"$set(\".concat(res.exp, \", \").concat(res.key, \", \").concat(assignment, \")\");\r\n    }\r\n}\r\n/**\r\n * Parse a v-model expression into a base path and a final key segment.\r\n * Handles both dot-path and possible square brackets.\r\n *\r\n * Possible cases:\r\n *\r\n * - test\r\n * - test[key]\r\n * - test[test1[key]]\r\n * - test[\"a\"][key]\r\n * - xxx.test[a[a].test1[key]]\r\n * - test.xxx.a[\"asa\"][test1[key]]\r\n *\r\n */\r\nvar len, str, chr, index, expressionPos, expressionEndPos;\r\nfunction parseModel(val) {\r\n    // Fix https://github.com/vuejs/vue/pull/7730\r\n    // allow v-model=\"obj.val \" (trailing whitespace)\r\n    val = val.trim();\r\n    len = val.length;\r\n    if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\r\n        index = val.lastIndexOf('.');\r\n        if (index > -1) {\r\n            return {\r\n                exp: val.slice(0, index),\r\n                key: '\"' + val.slice(index + 1) + '\"'\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                exp: val,\r\n                key: null\r\n            };\r\n        }\r\n    }\r\n    str = val;\r\n    index = expressionPos = expressionEndPos = 0;\r\n    while (!eof()) {\r\n        chr = next();\r\n        /* istanbul ignore if */\r\n        if (isStringStart(chr)) {\r\n            parseString(chr);\r\n        }\r\n        else if (chr === 0x5b) {\r\n            parseBracket(chr);\r\n        }\r\n    }\r\n    return {\r\n        exp: val.slice(0, expressionPos),\r\n        key: val.slice(expressionPos + 1, expressionEndPos)\r\n    };\r\n}\r\nfunction next() {\r\n    return str.charCodeAt(++index);\r\n}\r\nfunction eof() {\r\n    return index >= len;\r\n}\r\nfunction isStringStart(chr) {\r\n    return chr === 0x22 || chr === 0x27;\r\n}\r\nfunction parseBracket(chr) {\r\n    var inBracket = 1;\r\n    expressionPos = index;\r\n    while (!eof()) {\r\n        chr = next();\r\n        if (isStringStart(chr)) {\r\n            parseString(chr);\r\n            continue;\r\n        }\r\n        if (chr === 0x5b)\r\n            inBracket++;\r\n        if (chr === 0x5d)\r\n            inBracket--;\r\n        if (inBracket === 0) {\r\n            expressionEndPos = index;\r\n            break;\r\n        }\r\n    }\r\n}\r\nfunction parseString(chr) {\r\n    var stringQuote = chr;\r\n    while (!eof()) {\r\n        chr = next();\r\n        if (chr === stringQuote) {\r\n            break;\r\n        }\r\n    }\r\n}\n\nvar warn$1;\r\n// in some cases, the event used has to be determined at runtime\r\n// so we used some reserved tokens during compile.\r\nvar RANGE_TOKEN = '__r';\r\nvar CHECKBOX_RADIO_TOKEN = '__c';\r\nfunction model$1(el, dir, _warn) {\r\n    warn$1 = _warn;\r\n    var value = dir.value;\r\n    var modifiers = dir.modifiers;\r\n    var tag = el.tag;\r\n    var type = el.attrsMap.type;\r\n    if (true) {\r\n        // inputs with type=\"file\" are read only and setting the input's\r\n        // value will throw an error.\r\n        if (tag === 'input' && type === 'file') {\r\n            warn$1(\"<\".concat(el.tag, \" v-model=\\\"\").concat(value, \"\\\" type=\\\"file\\\">:\\n\") +\r\n                \"File inputs are read only. Use a v-on:change listener instead.\", el.rawAttrsMap['v-model']);\r\n        }\r\n    }\r\n    if (el.component) {\r\n        genComponentModel(el, value, modifiers);\r\n        // component v-model doesn't need extra runtime\r\n        return false;\r\n    }\r\n    else if (tag === 'select') {\r\n        genSelect(el, value, modifiers);\r\n    }\r\n    else if (tag === 'input' && type === 'checkbox') {\r\n        genCheckboxModel(el, value, modifiers);\r\n    }\r\n    else if (tag === 'input' && type === 'radio') {\r\n        genRadioModel(el, value, modifiers);\r\n    }\r\n    else if (tag === 'input' || tag === 'textarea') {\r\n        genDefaultModel(el, value, modifiers);\r\n    }\r\n    else if (!config.isReservedTag(tag)) {\r\n        genComponentModel(el, value, modifiers);\r\n        // component v-model doesn't need extra runtime\r\n        return false;\r\n    }\r\n    else if (true) {\r\n        warn$1(\"<\".concat(el.tag, \" v-model=\\\"\").concat(value, \"\\\">: \") +\r\n            \"v-model is not supported on this element type. \" +\r\n            \"If you are working with contenteditable, it's recommended to \" +\r\n            'wrap a library dedicated for that purpose inside a custom component.', el.rawAttrsMap['v-model']);\r\n    }\r\n    // ensure runtime directive metadata\r\n    return true;\r\n}\r\nfunction genCheckboxModel(el, value, modifiers) {\r\n    var number = modifiers && modifiers.number;\r\n    var valueBinding = getBindingAttr(el, 'value') || 'null';\r\n    var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\r\n    var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\r\n    addProp(el, 'checked', \"Array.isArray(\".concat(value, \")\") +\r\n        \"?_i(\".concat(value, \",\").concat(valueBinding, \")>-1\") +\r\n        (trueValueBinding === 'true'\r\n            ? \":(\".concat(value, \")\")\r\n            : \":_q(\".concat(value, \",\").concat(trueValueBinding, \")\")));\r\n    addHandler(el, 'change', \"var $$a=\".concat(value, \",\") +\r\n        '$$el=$event.target,' +\r\n        \"$$c=$$el.checked?(\".concat(trueValueBinding, \"):(\").concat(falseValueBinding, \");\") +\r\n        'if(Array.isArray($$a)){' +\r\n        \"var $$v=\".concat(number ? '_n(' + valueBinding + ')' : valueBinding, \",\") +\r\n        '$$i=_i($$a,$$v);' +\r\n        \"if($$el.checked){$$i<0&&(\".concat(genAssignmentCode(value, '$$a.concat([$$v])'), \")}\") +\r\n        \"else{$$i>-1&&(\".concat(genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))'), \")}\") +\r\n        \"}else{\".concat(genAssignmentCode(value, '$$c'), \"}\"), null, true);\r\n}\r\nfunction genRadioModel(el, value, modifiers) {\r\n    var number = modifiers && modifiers.number;\r\n    var valueBinding = getBindingAttr(el, 'value') || 'null';\r\n    valueBinding = number ? \"_n(\".concat(valueBinding, \")\") : valueBinding;\r\n    addProp(el, 'checked', \"_q(\".concat(value, \",\").concat(valueBinding, \")\"));\r\n    addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\r\n}\r\nfunction genSelect(el, value, modifiers) {\r\n    var number = modifiers && modifiers.number;\r\n    var selectedVal = \"Array.prototype.filter\" +\r\n        \".call($event.target.options,function(o){return o.selected})\" +\r\n        \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\r\n        \"return \".concat(number ? '_n(val)' : 'val', \"})\");\r\n    var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\r\n    var code = \"var $$selectedVal = \".concat(selectedVal, \";\");\r\n    code = \"\".concat(code, \" \").concat(genAssignmentCode(value, assignment));\r\n    addHandler(el, 'change', code, null, true);\r\n}\r\nfunction genDefaultModel(el, value, modifiers) {\r\n    var type = el.attrsMap.type;\r\n    // warn if v-bind:value conflicts with v-model\r\n    // except for inputs with v-bind:type\r\n    if (true) {\r\n        var value_1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\r\n        var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\r\n        if (value_1 && !typeBinding) {\r\n            var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\r\n            warn$1(\"\".concat(binding, \"=\\\"\").concat(value_1, \"\\\" conflicts with v-model on the same element \") +\r\n                'because the latter already expands to a value binding internally', el.rawAttrsMap[binding]);\r\n        }\r\n    }\r\n    var _a = modifiers || {}, lazy = _a.lazy, number = _a.number, trim = _a.trim;\r\n    var needCompositionGuard = !lazy && type !== 'range';\r\n    var event = lazy ? 'change' : type === 'range' ? RANGE_TOKEN : 'input';\r\n    var valueExpression = '$event.target.value';\r\n    if (trim) {\r\n        valueExpression = \"$event.target.value.trim()\";\r\n    }\r\n    if (number) {\r\n        valueExpression = \"_n(\".concat(valueExpression, \")\");\r\n    }\r\n    var code = genAssignmentCode(value, valueExpression);\r\n    if (needCompositionGuard) {\r\n        code = \"if($event.target.composing)return;\".concat(code);\r\n    }\r\n    addProp(el, 'value', \"(\".concat(value, \")\"));\r\n    addHandler(el, event, code, null, true);\r\n    if (trim || number) {\r\n        addHandler(el, 'blur', '$forceUpdate()');\r\n    }\r\n}\n\n// normalize v-model event tokens that can only be determined at runtime.\r\n// it's important to place the event as the first in the array because\r\n// the whole point is ensuring the v-model callback gets called before\r\n// user-attached handlers.\r\nfunction normalizeEvents(on) {\r\n    /* istanbul ignore if */\r\n    if (isDef(on[RANGE_TOKEN])) {\r\n        // IE input[type=range] only supports `change` event\r\n        var event_1 = isIE ? 'change' : 'input';\r\n        on[event_1] = [].concat(on[RANGE_TOKEN], on[event_1] || []);\r\n        delete on[RANGE_TOKEN];\r\n    }\r\n    // This was originally intended to fix #4521 but no longer necessary\r\n    // after 2.5. Keeping it for backwards compat with generated code from < 2.4\r\n    /* istanbul ignore if */\r\n    if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\r\n        on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\r\n        delete on[CHECKBOX_RADIO_TOKEN];\r\n    }\r\n}\r\nvar target;\r\nfunction createOnceHandler(event, handler, capture) {\r\n    var _target = target; // save current target element in closure\r\n    return function onceHandler() {\r\n        var res = handler.apply(null, arguments);\r\n        if (res !== null) {\r\n            remove(event, onceHandler, capture, _target);\r\n        }\r\n    };\r\n}\r\n// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp\r\n// implementation and does not fire microtasks in between event propagation, so\r\n// safe to exclude.\r\nvar useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);\r\nfunction add(name, handler, capture, passive) {\r\n    // async edge case #6566: inner click event triggers patch, event handler\r\n    // attached to outer element during patch, and triggered again. This\r\n    // happens because browsers fire microtask ticks between event propagation.\r\n    // the solution is simple: we save the timestamp when a handler is attached,\r\n    // and the handler would only fire if the event passed to it was fired\r\n    // AFTER it was attached.\r\n    if (useMicrotaskFix) {\r\n        var attachedTimestamp_1 = currentFlushTimestamp;\r\n        var original_1 = handler;\r\n        //@ts-expect-error\r\n        handler = original_1._wrapper = function (e) {\r\n            if (\r\n            // no bubbling, should always fire.\r\n            // this is just a safety net in case event.timeStamp is unreliable in\r\n            // certain weird environments...\r\n            e.target === e.currentTarget ||\r\n                // event is fired after handler attachment\r\n                e.timeStamp >= attachedTimestamp_1 ||\r\n                // bail for environments that have buggy event.timeStamp implementations\r\n                // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState\r\n                // #9681 QtWebEngine event.timeStamp is negative value\r\n                e.timeStamp <= 0 ||\r\n                // #9448 bail if event is fired in another document in a multi-page\r\n                // electron/nw.js app, since event.timeStamp will be using a different\r\n                // starting reference\r\n                e.target.ownerDocument !== document) {\r\n                return original_1.apply(this, arguments);\r\n            }\r\n        };\r\n    }\r\n    target.addEventListener(name, handler, supportsPassive ? { capture: capture, passive: passive } : capture);\r\n}\r\nfunction remove(name, handler, capture, _target) {\r\n    (_target || target).removeEventListener(name, \r\n    //@ts-expect-error\r\n    handler._wrapper || handler, capture);\r\n}\r\nfunction updateDOMListeners(oldVnode, vnode) {\r\n    if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\r\n        return;\r\n    }\r\n    var on = vnode.data.on || {};\r\n    var oldOn = oldVnode.data.on || {};\r\n    // vnode is empty when removing all listeners,\r\n    // and use old vnode dom element\r\n    target = vnode.elm || oldVnode.elm;\r\n    normalizeEvents(on);\r\n    updateListeners(on, oldOn, add, remove, createOnceHandler, vnode.context);\r\n    target = undefined;\r\n}\r\nvar events = {\r\n    create: updateDOMListeners,\r\n    update: updateDOMListeners,\r\n    // @ts-expect-error emptyNode has actually data\r\n    destroy: function (vnode) { return updateDOMListeners(vnode, emptyNode); }\r\n};\n\nvar svgContainer;\r\nfunction updateDOMProps(oldVnode, vnode) {\r\n    if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\r\n        return;\r\n    }\r\n    var key, cur;\r\n    var elm = vnode.elm;\r\n    var oldProps = oldVnode.data.domProps || {};\r\n    var props = vnode.data.domProps || {};\r\n    // clone observed objects, as the user probably wants to mutate it\r\n    if (isDef(props.__ob__) || isTrue(props._v_attr_proxy)) {\r\n        props = vnode.data.domProps = extend({}, props);\r\n    }\r\n    for (key in oldProps) {\r\n        if (!(key in props)) {\r\n            elm[key] = '';\r\n        }\r\n    }\r\n    for (key in props) {\r\n        cur = props[key];\r\n        // ignore children if the node has textContent or innerHTML,\r\n        // as these will throw away existing DOM nodes and cause removal errors\r\n        // on subsequent patches (#3360)\r\n        if (key === 'textContent' || key === 'innerHTML') {\r\n            if (vnode.children)\r\n                vnode.children.length = 0;\r\n            if (cur === oldProps[key])\r\n                continue;\r\n            // #6601 work around Chrome version <= 55 bug where single textNode\r\n            // replaced by innerHTML/textContent retains its parentNode property\r\n            if (elm.childNodes.length === 1) {\r\n                elm.removeChild(elm.childNodes[0]);\r\n            }\r\n        }\r\n        if (key === 'value' && elm.tagName !== 'PROGRESS') {\r\n            // store value as _value as well since\r\n            // non-string values will be stringified\r\n            elm._value = cur;\r\n            // avoid resetting cursor position when value is the same\r\n            var strCur = isUndef(cur) ? '' : String(cur);\r\n            if (shouldUpdateValue(elm, strCur)) {\r\n                elm.value = strCur;\r\n            }\r\n        }\r\n        else if (key === 'innerHTML' &&\r\n            isSVG(elm.tagName) &&\r\n            isUndef(elm.innerHTML)) {\r\n            // IE doesn't support innerHTML for SVG elements\r\n            svgContainer = svgContainer || document.createElement('div');\r\n            svgContainer.innerHTML = \"<svg>\".concat(cur, \"</svg>\");\r\n            var svg = svgContainer.firstChild;\r\n            while (elm.firstChild) {\r\n                elm.removeChild(elm.firstChild);\r\n            }\r\n            while (svg.firstChild) {\r\n                elm.appendChild(svg.firstChild);\r\n            }\r\n        }\r\n        else if (\r\n        // skip the update if old and new VDOM state is the same.\r\n        // `value` is handled separately because the DOM value may be temporarily\r\n        // out of sync with VDOM state due to focus, composition and modifiers.\r\n        // This  #4521 by skipping the unnecessary `checked` update.\r\n        cur !== oldProps[key]) {\r\n            // some property updates can throw\r\n            // e.g. `value` on <progress> w/ non-finite value\r\n            try {\r\n                elm[key] = cur;\r\n            }\r\n            catch (e) { }\r\n        }\r\n    }\r\n}\r\nfunction shouldUpdateValue(elm, checkVal) {\r\n    return (\r\n    //@ts-expect-error\r\n    !elm.composing &&\r\n        (elm.tagName === 'OPTION' ||\r\n            isNotInFocusAndDirty(elm, checkVal) ||\r\n            isDirtyWithModifiers(elm, checkVal)));\r\n}\r\nfunction isNotInFocusAndDirty(elm, checkVal) {\r\n    // return true when textbox (.number and .trim) loses focus and its value is\r\n    // not equal to the updated value\r\n    var notInFocus = true;\r\n    // #6157\r\n    // work around IE bug when accessing document.activeElement in an iframe\r\n    try {\r\n        notInFocus = document.activeElement !== elm;\r\n    }\r\n    catch (e) { }\r\n    return notInFocus && elm.value !== checkVal;\r\n}\r\nfunction isDirtyWithModifiers(elm, newVal) {\r\n    var value = elm.value;\r\n    var modifiers = elm._vModifiers; // injected by v-model runtime\r\n    if (isDef(modifiers)) {\r\n        if (modifiers.number) {\r\n            return toNumber(value) !== toNumber(newVal);\r\n        }\r\n        if (modifiers.trim) {\r\n            return value.trim() !== newVal.trim();\r\n        }\r\n    }\r\n    return value !== newVal;\r\n}\r\nvar domProps = {\r\n    create: updateDOMProps,\r\n    update: updateDOMProps\r\n};\n\nvar parseStyleText = cached(function (cssText) {\r\n    var res = {};\r\n    var listDelimiter = /;(?![^(]*\\))/g;\r\n    var propertyDelimiter = /:(.+)/;\r\n    cssText.split(listDelimiter).forEach(function (item) {\r\n        if (item) {\r\n            var tmp = item.split(propertyDelimiter);\r\n            tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\r\n        }\r\n    });\r\n    return res;\r\n});\r\n// merge static and dynamic style data on the same vnode\r\nfunction normalizeStyleData(data) {\r\n    var style = normalizeStyleBinding(data.style);\r\n    // static style is pre-processed into an object during compilation\r\n    // and is always a fresh object, so it's safe to merge into it\r\n    return data.staticStyle ? extend(data.staticStyle, style) : style;\r\n}\r\n// normalize possible array / string values into Object\r\nfunction normalizeStyleBinding(bindingStyle) {\r\n    if (Array.isArray(bindingStyle)) {\r\n        return toObject(bindingStyle);\r\n    }\r\n    if (typeof bindingStyle === 'string') {\r\n        return parseStyleText(bindingStyle);\r\n    }\r\n    return bindingStyle;\r\n}\r\n/**\r\n * parent component style should be after child's\r\n * so that parent component's style could override it\r\n */\r\nfunction getStyle(vnode, checkChild) {\r\n    var res = {};\r\n    var styleData;\r\n    if (checkChild) {\r\n        var childNode = vnode;\r\n        while (childNode.componentInstance) {\r\n            childNode = childNode.componentInstance._vnode;\r\n            if (childNode &&\r\n                childNode.data &&\r\n                (styleData = normalizeStyleData(childNode.data))) {\r\n                extend(res, styleData);\r\n            }\r\n        }\r\n    }\r\n    if ((styleData = normalizeStyleData(vnode.data))) {\r\n        extend(res, styleData);\r\n    }\r\n    var parentNode = vnode;\r\n    // @ts-expect-error parentNode.parent not VNodeWithData\r\n    while ((parentNode = parentNode.parent)) {\r\n        if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\r\n            extend(res, styleData);\r\n        }\r\n    }\r\n    return res;\r\n}\n\nvar cssVarRE = /^--/;\r\nvar importantRE = /\\s*!important$/;\r\nvar setProp = function (el, name, val) {\r\n    /* istanbul ignore if */\r\n    if (cssVarRE.test(name)) {\r\n        el.style.setProperty(name, val);\r\n    }\r\n    else if (importantRE.test(val)) {\r\n        el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');\r\n    }\r\n    else {\r\n        var normalizedName = normalize(name);\r\n        if (Array.isArray(val)) {\r\n            // Support values array created by autoprefixer, e.g.\r\n            // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\r\n            // Set them one by one, and the browser will only set those it can recognize\r\n            for (var i = 0, len = val.length; i < len; i++) {\r\n                el.style[normalizedName] = val[i];\r\n            }\r\n        }\r\n        else {\r\n            el.style[normalizedName] = val;\r\n        }\r\n    }\r\n};\r\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\r\nvar emptyStyle;\r\nvar normalize = cached(function (prop) {\r\n    emptyStyle = emptyStyle || document.createElement('div').style;\r\n    prop = camelize(prop);\r\n    if (prop !== 'filter' && prop in emptyStyle) {\r\n        return prop;\r\n    }\r\n    var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\r\n    for (var i = 0; i < vendorNames.length; i++) {\r\n        var name_1 = vendorNames[i] + capName;\r\n        if (name_1 in emptyStyle) {\r\n            return name_1;\r\n        }\r\n    }\r\n});\r\nfunction updateStyle(oldVnode, vnode) {\r\n    var data = vnode.data;\r\n    var oldData = oldVnode.data;\r\n    if (isUndef(data.staticStyle) &&\r\n        isUndef(data.style) &&\r\n        isUndef(oldData.staticStyle) &&\r\n        isUndef(oldData.style)) {\r\n        return;\r\n    }\r\n    var cur, name;\r\n    var el = vnode.elm;\r\n    var oldStaticStyle = oldData.staticStyle;\r\n    var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\r\n    // if static style exists, stylebinding already merged into it when doing normalizeStyleData\r\n    var oldStyle = oldStaticStyle || oldStyleBinding;\r\n    var style = normalizeStyleBinding(vnode.data.style) || {};\r\n    // store normalized style under a different key for next diff\r\n    // make sure to clone it if it's reactive, since the user likely wants\r\n    // to mutate it.\r\n    vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;\r\n    var newStyle = getStyle(vnode, true);\r\n    for (name in oldStyle) {\r\n        if (isUndef(newStyle[name])) {\r\n            setProp(el, name, '');\r\n        }\r\n    }\r\n    for (name in newStyle) {\r\n        cur = newStyle[name];\r\n        if (cur !== oldStyle[name]) {\r\n            // ie9 setting to null has no effect, must use empty string\r\n            setProp(el, name, cur == null ? '' : cur);\r\n        }\r\n    }\r\n}\r\nvar style$1 = {\r\n    create: updateStyle,\r\n    update: updateStyle\r\n};\n\nvar whitespaceRE$1 = /\\s+/;\r\n/**\r\n * Add class with compatibility for SVG since classList is not supported on\r\n * SVG elements in IE\r\n */\r\nfunction addClass(el, cls) {\r\n    /* istanbul ignore if */\r\n    if (!cls || !(cls = cls.trim())) {\r\n        return;\r\n    }\r\n    /* istanbul ignore else */\r\n    if (el.classList) {\r\n        if (cls.indexOf(' ') > -1) {\r\n            cls.split(whitespaceRE$1).forEach(function (c) { return el.classList.add(c); });\r\n        }\r\n        else {\r\n            el.classList.add(cls);\r\n        }\r\n    }\r\n    else {\r\n        var cur = \" \".concat(el.getAttribute('class') || '', \" \");\r\n        if (cur.indexOf(' ' + cls + ' ') < 0) {\r\n            el.setAttribute('class', (cur + cls).trim());\r\n        }\r\n    }\r\n}\r\n/**\r\n * Remove class with compatibility for SVG since classList is not supported on\r\n * SVG elements in IE\r\n */\r\nfunction removeClass(el, cls) {\r\n    /* istanbul ignore if */\r\n    if (!cls || !(cls = cls.trim())) {\r\n        return;\r\n    }\r\n    /* istanbul ignore else */\r\n    if (el.classList) {\r\n        if (cls.indexOf(' ') > -1) {\r\n            cls.split(whitespaceRE$1).forEach(function (c) { return el.classList.remove(c); });\r\n        }\r\n        else {\r\n            el.classList.remove(cls);\r\n        }\r\n        if (!el.classList.length) {\r\n            el.removeAttribute('class');\r\n        }\r\n    }\r\n    else {\r\n        var cur = \" \".concat(el.getAttribute('class') || '', \" \");\r\n        var tar = ' ' + cls + ' ';\r\n        while (cur.indexOf(tar) >= 0) {\r\n            cur = cur.replace(tar, ' ');\r\n        }\r\n        cur = cur.trim();\r\n        if (cur) {\r\n            el.setAttribute('class', cur);\r\n        }\r\n        else {\r\n            el.removeAttribute('class');\r\n        }\r\n    }\r\n}\n\nfunction resolveTransition(def) {\r\n    if (!def) {\r\n        return;\r\n    }\r\n    /* istanbul ignore else */\r\n    if (typeof def === 'object') {\r\n        var res = {};\r\n        if (def.css !== false) {\r\n            extend(res, autoCssTransition(def.name || 'v'));\r\n        }\r\n        extend(res, def);\r\n        return res;\r\n    }\r\n    else if (typeof def === 'string') {\r\n        return autoCssTransition(def);\r\n    }\r\n}\r\nvar autoCssTransition = cached(function (name) {\r\n    return {\r\n        enterClass: \"\".concat(name, \"-enter\"),\r\n        enterToClass: \"\".concat(name, \"-enter-to\"),\r\n        enterActiveClass: \"\".concat(name, \"-enter-active\"),\r\n        leaveClass: \"\".concat(name, \"-leave\"),\r\n        leaveToClass: \"\".concat(name, \"-leave-to\"),\r\n        leaveActiveClass: \"\".concat(name, \"-leave-active\")\r\n    };\r\n});\r\nvar hasTransition = inBrowser && !isIE9;\r\nvar TRANSITION = 'transition';\r\nvar ANIMATION = 'animation';\r\n// Transition property/event sniffing\r\nvar transitionProp = 'transition';\r\nvar transitionEndEvent = 'transitionend';\r\nvar animationProp = 'animation';\r\nvar animationEndEvent = 'animationend';\r\nif (hasTransition) {\r\n    /* istanbul ignore if */\r\n    if (window.ontransitionend === undefined &&\r\n        window.onwebkittransitionend !== undefined) {\r\n        transitionProp = 'WebkitTransition';\r\n        transitionEndEvent = 'webkitTransitionEnd';\r\n    }\r\n    if (window.onanimationend === undefined &&\r\n        window.onwebkitanimationend !== undefined) {\r\n        animationProp = 'WebkitAnimation';\r\n        animationEndEvent = 'webkitAnimationEnd';\r\n    }\r\n}\r\n// binding to window is necessary to make hot reload work in IE in strict mode\r\nvar raf = inBrowser\r\n    ? window.requestAnimationFrame\r\n        ? window.requestAnimationFrame.bind(window)\r\n        : setTimeout\r\n    : /* istanbul ignore next */ function (/* istanbul ignore next */ fn) { return fn(); };\r\nfunction nextFrame(fn) {\r\n    raf(function () {\r\n        // @ts-expect-error\r\n        raf(fn);\r\n    });\r\n}\r\nfunction addTransitionClass(el, cls) {\r\n    var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\r\n    if (transitionClasses.indexOf(cls) < 0) {\r\n        transitionClasses.push(cls);\r\n        addClass(el, cls);\r\n    }\r\n}\r\nfunction removeTransitionClass(el, cls) {\r\n    if (el._transitionClasses) {\r\n        remove$2(el._transitionClasses, cls);\r\n    }\r\n    removeClass(el, cls);\r\n}\r\nfunction whenTransitionEnds(el, expectedType, cb) {\r\n    var _a = getTransitionInfo(el, expectedType), type = _a.type, timeout = _a.timeout, propCount = _a.propCount;\r\n    if (!type)\r\n        return cb();\r\n    var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\r\n    var ended = 0;\r\n    var end = function () {\r\n        el.removeEventListener(event, onEnd);\r\n        cb();\r\n    };\r\n    var onEnd = function (e) {\r\n        if (e.target === el) {\r\n            if (++ended >= propCount) {\r\n                end();\r\n            }\r\n        }\r\n    };\r\n    setTimeout(function () {\r\n        if (ended < propCount) {\r\n            end();\r\n        }\r\n    }, timeout + 1);\r\n    el.addEventListener(event, onEnd);\r\n}\r\nvar transformRE = /\\b(transform|all)(,|$)/;\r\nfunction getTransitionInfo(el, expectedType) {\r\n    var styles = window.getComputedStyle(el);\r\n    // JSDOM may return undefined for transition properties\r\n    var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');\r\n    var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');\r\n    var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\r\n    var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');\r\n    var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');\r\n    var animationTimeout = getTimeout(animationDelays, animationDurations);\r\n    var type;\r\n    var timeout = 0;\r\n    var propCount = 0;\r\n    /* istanbul ignore if */\r\n    if (expectedType === TRANSITION) {\r\n        if (transitionTimeout > 0) {\r\n            type = TRANSITION;\r\n            timeout = transitionTimeout;\r\n            propCount = transitionDurations.length;\r\n        }\r\n    }\r\n    else if (expectedType === ANIMATION) {\r\n        if (animationTimeout > 0) {\r\n            type = ANIMATION;\r\n            timeout = animationTimeout;\r\n            propCount = animationDurations.length;\r\n        }\r\n    }\r\n    else {\r\n        timeout = Math.max(transitionTimeout, animationTimeout);\r\n        type =\r\n            timeout > 0\r\n                ? transitionTimeout > animationTimeout\r\n                    ? TRANSITION\r\n                    : ANIMATION\r\n                : null;\r\n        propCount = type\r\n            ? type === TRANSITION\r\n                ? transitionDurations.length\r\n                : animationDurations.length\r\n            : 0;\r\n    }\r\n    var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);\r\n    return {\r\n        type: type,\r\n        timeout: timeout,\r\n        propCount: propCount,\r\n        hasTransform: hasTransform\r\n    };\r\n}\r\nfunction getTimeout(delays, durations) {\r\n    /* istanbul ignore next */\r\n    while (delays.length < durations.length) {\r\n        delays = delays.concat(delays);\r\n    }\r\n    return Math.max.apply(null, durations.map(function (d, i) {\r\n        return toMs(d) + toMs(delays[i]);\r\n    }));\r\n}\r\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers\r\n// in a locale-dependent way, using a comma instead of a dot.\r\n// If comma is not replaced with a dot, the input will be rounded down (i.e. acting\r\n// as a floor function) causing unexpected behaviors\r\nfunction toMs(s) {\r\n    return Number(s.slice(0, -1).replace(',', '.')) * 1000;\r\n}\n\nfunction enter(vnode, toggleDisplay) {\r\n    var el = vnode.elm;\r\n    // call leave callback now\r\n    if (isDef(el._leaveCb)) {\r\n        el._leaveCb.cancelled = true;\r\n        el._leaveCb();\r\n    }\r\n    var data = resolveTransition(vnode.data.transition);\r\n    if (isUndef(data)) {\r\n        return;\r\n    }\r\n    /* istanbul ignore if */\r\n    if (isDef(el._enterCb) || el.nodeType !== 1) {\r\n        return;\r\n    }\r\n    var css = data.css, type = data.type, enterClass = data.enterClass, enterToClass = data.enterToClass, enterActiveClass = data.enterActiveClass, appearClass = data.appearClass, appearToClass = data.appearToClass, appearActiveClass = data.appearActiveClass, beforeEnter = data.beforeEnter, enter = data.enter, afterEnter = data.afterEnter, enterCancelled = data.enterCancelled, beforeAppear = data.beforeAppear, appear = data.appear, afterAppear = data.afterAppear, appearCancelled = data.appearCancelled, duration = data.duration;\r\n    // activeInstance will always be the <transition> component managing this\r\n    // transition. One edge case to check is when the <transition> is placed\r\n    // as the root node of a child component. In that case we need to check\r\n    // <transition>'s parent for appear check.\r\n    var context = activeInstance;\r\n    var transitionNode = activeInstance.$vnode;\r\n    while (transitionNode && transitionNode.parent) {\r\n        context = transitionNode.context;\r\n        transitionNode = transitionNode.parent;\r\n    }\r\n    var isAppear = !context._isMounted || !vnode.isRootInsert;\r\n    if (isAppear && !appear && appear !== '') {\r\n        return;\r\n    }\r\n    var startClass = isAppear && appearClass ? appearClass : enterClass;\r\n    var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;\r\n    var toClass = isAppear && appearToClass ? appearToClass : enterToClass;\r\n    var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;\r\n    var enterHook = isAppear ? (isFunction(appear) ? appear : enter) : enter;\r\n    var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;\r\n    var enterCancelledHook = isAppear\r\n        ? appearCancelled || enterCancelled\r\n        : enterCancelled;\r\n    var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);\r\n    if ( true && explicitEnterDuration != null) {\r\n        checkDuration(explicitEnterDuration, 'enter', vnode);\r\n    }\r\n    var expectsCSS = css !== false && !isIE9;\r\n    var userWantsControl = getHookArgumentsLength(enterHook);\r\n    var cb = (el._enterCb = once(function () {\r\n        if (expectsCSS) {\r\n            removeTransitionClass(el, toClass);\r\n            removeTransitionClass(el, activeClass);\r\n        }\r\n        // @ts-expect-error\r\n        if (cb.cancelled) {\r\n            if (expectsCSS) {\r\n                removeTransitionClass(el, startClass);\r\n            }\r\n            enterCancelledHook && enterCancelledHook(el);\r\n        }\r\n        else {\r\n            afterEnterHook && afterEnterHook(el);\r\n        }\r\n        el._enterCb = null;\r\n    }));\r\n    if (!vnode.data.show) {\r\n        // remove pending leave element on enter by injecting an insert hook\r\n        mergeVNodeHook(vnode, 'insert', function () {\r\n            var parent = el.parentNode;\r\n            var pendingNode = parent && parent._pending && parent._pending[vnode.key];\r\n            if (pendingNode &&\r\n                pendingNode.tag === vnode.tag &&\r\n                pendingNode.elm._leaveCb) {\r\n                pendingNode.elm._leaveCb();\r\n            }\r\n            enterHook && enterHook(el, cb);\r\n        });\r\n    }\r\n    // start enter transition\r\n    beforeEnterHook && beforeEnterHook(el);\r\n    if (expectsCSS) {\r\n        addTransitionClass(el, startClass);\r\n        addTransitionClass(el, activeClass);\r\n        nextFrame(function () {\r\n            removeTransitionClass(el, startClass);\r\n            // @ts-expect-error\r\n            if (!cb.cancelled) {\r\n                addTransitionClass(el, toClass);\r\n                if (!userWantsControl) {\r\n                    if (isValidDuration(explicitEnterDuration)) {\r\n                        setTimeout(cb, explicitEnterDuration);\r\n                    }\r\n                    else {\r\n                        whenTransitionEnds(el, type, cb);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    if (vnode.data.show) {\r\n        toggleDisplay && toggleDisplay();\r\n        enterHook && enterHook(el, cb);\r\n    }\r\n    if (!expectsCSS && !userWantsControl) {\r\n        cb();\r\n    }\r\n}\r\nfunction leave(vnode, rm) {\r\n    var el = vnode.elm;\r\n    // call enter callback now\r\n    if (isDef(el._enterCb)) {\r\n        el._enterCb.cancelled = true;\r\n        el._enterCb();\r\n    }\r\n    var data = resolveTransition(vnode.data.transition);\r\n    if (isUndef(data) || el.nodeType !== 1) {\r\n        return rm();\r\n    }\r\n    /* istanbul ignore if */\r\n    if (isDef(el._leaveCb)) {\r\n        return;\r\n    }\r\n    var css = data.css, type = data.type, leaveClass = data.leaveClass, leaveToClass = data.leaveToClass, leaveActiveClass = data.leaveActiveClass, beforeLeave = data.beforeLeave, leave = data.leave, afterLeave = data.afterLeave, leaveCancelled = data.leaveCancelled, delayLeave = data.delayLeave, duration = data.duration;\r\n    var expectsCSS = css !== false && !isIE9;\r\n    var userWantsControl = getHookArgumentsLength(leave);\r\n    var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);\r\n    if ( true && isDef(explicitLeaveDuration)) {\r\n        checkDuration(explicitLeaveDuration, 'leave', vnode);\r\n    }\r\n    var cb = (el._leaveCb = once(function () {\r\n        if (el.parentNode && el.parentNode._pending) {\r\n            el.parentNode._pending[vnode.key] = null;\r\n        }\r\n        if (expectsCSS) {\r\n            removeTransitionClass(el, leaveToClass);\r\n            removeTransitionClass(el, leaveActiveClass);\r\n        }\r\n        // @ts-expect-error\r\n        if (cb.cancelled) {\r\n            if (expectsCSS) {\r\n                removeTransitionClass(el, leaveClass);\r\n            }\r\n            leaveCancelled && leaveCancelled(el);\r\n        }\r\n        else {\r\n            rm();\r\n            afterLeave && afterLeave(el);\r\n        }\r\n        el._leaveCb = null;\r\n    }));\r\n    if (delayLeave) {\r\n        delayLeave(performLeave);\r\n    }\r\n    else {\r\n        performLeave();\r\n    }\r\n    function performLeave() {\r\n        // the delayed leave may have already been cancelled\r\n        // @ts-expect-error\r\n        if (cb.cancelled) {\r\n            return;\r\n        }\r\n        // record leaving element\r\n        if (!vnode.data.show && el.parentNode) {\r\n            (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] =\r\n                vnode;\r\n        }\r\n        beforeLeave && beforeLeave(el);\r\n        if (expectsCSS) {\r\n            addTransitionClass(el, leaveClass);\r\n            addTransitionClass(el, leaveActiveClass);\r\n            nextFrame(function () {\r\n                removeTransitionClass(el, leaveClass);\r\n                // @ts-expect-error\r\n                if (!cb.cancelled) {\r\n                    addTransitionClass(el, leaveToClass);\r\n                    if (!userWantsControl) {\r\n                        if (isValidDuration(explicitLeaveDuration)) {\r\n                            setTimeout(cb, explicitLeaveDuration);\r\n                        }\r\n                        else {\r\n                            whenTransitionEnds(el, type, cb);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        leave && leave(el, cb);\r\n        if (!expectsCSS && !userWantsControl) {\r\n            cb();\r\n        }\r\n    }\r\n}\r\n// only used in dev mode\r\nfunction checkDuration(val, name, vnode) {\r\n    if (typeof val !== 'number') {\r\n        warn$2(\"<transition> explicit \".concat(name, \" duration is not a valid number - \") +\r\n            \"got \".concat(JSON.stringify(val), \".\"), vnode.context);\r\n    }\r\n    else if (isNaN(val)) {\r\n        warn$2(\"<transition> explicit \".concat(name, \" duration is NaN - \") +\r\n            'the duration expression might be incorrect.', vnode.context);\r\n    }\r\n}\r\nfunction isValidDuration(val) {\r\n    return typeof val === 'number' && !isNaN(val);\r\n}\r\n/**\r\n * Normalize a transition hook's argument length. The hook may be:\r\n * - a merged hook (invoker) with the original in .fns\r\n * - a wrapped component method (check ._length)\r\n * - a plain function (.length)\r\n */\r\nfunction getHookArgumentsLength(fn) {\r\n    if (isUndef(fn)) {\r\n        return false;\r\n    }\r\n    // @ts-expect-error\r\n    var invokerFns = fn.fns;\r\n    if (isDef(invokerFns)) {\r\n        // invoker\r\n        return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);\r\n    }\r\n    else {\r\n        // @ts-expect-error\r\n        return (fn._length || fn.length) > 1;\r\n    }\r\n}\r\nfunction _enter(_, vnode) {\r\n    if (vnode.data.show !== true) {\r\n        enter(vnode);\r\n    }\r\n}\r\nvar transition = inBrowser\r\n    ? {\r\n        create: _enter,\r\n        activate: _enter,\r\n        remove: function (vnode, rm) {\r\n            /* istanbul ignore else */\r\n            if (vnode.data.show !== true) {\r\n                // @ts-expect-error\r\n                leave(vnode, rm);\r\n            }\r\n            else {\r\n                rm();\r\n            }\r\n        }\r\n    }\r\n    : {};\n\nvar platformModules = [attrs, klass$1, events, domProps, style$1, transition];\n\n// the directive module should be applied last, after all\r\n// built-in modules have been applied.\r\nvar modules$1 = platformModules.concat(baseModules);\r\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules$1 });\n\n/**\r\n * Not type checking this file because flow doesn't like attaching\r\n * properties to Elements.\r\n */\r\n/* istanbul ignore if */\r\nif (isIE9) {\r\n    // http://www.matts411.com/post/internet-explorer-9-oninput/\r\n    document.addEventListener('selectionchange', function () {\r\n        var el = document.activeElement;\r\n        // @ts-expect-error\r\n        if (el && el.vmodel) {\r\n            trigger(el, 'input');\r\n        }\r\n    });\r\n}\r\nvar directive = {\r\n    inserted: function (el, binding, vnode, oldVnode) {\r\n        if (vnode.tag === 'select') {\r\n            // #6903\r\n            if (oldVnode.elm && !oldVnode.elm._vOptions) {\r\n                mergeVNodeHook(vnode, 'postpatch', function () {\r\n                    directive.componentUpdated(el, binding, vnode);\r\n                });\r\n            }\r\n            else {\r\n                setSelected(el, binding, vnode.context);\r\n            }\r\n            el._vOptions = [].map.call(el.options, getValue);\r\n        }\r\n        else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\r\n            el._vModifiers = binding.modifiers;\r\n            if (!binding.modifiers.lazy) {\r\n                el.addEventListener('compositionstart', onCompositionStart);\r\n                el.addEventListener('compositionend', onCompositionEnd);\r\n                // Safari < 10.2 & UIWebView doesn't fire compositionend when\r\n                // switching focus before confirming composition choice\r\n                // this also fixes the issue where some browsers e.g. iOS Chrome\r\n                // fires \"change\" instead of \"input\" on autocomplete.\r\n                el.addEventListener('change', onCompositionEnd);\r\n                /* istanbul ignore if */\r\n                if (isIE9) {\r\n                    el.vmodel = true;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    componentUpdated: function (el, binding, vnode) {\r\n        if (vnode.tag === 'select') {\r\n            setSelected(el, binding, vnode.context);\r\n            // in case the options rendered by v-for have changed,\r\n            // it's possible that the value is out-of-sync with the rendered options.\r\n            // detect such cases and filter out values that no longer has a matching\r\n            // option in the DOM.\r\n            var prevOptions_1 = el._vOptions;\r\n            var curOptions_1 = (el._vOptions = [].map.call(el.options, getValue));\r\n            if (curOptions_1.some(function (o, i) { return !looseEqual(o, prevOptions_1[i]); })) {\r\n                // trigger change event if\r\n                // no matching option found for at least one value\r\n                var needReset = el.multiple\r\n                    ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions_1); })\r\n                    : binding.value !== binding.oldValue &&\r\n                        hasNoMatchingOption(binding.value, curOptions_1);\r\n                if (needReset) {\r\n                    trigger(el, 'change');\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nfunction setSelected(el, binding, vm) {\r\n    actuallySetSelected(el, binding, vm);\r\n    /* istanbul ignore if */\r\n    if (isIE || isEdge) {\r\n        setTimeout(function () {\r\n            actuallySetSelected(el, binding, vm);\r\n        }, 0);\r\n    }\r\n}\r\nfunction actuallySetSelected(el, binding, vm) {\r\n    var value = binding.value;\r\n    var isMultiple = el.multiple;\r\n    if (isMultiple && !Array.isArray(value)) {\r\n         true &&\r\n            warn$2(\"<select multiple v-model=\\\"\".concat(binding.expression, \"\\\"> \") +\r\n                \"expects an Array value for its binding, but got \".concat(Object.prototype.toString\r\n                    .call(value)\r\n                    .slice(8, -1)), vm);\r\n        return;\r\n    }\r\n    var selected, option;\r\n    for (var i = 0, l = el.options.length; i < l; i++) {\r\n        option = el.options[i];\r\n        if (isMultiple) {\r\n            selected = looseIndexOf(value, getValue(option)) > -1;\r\n            if (option.selected !== selected) {\r\n                option.selected = selected;\r\n            }\r\n        }\r\n        else {\r\n            if (looseEqual(getValue(option), value)) {\r\n                if (el.selectedIndex !== i) {\r\n                    el.selectedIndex = i;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    if (!isMultiple) {\r\n        el.selectedIndex = -1;\r\n    }\r\n}\r\nfunction hasNoMatchingOption(value, options) {\r\n    return options.every(function (o) { return !looseEqual(o, value); });\r\n}\r\nfunction getValue(option) {\r\n    return '_value' in option ? option._value : option.value;\r\n}\r\nfunction onCompositionStart(e) {\r\n    e.target.composing = true;\r\n}\r\nfunction onCompositionEnd(e) {\r\n    // prevent triggering an input event for no reason\r\n    if (!e.target.composing)\r\n        return;\r\n    e.target.composing = false;\r\n    trigger(e.target, 'input');\r\n}\r\nfunction trigger(el, type) {\r\n    var e = document.createEvent('HTMLEvents');\r\n    e.initEvent(type, true, true);\r\n    el.dispatchEvent(e);\r\n}\n\n// recursively search for possible transition defined inside the component root\r\nfunction locateNode(vnode) {\r\n    // @ts-expect-error\r\n    return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\r\n        ? locateNode(vnode.componentInstance._vnode)\r\n        : vnode;\r\n}\r\nvar show = {\r\n    bind: function (el, _a, vnode) {\r\n        var value = _a.value;\r\n        vnode = locateNode(vnode);\r\n        var transition = vnode.data && vnode.data.transition;\r\n        var originalDisplay = (el.__vOriginalDisplay =\r\n            el.style.display === 'none' ? '' : el.style.display);\r\n        if (value && transition) {\r\n            vnode.data.show = true;\r\n            enter(vnode, function () {\r\n                el.style.display = originalDisplay;\r\n            });\r\n        }\r\n        else {\r\n            el.style.display = value ? originalDisplay : 'none';\r\n        }\r\n    },\r\n    update: function (el, _a, vnode) {\r\n        var value = _a.value, oldValue = _a.oldValue;\r\n        /* istanbul ignore if */\r\n        if (!value === !oldValue)\r\n            return;\r\n        vnode = locateNode(vnode);\r\n        var transition = vnode.data && vnode.data.transition;\r\n        if (transition) {\r\n            vnode.data.show = true;\r\n            if (value) {\r\n                enter(vnode, function () {\r\n                    el.style.display = el.__vOriginalDisplay;\r\n                });\r\n            }\r\n            else {\r\n                leave(vnode, function () {\r\n                    el.style.display = 'none';\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            el.style.display = value ? el.__vOriginalDisplay : 'none';\r\n        }\r\n    },\r\n    unbind: function (el, binding, vnode, oldVnode, isDestroy) {\r\n        if (!isDestroy) {\r\n            el.style.display = el.__vOriginalDisplay;\r\n        }\r\n    }\r\n};\n\nvar platformDirectives = {\r\n    model: directive,\r\n    show: show\r\n};\n\n// Provides transition support for a single element/component.\r\nvar transitionProps = {\r\n    name: String,\r\n    appear: Boolean,\r\n    css: Boolean,\r\n    mode: String,\r\n    type: String,\r\n    enterClass: String,\r\n    leaveClass: String,\r\n    enterToClass: String,\r\n    leaveToClass: String,\r\n    enterActiveClass: String,\r\n    leaveActiveClass: String,\r\n    appearClass: String,\r\n    appearActiveClass: String,\r\n    appearToClass: String,\r\n    duration: [Number, String, Object]\r\n};\r\n// in case the child is also an abstract component, e.g. <keep-alive>\r\n// we want to recursively retrieve the real component to be rendered\r\nfunction getRealChild(vnode) {\r\n    var compOptions = vnode && vnode.componentOptions;\r\n    if (compOptions && compOptions.Ctor.options.abstract) {\r\n        return getRealChild(getFirstComponentChild(compOptions.children));\r\n    }\r\n    else {\r\n        return vnode;\r\n    }\r\n}\r\nfunction extractTransitionData(comp) {\r\n    var data = {};\r\n    var options = comp.$options;\r\n    // props\r\n    for (var key in options.propsData) {\r\n        data[key] = comp[key];\r\n    }\r\n    // events.\r\n    // extract listeners and pass them directly to the transition methods\r\n    var listeners = options._parentListeners;\r\n    for (var key in listeners) {\r\n        data[camelize(key)] = listeners[key];\r\n    }\r\n    return data;\r\n}\r\nfunction placeholder(h, rawChild) {\r\n    // @ts-expect-error\r\n    if (/\\d-keep-alive$/.test(rawChild.tag)) {\r\n        return h('keep-alive', {\r\n            props: rawChild.componentOptions.propsData\r\n        });\r\n    }\r\n}\r\nfunction hasParentTransition(vnode) {\r\n    while ((vnode = vnode.parent)) {\r\n        if (vnode.data.transition) {\r\n            return true;\r\n        }\r\n    }\r\n}\r\nfunction isSameChild(child, oldChild) {\r\n    return oldChild.key === child.key && oldChild.tag === child.tag;\r\n}\r\nvar isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };\r\nvar isVShowDirective = function (d) { return d.name === 'show'; };\r\nvar Transition = {\r\n    name: 'transition',\r\n    props: transitionProps,\r\n    abstract: true,\r\n    render: function (h) {\r\n        var _this = this;\r\n        var children = this.$slots.default;\r\n        if (!children) {\r\n            return;\r\n        }\r\n        // filter out text nodes (possible whitespaces)\r\n        children = children.filter(isNotTextNode);\r\n        /* istanbul ignore if */\r\n        if (!children.length) {\r\n            return;\r\n        }\r\n        // warn multiple elements\r\n        if ( true && children.length > 1) {\r\n            warn$2('<transition> can only be used on a single element. Use ' +\r\n                '<transition-group> for lists.', this.$parent);\r\n        }\r\n        var mode = this.mode;\r\n        // warn invalid mode\r\n        if ( true && mode && mode !== 'in-out' && mode !== 'out-in') {\r\n            warn$2('invalid <transition> mode: ' + mode, this.$parent);\r\n        }\r\n        var rawChild = children[0];\r\n        // if this is a component root node and the component's\r\n        // parent container node also has transition, skip.\r\n        if (hasParentTransition(this.$vnode)) {\r\n            return rawChild;\r\n        }\r\n        // apply transition data to child\r\n        // use getRealChild() to ignore abstract components e.g. keep-alive\r\n        var child = getRealChild(rawChild);\r\n        /* istanbul ignore if */\r\n        if (!child) {\r\n            return rawChild;\r\n        }\r\n        if (this._leaving) {\r\n            return placeholder(h, rawChild);\r\n        }\r\n        // ensure a key that is unique to the vnode type and to this transition\r\n        // component instance. This key will be used to remove pending leaving nodes\r\n        // during entering.\r\n        var id = \"__transition-\".concat(this._uid, \"-\");\r\n        child.key =\r\n            child.key == null\r\n                ? child.isComment\r\n                    ? id + 'comment'\r\n                    : id + child.tag\r\n                : isPrimitive(child.key)\r\n                    ? String(child.key).indexOf(id) === 0\r\n                        ? child.key\r\n                        : id + child.key\r\n                    : child.key;\r\n        var data = ((child.data || (child.data = {})).transition =\r\n            extractTransitionData(this));\r\n        var oldRawChild = this._vnode;\r\n        var oldChild = getRealChild(oldRawChild);\r\n        // mark v-show\r\n        // so that the transition module can hand over the control to the directive\r\n        if (child.data.directives && child.data.directives.some(isVShowDirective)) {\r\n            child.data.show = true;\r\n        }\r\n        if (oldChild &&\r\n            oldChild.data &&\r\n            !isSameChild(child, oldChild) &&\r\n            !isAsyncPlaceholder(oldChild) &&\r\n            // #6687 component root is a comment node\r\n            !(oldChild.componentInstance &&\r\n                oldChild.componentInstance._vnode.isComment)) {\r\n            // replace old child transition data with fresh one\r\n            // important for dynamic transitions!\r\n            var oldData = (oldChild.data.transition = extend({}, data));\r\n            // handle transition mode\r\n            if (mode === 'out-in') {\r\n                // return placeholder node and queue update when leave finishes\r\n                this._leaving = true;\r\n                mergeVNodeHook(oldData, 'afterLeave', function () {\r\n                    _this._leaving = false;\r\n                    _this.$forceUpdate();\r\n                });\r\n                return placeholder(h, rawChild);\r\n            }\r\n            else if (mode === 'in-out') {\r\n                if (isAsyncPlaceholder(child)) {\r\n                    return oldRawChild;\r\n                }\r\n                var delayedLeave_1;\r\n                var performLeave = function () {\r\n                    delayedLeave_1();\r\n                };\r\n                mergeVNodeHook(data, 'afterEnter', performLeave);\r\n                mergeVNodeHook(data, 'enterCancelled', performLeave);\r\n                mergeVNodeHook(oldData, 'delayLeave', function (leave) {\r\n                    delayedLeave_1 = leave;\r\n                });\r\n            }\r\n        }\r\n        return rawChild;\r\n    }\r\n};\n\n// Provides transition support for list items.\r\nvar props = extend({\r\n    tag: String,\r\n    moveClass: String\r\n}, transitionProps);\r\ndelete props.mode;\r\nvar TransitionGroup = {\r\n    props: props,\r\n    beforeMount: function () {\r\n        var _this = this;\r\n        var update = this._update;\r\n        this._update = function (vnode, hydrating) {\r\n            var restoreActiveInstance = setActiveInstance(_this);\r\n            // force removing pass\r\n            _this.__patch__(_this._vnode, _this.kept, false, // hydrating\r\n            true // removeOnly (!important, avoids unnecessary moves)\r\n            );\r\n            _this._vnode = _this.kept;\r\n            restoreActiveInstance();\r\n            update.call(_this, vnode, hydrating);\r\n        };\r\n    },\r\n    render: function (h) {\r\n        var tag = this.tag || this.$vnode.data.tag || 'span';\r\n        var map = Object.create(null);\r\n        var prevChildren = (this.prevChildren = this.children);\r\n        var rawChildren = this.$slots.default || [];\r\n        var children = (this.children = []);\r\n        var transitionData = extractTransitionData(this);\r\n        for (var i = 0; i < rawChildren.length; i++) {\r\n            var c = rawChildren[i];\r\n            if (c.tag) {\r\n                if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\r\n                    children.push(c);\r\n                    map[c.key] = c;\r\n                    (c.data || (c.data = {})).transition = transitionData;\r\n                }\r\n                else if (true) {\r\n                    var opts = c.componentOptions;\r\n                    var name_1 = opts\r\n                        ? getComponentName(opts.Ctor.options) || opts.tag || ''\r\n                        : c.tag;\r\n                    warn$2(\"<transition-group> children must be keyed: <\".concat(name_1, \">\"));\r\n                }\r\n            }\r\n        }\r\n        if (prevChildren) {\r\n            var kept = [];\r\n            var removed = [];\r\n            for (var i = 0; i < prevChildren.length; i++) {\r\n                var c = prevChildren[i];\r\n                c.data.transition = transitionData;\r\n                // @ts-expect-error .getBoundingClientRect is not typed in Node\r\n                c.data.pos = c.elm.getBoundingClientRect();\r\n                if (map[c.key]) {\r\n                    kept.push(c);\r\n                }\r\n                else {\r\n                    removed.push(c);\r\n                }\r\n            }\r\n            this.kept = h(tag, null, kept);\r\n            this.removed = removed;\r\n        }\r\n        return h(tag, null, children);\r\n    },\r\n    updated: function () {\r\n        var children = this.prevChildren;\r\n        var moveClass = this.moveClass || (this.name || 'v') + '-move';\r\n        if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\r\n            return;\r\n        }\r\n        // we divide the work into three loops to avoid mixing DOM reads and writes\r\n        // in each iteration - which helps prevent layout thrashing.\r\n        children.forEach(callPendingCbs);\r\n        children.forEach(recordPosition);\r\n        children.forEach(applyTranslation);\r\n        // force reflow to put everything in position\r\n        // assign to this to avoid being removed in tree-shaking\r\n        // $flow-disable-line\r\n        this._reflow = document.body.offsetHeight;\r\n        children.forEach(function (c) {\r\n            if (c.data.moved) {\r\n                var el_1 = c.elm;\r\n                var s = el_1.style;\r\n                addTransitionClass(el_1, moveClass);\r\n                s.transform = s.WebkitTransform = s.transitionDuration = '';\r\n                el_1.addEventListener(transitionEndEvent, (el_1._moveCb = function cb(e) {\r\n                    if (e && e.target !== el_1) {\r\n                        return;\r\n                    }\r\n                    if (!e || /transform$/.test(e.propertyName)) {\r\n                        el_1.removeEventListener(transitionEndEvent, cb);\r\n                        el_1._moveCb = null;\r\n                        removeTransitionClass(el_1, moveClass);\r\n                    }\r\n                }));\r\n            }\r\n        });\r\n    },\r\n    methods: {\r\n        hasMove: function (el, moveClass) {\r\n            /* istanbul ignore if */\r\n            if (!hasTransition) {\r\n                return false;\r\n            }\r\n            /* istanbul ignore if */\r\n            if (this._hasMove) {\r\n                return this._hasMove;\r\n            }\r\n            // Detect whether an element with the move class applied has\r\n            // CSS transitions. Since the element may be inside an entering\r\n            // transition at this very moment, we make a clone of it and remove\r\n            // all other transition classes applied to ensure only the move class\r\n            // is applied.\r\n            var clone = el.cloneNode();\r\n            if (el._transitionClasses) {\r\n                el._transitionClasses.forEach(function (cls) {\r\n                    removeClass(clone, cls);\r\n                });\r\n            }\r\n            addClass(clone, moveClass);\r\n            clone.style.display = 'none';\r\n            this.$el.appendChild(clone);\r\n            var info = getTransitionInfo(clone);\r\n            this.$el.removeChild(clone);\r\n            return (this._hasMove = info.hasTransform);\r\n        }\r\n    }\r\n};\r\nfunction callPendingCbs(c) {\r\n    /* istanbul ignore if */\r\n    if (c.elm._moveCb) {\r\n        c.elm._moveCb();\r\n    }\r\n    /* istanbul ignore if */\r\n    if (c.elm._enterCb) {\r\n        c.elm._enterCb();\r\n    }\r\n}\r\nfunction recordPosition(c) {\r\n    c.data.newPos = c.elm.getBoundingClientRect();\r\n}\r\nfunction applyTranslation(c) {\r\n    var oldPos = c.data.pos;\r\n    var newPos = c.data.newPos;\r\n    var dx = oldPos.left - newPos.left;\r\n    var dy = oldPos.top - newPos.top;\r\n    if (dx || dy) {\r\n        c.data.moved = true;\r\n        var s = c.elm.style;\r\n        s.transform = s.WebkitTransform = \"translate(\".concat(dx, \"px,\").concat(dy, \"px)\");\r\n        s.transitionDuration = '0s';\r\n    }\r\n}\n\nvar platformComponents = {\r\n    Transition: Transition,\r\n    TransitionGroup: TransitionGroup\r\n};\n\n// install platform specific utils\r\nVue.config.mustUseProp = mustUseProp;\r\nVue.config.isReservedTag = isReservedTag;\r\nVue.config.isReservedAttr = isReservedAttr;\r\nVue.config.getTagNamespace = getTagNamespace;\r\nVue.config.isUnknownElement = isUnknownElement;\r\n// install platform runtime directives & components\r\nextend(Vue.options.directives, platformDirectives);\r\nextend(Vue.options.components, platformComponents);\r\n// install platform patch function\r\nVue.prototype.__patch__ = inBrowser ? patch : noop;\r\n// public mount method\r\nVue.prototype.$mount = function (el, hydrating) {\r\n    el = el && inBrowser ? query(el) : undefined;\r\n    return mountComponent(this, el, hydrating);\r\n};\r\n// devtools global hook\r\n/* istanbul ignore next */\r\nif (inBrowser) {\r\n    setTimeout(function () {\r\n        if (config.devtools) {\r\n            if (devtools) {\r\n                devtools.emit('init', Vue);\r\n            }\r\n            else if (true) {\r\n                // @ts-expect-error\r\n                console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\\n' +\r\n                    'https://github.com/vuejs/vue-devtools');\r\n            }\r\n        }\r\n        if ( true &&\r\n            config.productionTip !== false &&\r\n            typeof console !== 'undefined') {\r\n            // @ts-expect-error\r\n            console[console.info ? 'info' : 'log'](\"You are running Vue in development mode.\\n\" +\r\n                \"Make sure to turn on production mode when deploying for production.\\n\" +\r\n                \"See more tips at https://vuejs.org/guide/deployment.html\");\r\n        }\r\n    }, 0);\r\n}\n\nvar defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\r\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\r\nvar buildRegex = cached(function (delimiters) {\r\n    var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\r\n    var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\r\n    return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g');\r\n});\r\nfunction parseText(text, delimiters) {\r\n    //@ts-expect-error\r\n    var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\r\n    if (!tagRE.test(text)) {\r\n        return;\r\n    }\r\n    var tokens = [];\r\n    var rawTokens = [];\r\n    var lastIndex = (tagRE.lastIndex = 0);\r\n    var match, index, tokenValue;\r\n    while ((match = tagRE.exec(text))) {\r\n        index = match.index;\r\n        // push text token\r\n        if (index > lastIndex) {\r\n            rawTokens.push((tokenValue = text.slice(lastIndex, index)));\r\n            tokens.push(JSON.stringify(tokenValue));\r\n        }\r\n        // tag token\r\n        var exp = parseFilters(match[1].trim());\r\n        tokens.push(\"_s(\".concat(exp, \")\"));\r\n        rawTokens.push({ '@binding': exp });\r\n        lastIndex = index + match[0].length;\r\n    }\r\n    if (lastIndex < text.length) {\r\n        rawTokens.push((tokenValue = text.slice(lastIndex)));\r\n        tokens.push(JSON.stringify(tokenValue));\r\n    }\r\n    return {\r\n        expression: tokens.join('+'),\r\n        tokens: rawTokens\r\n    };\r\n}\n\nfunction transformNode$1(el, options) {\r\n    var warn = options.warn || baseWarn;\r\n    var staticClass = getAndRemoveAttr(el, 'class');\r\n    if ( true && staticClass) {\r\n        var res = parseText(staticClass, options.delimiters);\r\n        if (res) {\r\n            warn(\"class=\\\"\".concat(staticClass, \"\\\": \") +\r\n                'Interpolation inside attributes has been removed. ' +\r\n                'Use v-bind or the colon shorthand instead. For example, ' +\r\n                'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.', el.rawAttrsMap['class']);\r\n        }\r\n    }\r\n    if (staticClass) {\r\n        el.staticClass = JSON.stringify(staticClass.replace(/\\s+/g, ' ').trim());\r\n    }\r\n    var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\r\n    if (classBinding) {\r\n        el.classBinding = classBinding;\r\n    }\r\n}\r\nfunction genData$2(el) {\r\n    var data = '';\r\n    if (el.staticClass) {\r\n        data += \"staticClass:\".concat(el.staticClass, \",\");\r\n    }\r\n    if (el.classBinding) {\r\n        data += \"class:\".concat(el.classBinding, \",\");\r\n    }\r\n    return data;\r\n}\r\nvar klass = {\r\n    staticKeys: ['staticClass'],\r\n    transformNode: transformNode$1,\r\n    genData: genData$2\r\n};\n\nfunction transformNode(el, options) {\r\n    var warn = options.warn || baseWarn;\r\n    var staticStyle = getAndRemoveAttr(el, 'style');\r\n    if (staticStyle) {\r\n        /* istanbul ignore if */\r\n        if (true) {\r\n            var res = parseText(staticStyle, options.delimiters);\r\n            if (res) {\r\n                warn(\"style=\\\"\".concat(staticStyle, \"\\\": \") +\r\n                    'Interpolation inside attributes has been removed. ' +\r\n                    'Use v-bind or the colon shorthand instead. For example, ' +\r\n                    'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.', el.rawAttrsMap['style']);\r\n            }\r\n        }\r\n        el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\r\n    }\r\n    var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\r\n    if (styleBinding) {\r\n        el.styleBinding = styleBinding;\r\n    }\r\n}\r\nfunction genData$1(el) {\r\n    var data = '';\r\n    if (el.staticStyle) {\r\n        data += \"staticStyle:\".concat(el.staticStyle, \",\");\r\n    }\r\n    if (el.styleBinding) {\r\n        data += \"style:(\".concat(el.styleBinding, \"),\");\r\n    }\r\n    return data;\r\n}\r\nvar style = {\r\n    staticKeys: ['staticStyle'],\r\n    transformNode: transformNode,\r\n    genData: genData$1\r\n};\n\nvar decoder;\r\nvar he = {\r\n    decode: function (html) {\r\n        decoder = decoder || document.createElement('div');\r\n        decoder.innerHTML = html;\r\n        return decoder.textContent;\r\n    }\r\n};\n\nvar isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\r\n    'link,meta,param,source,track,wbr');\r\n// Elements that you can, intentionally, leave open\r\n// (and which close themselves)\r\nvar canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source');\r\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\r\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\r\nvar isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\r\n    'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\r\n    'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\r\n    'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\r\n    'title,tr,track');\n\n/**\r\n * Not type-checking this file because it's mostly vendor code.\r\n */\r\n// Regular Expressions for parsing tags and attributes\r\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\r\nvar dynamicArgAttribute = /^\\s*((?:v-[\\w-]+:|@|:|#)\\[[^=]+?\\][^\\s\"'<>\\/=]*)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\r\nvar ncname = \"[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z\".concat(unicodeRegExp.source, \"]*\");\r\nvar qnameCapture = \"((?:\".concat(ncname, \"\\\\:)?\").concat(ncname, \")\");\r\nvar startTagOpen = new RegExp(\"^<\".concat(qnameCapture));\r\nvar startTagClose = /^\\s*(\\/?)>/;\r\nvar endTag = new RegExp(\"^<\\\\/\".concat(qnameCapture, \"[^>]*>\"));\r\nvar doctype = /^<!DOCTYPE [^>]+>/i;\r\n// #7298: escape - to avoid being passed as HTML comment when inlined in page\r\nvar comment = /^<!\\--/;\r\nvar conditionalComment = /^<!\\[/;\r\n// Special Elements (can contain anything)\r\nvar isPlainTextElement = makeMap('script,style,textarea', true);\r\nvar reCache = {};\r\nvar decodingMap = {\r\n    '&lt;': '<',\r\n    '&gt;': '>',\r\n    '&quot;': '\"',\r\n    '&amp;': '&',\r\n    '&#10;': '\\n',\r\n    '&#9;': '\\t',\r\n    '&#39;': \"'\"\r\n};\r\nvar encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;\r\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;\r\n// #5992\r\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\r\nvar shouldIgnoreFirstNewline = function (tag, html) {\r\n    return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n';\r\n};\r\nfunction decodeAttr(value, shouldDecodeNewlines) {\r\n    var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\r\n    return value.replace(re, function (match) { return decodingMap[match]; });\r\n}\r\nfunction parseHTML(html, options) {\r\n    var stack = [];\r\n    var expectHTML = options.expectHTML;\r\n    var isUnaryTag = options.isUnaryTag || no;\r\n    var canBeLeftOpenTag = options.canBeLeftOpenTag || no;\r\n    var index = 0;\r\n    var last, lastTag;\r\n    var _loop_1 = function () {\r\n        last = html;\r\n        // Make sure we're not in a plaintext content element like script/style\r\n        if (!lastTag || !isPlainTextElement(lastTag)) {\r\n            var textEnd = html.indexOf('<');\r\n            if (textEnd === 0) {\r\n                // Comment:\r\n                if (comment.test(html)) {\r\n                    var commentEnd = html.indexOf('-->');\r\n                    if (commentEnd >= 0) {\r\n                        if (options.shouldKeepComment && options.comment) {\r\n                            options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);\r\n                        }\r\n                        advance(commentEnd + 3);\r\n                        return \"continue\";\r\n                    }\r\n                }\r\n                // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\r\n                if (conditionalComment.test(html)) {\r\n                    var conditionalEnd = html.indexOf(']>');\r\n                    if (conditionalEnd >= 0) {\r\n                        advance(conditionalEnd + 2);\r\n                        return \"continue\";\r\n                    }\r\n                }\r\n                // Doctype:\r\n                var doctypeMatch = html.match(doctype);\r\n                if (doctypeMatch) {\r\n                    advance(doctypeMatch[0].length);\r\n                    return \"continue\";\r\n                }\r\n                // End tag:\r\n                var endTagMatch = html.match(endTag);\r\n                if (endTagMatch) {\r\n                    var curIndex = index;\r\n                    advance(endTagMatch[0].length);\r\n                    parseEndTag(endTagMatch[1], curIndex, index);\r\n                    return \"continue\";\r\n                }\r\n                // Start tag:\r\n                var startTagMatch = parseStartTag();\r\n                if (startTagMatch) {\r\n                    handleStartTag(startTagMatch);\r\n                    if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {\r\n                        advance(1);\r\n                    }\r\n                    return \"continue\";\r\n                }\r\n            }\r\n            var text = void 0, rest = void 0, next = void 0;\r\n            if (textEnd >= 0) {\r\n                rest = html.slice(textEnd);\r\n                while (!endTag.test(rest) &&\r\n                    !startTagOpen.test(rest) &&\r\n                    !comment.test(rest) &&\r\n                    !conditionalComment.test(rest)) {\r\n                    // < in plain text, be forgiving and treat it as text\r\n                    next = rest.indexOf('<', 1);\r\n                    if (next < 0)\r\n                        break;\r\n                    textEnd += next;\r\n                    rest = html.slice(textEnd);\r\n                }\r\n                text = html.substring(0, textEnd);\r\n            }\r\n            if (textEnd < 0) {\r\n                text = html;\r\n            }\r\n            if (text) {\r\n                advance(text.length);\r\n            }\r\n            if (options.chars && text) {\r\n                options.chars(text, index - text.length, index);\r\n            }\r\n        }\r\n        else {\r\n            var endTagLength_1 = 0;\r\n            var stackedTag_1 = lastTag.toLowerCase();\r\n            var reStackedTag = reCache[stackedTag_1] ||\r\n                (reCache[stackedTag_1] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag_1 + '[^>]*>)', 'i'));\r\n            var rest = html.replace(reStackedTag, function (all, text, endTag) {\r\n                endTagLength_1 = endTag.length;\r\n                if (!isPlainTextElement(stackedTag_1) && stackedTag_1 !== 'noscript') {\r\n                    text = text\r\n                        .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\r\n                        .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\r\n                }\r\n                if (shouldIgnoreFirstNewline(stackedTag_1, text)) {\r\n                    text = text.slice(1);\r\n                }\r\n                if (options.chars) {\r\n                    options.chars(text);\r\n                }\r\n                return '';\r\n            });\r\n            index += html.length - rest.length;\r\n            html = rest;\r\n            parseEndTag(stackedTag_1, index - endTagLength_1, index);\r\n        }\r\n        if (html === last) {\r\n            options.chars && options.chars(html);\r\n            if ( true && !stack.length && options.warn) {\r\n                options.warn(\"Mal-formatted tag at end of template: \\\"\".concat(html, \"\\\"\"), {\r\n                    start: index + html.length\r\n                });\r\n            }\r\n            return \"break\";\r\n        }\r\n    };\r\n    while (html) {\r\n        var state_1 = _loop_1();\r\n        if (state_1 === \"break\")\r\n            break;\r\n    }\r\n    // Clean up any remaining tags\r\n    parseEndTag();\r\n    function advance(n) {\r\n        index += n;\r\n        html = html.substring(n);\r\n    }\r\n    function parseStartTag() {\r\n        var start = html.match(startTagOpen);\r\n        if (start) {\r\n            var match = {\r\n                tagName: start[1],\r\n                attrs: [],\r\n                start: index\r\n            };\r\n            advance(start[0].length);\r\n            var end = void 0, attr = void 0;\r\n            while (!(end = html.match(startTagClose)) &&\r\n                (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {\r\n                attr.start = index;\r\n                advance(attr[0].length);\r\n                attr.end = index;\r\n                match.attrs.push(attr);\r\n            }\r\n            if (end) {\r\n                match.unarySlash = end[1];\r\n                advance(end[0].length);\r\n                match.end = index;\r\n                return match;\r\n            }\r\n        }\r\n    }\r\n    function handleStartTag(match) {\r\n        var tagName = match.tagName;\r\n        var unarySlash = match.unarySlash;\r\n        if (expectHTML) {\r\n            if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\r\n                parseEndTag(lastTag);\r\n            }\r\n            if (canBeLeftOpenTag(tagName) && lastTag === tagName) {\r\n                parseEndTag(tagName);\r\n            }\r\n        }\r\n        var unary = isUnaryTag(tagName) || !!unarySlash;\r\n        var l = match.attrs.length;\r\n        var attrs = new Array(l);\r\n        for (var i = 0; i < l; i++) {\r\n            var args = match.attrs[i];\r\n            var value = args[3] || args[4] || args[5] || '';\r\n            var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\r\n                ? options.shouldDecodeNewlinesForHref\r\n                : options.shouldDecodeNewlines;\r\n            attrs[i] = {\r\n                name: args[1],\r\n                value: decodeAttr(value, shouldDecodeNewlines)\r\n            };\r\n            if ( true && options.outputSourceRange) {\r\n                attrs[i].start = args.start + args[0].match(/^\\s*/).length;\r\n                attrs[i].end = args.end;\r\n            }\r\n        }\r\n        if (!unary) {\r\n            stack.push({\r\n                tag: tagName,\r\n                lowerCasedTag: tagName.toLowerCase(),\r\n                attrs: attrs,\r\n                start: match.start,\r\n                end: match.end\r\n            });\r\n            lastTag = tagName;\r\n        }\r\n        if (options.start) {\r\n            options.start(tagName, attrs, unary, match.start, match.end);\r\n        }\r\n    }\r\n    function parseEndTag(tagName, start, end) {\r\n        var pos, lowerCasedTagName;\r\n        if (start == null)\r\n            start = index;\r\n        if (end == null)\r\n            end = index;\r\n        // Find the closest opened tag of the same type\r\n        if (tagName) {\r\n            lowerCasedTagName = tagName.toLowerCase();\r\n            for (pos = stack.length - 1; pos >= 0; pos--) {\r\n                if (stack[pos].lowerCasedTag === lowerCasedTagName) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // If no tag name is provided, clean shop\r\n            pos = 0;\r\n        }\r\n        if (pos >= 0) {\r\n            // Close all the open elements, up the stack\r\n            for (var i = stack.length - 1; i >= pos; i--) {\r\n                if ( true && (i > pos || !tagName) && options.warn) {\r\n                    options.warn(\"tag <\".concat(stack[i].tag, \"> has no matching end tag.\"), {\r\n                        start: stack[i].start,\r\n                        end: stack[i].end\r\n                    });\r\n                }\r\n                if (options.end) {\r\n                    options.end(stack[i].tag, start, end);\r\n                }\r\n            }\r\n            // Remove the open elements from the stack\r\n            stack.length = pos;\r\n            lastTag = pos && stack[pos - 1].tag;\r\n        }\r\n        else if (lowerCasedTagName === 'br') {\r\n            if (options.start) {\r\n                options.start(tagName, [], true, start, end);\r\n            }\r\n        }\r\n        else if (lowerCasedTagName === 'p') {\r\n            if (options.start) {\r\n                options.start(tagName, [], false, start, end);\r\n            }\r\n            if (options.end) {\r\n                options.end(tagName, start, end);\r\n            }\r\n        }\r\n    }\r\n}\n\nvar onRE = /^@|^v-on:/;\r\nvar dirRE = /^v-|^@|^:|^#/;\r\nvar forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\r\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\r\nvar stripParensRE = /^\\(|\\)$/g;\r\nvar dynamicArgRE = /^\\[.*\\]$/;\r\nvar argRE = /:(.*)$/;\r\nvar bindRE = /^:|^\\.|^v-bind:/;\r\nvar modifierRE = /\\.[^.\\]]+(?=[^\\]]*$)/g;\r\nvar slotRE = /^v-slot(:|$)|^#/;\r\nvar lineBreakRE = /[\\r\\n]/;\r\nvar whitespaceRE = /[ \\f\\t\\r\\n]+/g;\r\nvar invalidAttributeRE = /[\\s\"'<>\\/=]/;\r\nvar decodeHTMLCached = cached(he.decode);\r\nvar emptySlotScopeToken = \"_empty_\";\r\n// configurable state\r\nvar warn;\r\nvar delimiters;\r\nvar transforms;\r\nvar preTransforms;\r\nvar postTransforms;\r\nvar platformIsPreTag;\r\nvar platformMustUseProp;\r\nvar platformGetTagNamespace;\r\nvar maybeComponent;\r\nfunction createASTElement(tag, attrs, parent) {\r\n    return {\r\n        type: 1,\r\n        tag: tag,\r\n        attrsList: attrs,\r\n        attrsMap: makeAttrsMap(attrs),\r\n        rawAttrsMap: {},\r\n        parent: parent,\r\n        children: []\r\n    };\r\n}\r\n/**\r\n * Convert HTML string to AST.\r\n */\r\nfunction parse(template, options) {\r\n    warn = options.warn || baseWarn;\r\n    platformIsPreTag = options.isPreTag || no;\r\n    platformMustUseProp = options.mustUseProp || no;\r\n    platformGetTagNamespace = options.getTagNamespace || no;\r\n    var isReservedTag = options.isReservedTag || no;\r\n    maybeComponent = function (el) {\r\n        return !!(el.component ||\r\n            el.attrsMap[':is'] ||\r\n            el.attrsMap['v-bind:is'] ||\r\n            !(el.attrsMap.is ? isReservedTag(el.attrsMap.is) : isReservedTag(el.tag)));\r\n    };\r\n    transforms = pluckModuleFunction(options.modules, 'transformNode');\r\n    preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\r\n    postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\r\n    delimiters = options.delimiters;\r\n    var stack = [];\r\n    var preserveWhitespace = options.preserveWhitespace !== false;\r\n    var whitespaceOption = options.whitespace;\r\n    var root;\r\n    var currentParent;\r\n    var inVPre = false;\r\n    var inPre = false;\r\n    var warned = false;\r\n    function warnOnce(msg, range) {\r\n        if (!warned) {\r\n            warned = true;\r\n            warn(msg, range);\r\n        }\r\n    }\r\n    function closeElement(element) {\r\n        trimEndingWhitespace(element);\r\n        if (!inVPre && !element.processed) {\r\n            element = processElement(element, options);\r\n        }\r\n        // tree management\r\n        if (!stack.length && element !== root) {\r\n            // allow root elements with v-if, v-else-if and v-else\r\n            if (root.if && (element.elseif || element.else)) {\r\n                if (true) {\r\n                    checkRootConstraints(element);\r\n                }\r\n                addIfCondition(root, {\r\n                    exp: element.elseif,\r\n                    block: element\r\n                });\r\n            }\r\n            else if (true) {\r\n                warnOnce(\"Component template should contain exactly one root element. \" +\r\n                    \"If you are using v-if on multiple elements, \" +\r\n                    \"use v-else-if to chain them instead.\", { start: element.start });\r\n            }\r\n        }\r\n        if (currentParent && !element.forbidden) {\r\n            if (element.elseif || element.else) {\r\n                processIfConditions(element, currentParent);\r\n            }\r\n            else {\r\n                if (element.slotScope) {\r\n                    // scoped slot\r\n                    // keep it in the children list so that v-else(-if) conditions can\r\n                    // find it as the prev node.\r\n                    var name_1 = element.slotTarget || '\"default\"';\r\n                    (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name_1] = element;\r\n                }\r\n                currentParent.children.push(element);\r\n                element.parent = currentParent;\r\n            }\r\n        }\r\n        // final children cleanup\r\n        // filter out scoped slots\r\n        element.children = element.children.filter(function (c) { return !c.slotScope; });\r\n        // remove trailing whitespace node again\r\n        trimEndingWhitespace(element);\r\n        // check pre state\r\n        if (element.pre) {\r\n            inVPre = false;\r\n        }\r\n        if (platformIsPreTag(element.tag)) {\r\n            inPre = false;\r\n        }\r\n        // apply post-transforms\r\n        for (var i = 0; i < postTransforms.length; i++) {\r\n            postTransforms[i](element, options);\r\n        }\r\n    }\r\n    function trimEndingWhitespace(el) {\r\n        // remove trailing whitespace node\r\n        if (!inPre) {\r\n            var lastNode = void 0;\r\n            while ((lastNode = el.children[el.children.length - 1]) &&\r\n                lastNode.type === 3 &&\r\n                lastNode.text === ' ') {\r\n                el.children.pop();\r\n            }\r\n        }\r\n    }\r\n    function checkRootConstraints(el) {\r\n        if (el.tag === 'slot' || el.tag === 'template') {\r\n            warnOnce(\"Cannot use <\".concat(el.tag, \"> as component root element because it may \") +\r\n                'contain multiple nodes.', { start: el.start });\r\n        }\r\n        if (el.attrsMap.hasOwnProperty('v-for')) {\r\n            warnOnce('Cannot use v-for on stateful component root element because ' +\r\n                'it renders multiple elements.', el.rawAttrsMap['v-for']);\r\n        }\r\n    }\r\n    parseHTML(template, {\r\n        warn: warn,\r\n        expectHTML: options.expectHTML,\r\n        isUnaryTag: options.isUnaryTag,\r\n        canBeLeftOpenTag: options.canBeLeftOpenTag,\r\n        shouldDecodeNewlines: options.shouldDecodeNewlines,\r\n        shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\r\n        shouldKeepComment: options.comments,\r\n        outputSourceRange: options.outputSourceRange,\r\n        start: function (tag, attrs, unary, start, end) {\r\n            // check namespace.\r\n            // inherit parent ns if there is one\r\n            var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\r\n            // handle IE svg bug\r\n            /* istanbul ignore if */\r\n            if (isIE && ns === 'svg') {\r\n                attrs = guardIESVGBug(attrs);\r\n            }\r\n            var element = createASTElement(tag, attrs, currentParent);\r\n            if (ns) {\r\n                element.ns = ns;\r\n            }\r\n            if (true) {\r\n                if (options.outputSourceRange) {\r\n                    element.start = start;\r\n                    element.end = end;\r\n                    element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {\r\n                        cumulated[attr.name] = attr;\r\n                        return cumulated;\r\n                    }, {});\r\n                }\r\n                attrs.forEach(function (attr) {\r\n                    if (invalidAttributeRE.test(attr.name)) {\r\n                        warn(\"Invalid dynamic argument expression: attribute names cannot contain \" +\r\n                            \"spaces, quotes, <, >, / or =.\", options.outputSourceRange\r\n                            ? {\r\n                                start: attr.start + attr.name.indexOf(\"[\"),\r\n                                end: attr.start + attr.name.length\r\n                            }\r\n                            : undefined);\r\n                    }\r\n                });\r\n            }\r\n            if (isForbiddenTag(element) && !isServerRendering()) {\r\n                element.forbidden = true;\r\n                 true &&\r\n                    warn('Templates should only be responsible for mapping the state to the ' +\r\n                        'UI. Avoid placing tags with side-effects in your templates, such as ' +\r\n                        \"<\".concat(tag, \">\") +\r\n                        ', as they will not be parsed.', { start: element.start });\r\n            }\r\n            // apply pre-transforms\r\n            for (var i = 0; i < preTransforms.length; i++) {\r\n                element = preTransforms[i](element, options) || element;\r\n            }\r\n            if (!inVPre) {\r\n                processPre(element);\r\n                if (element.pre) {\r\n                    inVPre = true;\r\n                }\r\n            }\r\n            if (platformIsPreTag(element.tag)) {\r\n                inPre = true;\r\n            }\r\n            if (inVPre) {\r\n                processRawAttrs(element);\r\n            }\r\n            else if (!element.processed) {\r\n                // structural directives\r\n                processFor(element);\r\n                processIf(element);\r\n                processOnce(element);\r\n            }\r\n            if (!root) {\r\n                root = element;\r\n                if (true) {\r\n                    checkRootConstraints(root);\r\n                }\r\n            }\r\n            if (!unary) {\r\n                currentParent = element;\r\n                stack.push(element);\r\n            }\r\n            else {\r\n                closeElement(element);\r\n            }\r\n        },\r\n        end: function (tag, start, end) {\r\n            var element = stack[stack.length - 1];\r\n            // pop stack\r\n            stack.length -= 1;\r\n            currentParent = stack[stack.length - 1];\r\n            if ( true && options.outputSourceRange) {\r\n                element.end = end;\r\n            }\r\n            closeElement(element);\r\n        },\r\n        chars: function (text, start, end) {\r\n            if (!currentParent) {\r\n                if (true) {\r\n                    if (text === template) {\r\n                        warnOnce('Component template requires a root element, rather than just text.', { start: start });\r\n                    }\r\n                    else if ((text = text.trim())) {\r\n                        warnOnce(\"text \\\"\".concat(text, \"\\\" outside root element will be ignored.\"), {\r\n                            start: start\r\n                        });\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            // IE textarea placeholder bug\r\n            /* istanbul ignore if */\r\n            if (isIE &&\r\n                currentParent.tag === 'textarea' &&\r\n                currentParent.attrsMap.placeholder === text) {\r\n                return;\r\n            }\r\n            var children = currentParent.children;\r\n            if (inPre || text.trim()) {\r\n                text = isTextTag(currentParent)\r\n                    ? text\r\n                    : decodeHTMLCached(text);\r\n            }\r\n            else if (!children.length) {\r\n                // remove the whitespace-only node right after an opening tag\r\n                text = '';\r\n            }\r\n            else if (whitespaceOption) {\r\n                if (whitespaceOption === 'condense') {\r\n                    // in condense mode, remove the whitespace node if it contains\r\n                    // line break, otherwise condense to a single space\r\n                    text = lineBreakRE.test(text) ? '' : ' ';\r\n                }\r\n                else {\r\n                    text = ' ';\r\n                }\r\n            }\r\n            else {\r\n                text = preserveWhitespace ? ' ' : '';\r\n            }\r\n            if (text) {\r\n                if (!inPre && whitespaceOption === 'condense') {\r\n                    // condense consecutive whitespaces into single space\r\n                    text = text.replace(whitespaceRE, ' ');\r\n                }\r\n                var res = void 0;\r\n                var child = void 0;\r\n                if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\r\n                    child = {\r\n                        type: 2,\r\n                        expression: res.expression,\r\n                        tokens: res.tokens,\r\n                        text: text\r\n                    };\r\n                }\r\n                else if (text !== ' ' ||\r\n                    !children.length ||\r\n                    children[children.length - 1].text !== ' ') {\r\n                    child = {\r\n                        type: 3,\r\n                        text: text\r\n                    };\r\n                }\r\n                if (child) {\r\n                    if ( true && options.outputSourceRange) {\r\n                        child.start = start;\r\n                        child.end = end;\r\n                    }\r\n                    children.push(child);\r\n                }\r\n            }\r\n        },\r\n        comment: function (text, start, end) {\r\n            // adding anything as a sibling to the root node is forbidden\r\n            // comments should still be allowed, but ignored\r\n            if (currentParent) {\r\n                var child = {\r\n                    type: 3,\r\n                    text: text,\r\n                    isComment: true\r\n                };\r\n                if ( true && options.outputSourceRange) {\r\n                    child.start = start;\r\n                    child.end = end;\r\n                }\r\n                currentParent.children.push(child);\r\n            }\r\n        }\r\n    });\r\n    return root;\r\n}\r\nfunction processPre(el) {\r\n    if (getAndRemoveAttr(el, 'v-pre') != null) {\r\n        el.pre = true;\r\n    }\r\n}\r\nfunction processRawAttrs(el) {\r\n    var list = el.attrsList;\r\n    var len = list.length;\r\n    if (len) {\r\n        var attrs = (el.attrs = new Array(len));\r\n        for (var i = 0; i < len; i++) {\r\n            attrs[i] = {\r\n                name: list[i].name,\r\n                value: JSON.stringify(list[i].value)\r\n            };\r\n            if (list[i].start != null) {\r\n                attrs[i].start = list[i].start;\r\n                attrs[i].end = list[i].end;\r\n            }\r\n        }\r\n    }\r\n    else if (!el.pre) {\r\n        // non root node in pre blocks with no attributes\r\n        el.plain = true;\r\n    }\r\n}\r\nfunction processElement(element, options) {\r\n    processKey(element);\r\n    // determine whether this is a plain element after\r\n    // removing structural attributes\r\n    element.plain =\r\n        !element.key && !element.scopedSlots && !element.attrsList.length;\r\n    processRef(element);\r\n    processSlotContent(element);\r\n    processSlotOutlet(element);\r\n    processComponent(element);\r\n    for (var i = 0; i < transforms.length; i++) {\r\n        element = transforms[i](element, options) || element;\r\n    }\r\n    processAttrs(element);\r\n    return element;\r\n}\r\nfunction processKey(el) {\r\n    var exp = getBindingAttr(el, 'key');\r\n    if (exp) {\r\n        if (true) {\r\n            if (el.tag === 'template') {\r\n                warn(\"<template> cannot be keyed. Place the key on real elements instead.\", getRawBindingAttr(el, 'key'));\r\n            }\r\n            if (el.for) {\r\n                var iterator = el.iterator2 || el.iterator1;\r\n                var parent_1 = el.parent;\r\n                if (iterator &&\r\n                    iterator === exp &&\r\n                    parent_1 &&\r\n                    parent_1.tag === 'transition-group') {\r\n                    warn(\"Do not use v-for index as key on <transition-group> children, \" +\r\n                        \"this is the same as not using keys.\", getRawBindingAttr(el, 'key'), true /* tip */);\r\n                }\r\n            }\r\n        }\r\n        el.key = exp;\r\n    }\r\n}\r\nfunction processRef(el) {\r\n    var ref = getBindingAttr(el, 'ref');\r\n    if (ref) {\r\n        el.ref = ref;\r\n        el.refInFor = checkInFor(el);\r\n    }\r\n}\r\nfunction processFor(el) {\r\n    var exp;\r\n    if ((exp = getAndRemoveAttr(el, 'v-for'))) {\r\n        var res = parseFor(exp);\r\n        if (res) {\r\n            extend(el, res);\r\n        }\r\n        else if (true) {\r\n            warn(\"Invalid v-for expression: \".concat(exp), el.rawAttrsMap['v-for']);\r\n        }\r\n    }\r\n}\r\nfunction parseFor(exp) {\r\n    var inMatch = exp.match(forAliasRE);\r\n    if (!inMatch)\r\n        return;\r\n    var res = {};\r\n    res.for = inMatch[2].trim();\r\n    var alias = inMatch[1].trim().replace(stripParensRE, '');\r\n    var iteratorMatch = alias.match(forIteratorRE);\r\n    if (iteratorMatch) {\r\n        res.alias = alias.replace(forIteratorRE, '').trim();\r\n        res.iterator1 = iteratorMatch[1].trim();\r\n        if (iteratorMatch[2]) {\r\n            res.iterator2 = iteratorMatch[2].trim();\r\n        }\r\n    }\r\n    else {\r\n        res.alias = alias;\r\n    }\r\n    return res;\r\n}\r\nfunction processIf(el) {\r\n    var exp = getAndRemoveAttr(el, 'v-if');\r\n    if (exp) {\r\n        el.if = exp;\r\n        addIfCondition(el, {\r\n            exp: exp,\r\n            block: el\r\n        });\r\n    }\r\n    else {\r\n        if (getAndRemoveAttr(el, 'v-else') != null) {\r\n            el.else = true;\r\n        }\r\n        var elseif = getAndRemoveAttr(el, 'v-else-if');\r\n        if (elseif) {\r\n            el.elseif = elseif;\r\n        }\r\n    }\r\n}\r\nfunction processIfConditions(el, parent) {\r\n    var prev = findPrevElement(parent.children);\r\n    if (prev && prev.if) {\r\n        addIfCondition(prev, {\r\n            exp: el.elseif,\r\n            block: el\r\n        });\r\n    }\r\n    else if (true) {\r\n        warn(\"v-\".concat(el.elseif ? 'else-if=\"' + el.elseif + '\"' : 'else', \" \") +\r\n            \"used on element <\".concat(el.tag, \"> without corresponding v-if.\"), el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']);\r\n    }\r\n}\r\nfunction findPrevElement(children) {\r\n    var i = children.length;\r\n    while (i--) {\r\n        if (children[i].type === 1) {\r\n            return children[i];\r\n        }\r\n        else {\r\n            if ( true && children[i].text !== ' ') {\r\n                warn(\"text \\\"\".concat(children[i].text.trim(), \"\\\" between v-if and v-else(-if) \") +\r\n                    \"will be ignored.\", children[i]);\r\n            }\r\n            children.pop();\r\n        }\r\n    }\r\n}\r\nfunction addIfCondition(el, condition) {\r\n    if (!el.ifConditions) {\r\n        el.ifConditions = [];\r\n    }\r\n    el.ifConditions.push(condition);\r\n}\r\nfunction processOnce(el) {\r\n    var once = getAndRemoveAttr(el, 'v-once');\r\n    if (once != null) {\r\n        el.once = true;\r\n    }\r\n}\r\n// handle content being passed to a component as slot,\r\n// e.g. <template slot=\"xxx\">, <div slot-scope=\"xxx\">\r\nfunction processSlotContent(el) {\r\n    var slotScope;\r\n    if (el.tag === 'template') {\r\n        slotScope = getAndRemoveAttr(el, 'scope');\r\n        /* istanbul ignore if */\r\n        if ( true && slotScope) {\r\n            warn(\"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\r\n                \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\r\n                \"can also be used on plain elements in addition to <template> to \" +\r\n                \"denote scoped slots.\", el.rawAttrsMap['scope'], true);\r\n        }\r\n        el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\r\n    }\r\n    else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\r\n        /* istanbul ignore if */\r\n        if ( true && el.attrsMap['v-for']) {\r\n            warn(\"Ambiguous combined usage of slot-scope and v-for on <\".concat(el.tag, \"> \") +\r\n                \"(v-for takes higher priority). Use a wrapper <template> for the \" +\r\n                \"scoped slot to make it clearer.\", el.rawAttrsMap['slot-scope'], true);\r\n        }\r\n        el.slotScope = slotScope;\r\n    }\r\n    // slot=\"xxx\"\r\n    var slotTarget = getBindingAttr(el, 'slot');\r\n    if (slotTarget) {\r\n        el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\r\n        el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);\r\n        // preserve slot as an attribute for native shadow DOM compat\r\n        // only for non-scoped slots.\r\n        if (el.tag !== 'template' && !el.slotScope) {\r\n            addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));\r\n        }\r\n    }\r\n    // 2.6 v-slot syntax\r\n    {\r\n        if (el.tag === 'template') {\r\n            // v-slot on <template>\r\n            var slotBinding = getAndRemoveAttrByRegex(el, slotRE);\r\n            if (slotBinding) {\r\n                if (true) {\r\n                    if (el.slotTarget || el.slotScope) {\r\n                        warn(\"Unexpected mixed usage of different slot syntaxes.\", el);\r\n                    }\r\n                    if (el.parent && !maybeComponent(el.parent)) {\r\n                        warn(\"<template v-slot> can only appear at the root level inside \" +\r\n                            \"the receiving component\", el);\r\n                    }\r\n                }\r\n                var _a = getSlotName(slotBinding), name_2 = _a.name, dynamic = _a.dynamic;\r\n                el.slotTarget = name_2;\r\n                el.slotTargetDynamic = dynamic;\r\n                el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf\r\n            }\r\n        }\r\n        else {\r\n            // v-slot on component, denotes default slot\r\n            var slotBinding = getAndRemoveAttrByRegex(el, slotRE);\r\n            if (slotBinding) {\r\n                if (true) {\r\n                    if (!maybeComponent(el)) {\r\n                        warn(\"v-slot can only be used on components or <template>.\", slotBinding);\r\n                    }\r\n                    if (el.slotScope || el.slotTarget) {\r\n                        warn(\"Unexpected mixed usage of different slot syntaxes.\", el);\r\n                    }\r\n                    if (el.scopedSlots) {\r\n                        warn(\"To avoid scope ambiguity, the default slot should also use \" +\r\n                            \"<template> syntax when there are other named slots.\", slotBinding);\r\n                    }\r\n                }\r\n                // add the component's children to its default slot\r\n                var slots = el.scopedSlots || (el.scopedSlots = {});\r\n                var _b = getSlotName(slotBinding), name_3 = _b.name, dynamic = _b.dynamic;\r\n                var slotContainer_1 = (slots[name_3] = createASTElement('template', [], el));\r\n                slotContainer_1.slotTarget = name_3;\r\n                slotContainer_1.slotTargetDynamic = dynamic;\r\n                slotContainer_1.children = el.children.filter(function (c) {\r\n                    if (!c.slotScope) {\r\n                        c.parent = slotContainer_1;\r\n                        return true;\r\n                    }\r\n                });\r\n                slotContainer_1.slotScope = slotBinding.value || emptySlotScopeToken;\r\n                // remove children as they are returned from scopedSlots now\r\n                el.children = [];\r\n                // mark el non-plain so data gets generated\r\n                el.plain = false;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction getSlotName(binding) {\r\n    var name = binding.name.replace(slotRE, '');\r\n    if (!name) {\r\n        if (binding.name[0] !== '#') {\r\n            name = 'default';\r\n        }\r\n        else if (true) {\r\n            warn(\"v-slot shorthand syntax requires a slot name.\", binding);\r\n        }\r\n    }\r\n    return dynamicArgRE.test(name)\r\n        ? // dynamic [name]\r\n            { name: name.slice(1, -1), dynamic: true }\r\n        : // static name\r\n            { name: \"\\\"\".concat(name, \"\\\"\"), dynamic: false };\r\n}\r\n// handle <slot/> outlets\r\nfunction processSlotOutlet(el) {\r\n    if (el.tag === 'slot') {\r\n        el.slotName = getBindingAttr(el, 'name');\r\n        if ( true && el.key) {\r\n            warn(\"`key` does not work on <slot> because slots are abstract outlets \" +\r\n                \"and can possibly expand into multiple elements. \" +\r\n                \"Use the key on a wrapping element instead.\", getRawBindingAttr(el, 'key'));\r\n        }\r\n    }\r\n}\r\nfunction processComponent(el) {\r\n    var binding;\r\n    if ((binding = getBindingAttr(el, 'is'))) {\r\n        el.component = binding;\r\n    }\r\n    if (getAndRemoveAttr(el, 'inline-template') != null) {\r\n        el.inlineTemplate = true;\r\n    }\r\n}\r\nfunction processAttrs(el) {\r\n    var list = el.attrsList;\r\n    var i, l, name, rawName, value, modifiers, syncGen, isDynamic;\r\n    for (i = 0, l = list.length; i < l; i++) {\r\n        name = rawName = list[i].name;\r\n        value = list[i].value;\r\n        if (dirRE.test(name)) {\r\n            // mark element as dynamic\r\n            el.hasBindings = true;\r\n            // modifiers\r\n            modifiers = parseModifiers(name.replace(dirRE, ''));\r\n            // support .foo shorthand syntax for the .prop modifier\r\n            if (modifiers) {\r\n                name = name.replace(modifierRE, '');\r\n            }\r\n            if (bindRE.test(name)) {\r\n                // v-bind\r\n                name = name.replace(bindRE, '');\r\n                value = parseFilters(value);\r\n                isDynamic = dynamicArgRE.test(name);\r\n                if (isDynamic) {\r\n                    name = name.slice(1, -1);\r\n                }\r\n                if ( true && value.trim().length === 0) {\r\n                    warn(\"The value for a v-bind expression cannot be empty. Found in \\\"v-bind:\".concat(name, \"\\\"\"));\r\n                }\r\n                if (modifiers) {\r\n                    if (modifiers.prop && !isDynamic) {\r\n                        name = camelize(name);\r\n                        if (name === 'innerHtml')\r\n                            name = 'innerHTML';\r\n                    }\r\n                    if (modifiers.camel && !isDynamic) {\r\n                        name = camelize(name);\r\n                    }\r\n                    if (modifiers.sync) {\r\n                        syncGen = genAssignmentCode(value, \"$event\");\r\n                        if (!isDynamic) {\r\n                            addHandler(el, \"update:\".concat(camelize(name)), syncGen, null, false, warn, list[i]);\r\n                            if (hyphenate(name) !== camelize(name)) {\r\n                                addHandler(el, \"update:\".concat(hyphenate(name)), syncGen, null, false, warn, list[i]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // handler w/ dynamic event name\r\n                            addHandler(el, \"\\\"update:\\\"+(\".concat(name, \")\"), syncGen, null, false, warn, list[i], true // dynamic\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                if ((modifiers && modifiers.prop) ||\r\n                    (!el.component && platformMustUseProp(el.tag, el.attrsMap.type, name))) {\r\n                    addProp(el, name, value, list[i], isDynamic);\r\n                }\r\n                else {\r\n                    addAttr(el, name, value, list[i], isDynamic);\r\n                }\r\n            }\r\n            else if (onRE.test(name)) {\r\n                // v-on\r\n                name = name.replace(onRE, '');\r\n                isDynamic = dynamicArgRE.test(name);\r\n                if (isDynamic) {\r\n                    name = name.slice(1, -1);\r\n                }\r\n                addHandler(el, name, value, modifiers, false, warn, list[i], isDynamic);\r\n            }\r\n            else {\r\n                // normal directives\r\n                name = name.replace(dirRE, '');\r\n                // parse arg\r\n                var argMatch = name.match(argRE);\r\n                var arg = argMatch && argMatch[1];\r\n                isDynamic = false;\r\n                if (arg) {\r\n                    name = name.slice(0, -(arg.length + 1));\r\n                    if (dynamicArgRE.test(arg)) {\r\n                        arg = arg.slice(1, -1);\r\n                        isDynamic = true;\r\n                    }\r\n                }\r\n                addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);\r\n                if ( true && name === 'model') {\r\n                    checkForAliasModel(el, value);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // literal attribute\r\n            if (true) {\r\n                var res = parseText(value, delimiters);\r\n                if (res) {\r\n                    warn(\"\".concat(name, \"=\\\"\").concat(value, \"\\\": \") +\r\n                        'Interpolation inside attributes has been removed. ' +\r\n                        'Use v-bind or the colon shorthand instead. For example, ' +\r\n                        'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.', list[i]);\r\n                }\r\n            }\r\n            addAttr(el, name, JSON.stringify(value), list[i]);\r\n            // #6887 firefox doesn't update muted state if set via attribute\r\n            // even immediately after element creation\r\n            if (!el.component &&\r\n                name === 'muted' &&\r\n                platformMustUseProp(el.tag, el.attrsMap.type, name)) {\r\n                addProp(el, name, 'true', list[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction checkInFor(el) {\r\n    var parent = el;\r\n    while (parent) {\r\n        if (parent.for !== undefined) {\r\n            return true;\r\n        }\r\n        parent = parent.parent;\r\n    }\r\n    return false;\r\n}\r\nfunction parseModifiers(name) {\r\n    var match = name.match(modifierRE);\r\n    if (match) {\r\n        var ret_1 = {};\r\n        match.forEach(function (m) {\r\n            ret_1[m.slice(1)] = true;\r\n        });\r\n        return ret_1;\r\n    }\r\n}\r\nfunction makeAttrsMap(attrs) {\r\n    var map = {};\r\n    for (var i = 0, l = attrs.length; i < l; i++) {\r\n        if ( true && map[attrs[i].name] && !isIE && !isEdge) {\r\n            warn('duplicate attribute: ' + attrs[i].name, attrs[i]);\r\n        }\r\n        map[attrs[i].name] = attrs[i].value;\r\n    }\r\n    return map;\r\n}\r\n// for script (e.g. type=\"x/template\") or style, do not decode content\r\nfunction isTextTag(el) {\r\n    return el.tag === 'script' || el.tag === 'style';\r\n}\r\nfunction isForbiddenTag(el) {\r\n    return (el.tag === 'style' ||\r\n        (el.tag === 'script' &&\r\n            (!el.attrsMap.type || el.attrsMap.type === 'text/javascript')));\r\n}\r\nvar ieNSBug = /^xmlns:NS\\d+/;\r\nvar ieNSPrefix = /^NS\\d+:/;\r\n/* istanbul ignore next */\r\nfunction guardIESVGBug(attrs) {\r\n    var res = [];\r\n    for (var i = 0; i < attrs.length; i++) {\r\n        var attr = attrs[i];\r\n        if (!ieNSBug.test(attr.name)) {\r\n            attr.name = attr.name.replace(ieNSPrefix, '');\r\n            res.push(attr);\r\n        }\r\n    }\r\n    return res;\r\n}\r\nfunction checkForAliasModel(el, value) {\r\n    var _el = el;\r\n    while (_el) {\r\n        if (_el.for && _el.alias === value) {\r\n            warn(\"<\".concat(el.tag, \" v-model=\\\"\").concat(value, \"\\\">: \") +\r\n                \"You are binding v-model directly to a v-for iteration alias. \" +\r\n                \"This will not be able to modify the v-for source array because \" +\r\n                \"writing to the alias is like modifying a function local variable. \" +\r\n                \"Consider using an array of objects and use v-model on an object property instead.\", el.rawAttrsMap['v-model']);\r\n        }\r\n        _el = _el.parent;\r\n    }\r\n}\n\n/**\r\n * Expand input[v-model] with dynamic type bindings into v-if-else chains\r\n * Turn this:\r\n *   <input v-model=\"data[type]\" :type=\"type\">\r\n * into this:\r\n *   <input v-if=\"type === 'checkbox'\" type=\"checkbox\" v-model=\"data[type]\">\r\n *   <input v-else-if=\"type === 'radio'\" type=\"radio\" v-model=\"data[type]\">\r\n *   <input v-else :type=\"type\" v-model=\"data[type]\">\r\n */\r\nfunction preTransformNode(el, options) {\r\n    if (el.tag === 'input') {\r\n        var map = el.attrsMap;\r\n        if (!map['v-model']) {\r\n            return;\r\n        }\r\n        var typeBinding = void 0;\r\n        if (map[':type'] || map['v-bind:type']) {\r\n            typeBinding = getBindingAttr(el, 'type');\r\n        }\r\n        if (!map.type && !typeBinding && map['v-bind']) {\r\n            typeBinding = \"(\".concat(map['v-bind'], \").type\");\r\n        }\r\n        if (typeBinding) {\r\n            var ifCondition = getAndRemoveAttr(el, 'v-if', true);\r\n            var ifConditionExtra = ifCondition ? \"&&(\".concat(ifCondition, \")\") : \"\";\r\n            var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\r\n            var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\r\n            // 1. checkbox\r\n            var branch0 = cloneASTElement(el);\r\n            // process for on the main node\r\n            processFor(branch0);\r\n            addRawAttr(branch0, 'type', 'checkbox');\r\n            processElement(branch0, options);\r\n            branch0.processed = true; // prevent it from double-processed\r\n            branch0.if = \"(\".concat(typeBinding, \")==='checkbox'\") + ifConditionExtra;\r\n            addIfCondition(branch0, {\r\n                exp: branch0.if,\r\n                block: branch0\r\n            });\r\n            // 2. add radio else-if condition\r\n            var branch1 = cloneASTElement(el);\r\n            getAndRemoveAttr(branch1, 'v-for', true);\r\n            addRawAttr(branch1, 'type', 'radio');\r\n            processElement(branch1, options);\r\n            addIfCondition(branch0, {\r\n                exp: \"(\".concat(typeBinding, \")==='radio'\") + ifConditionExtra,\r\n                block: branch1\r\n            });\r\n            // 3. other\r\n            var branch2 = cloneASTElement(el);\r\n            getAndRemoveAttr(branch2, 'v-for', true);\r\n            addRawAttr(branch2, ':type', typeBinding);\r\n            processElement(branch2, options);\r\n            addIfCondition(branch0, {\r\n                exp: ifCondition,\r\n                block: branch2\r\n            });\r\n            if (hasElse) {\r\n                branch0.else = true;\r\n            }\r\n            else if (elseIfCondition) {\r\n                branch0.elseif = elseIfCondition;\r\n            }\r\n            return branch0;\r\n        }\r\n    }\r\n}\r\nfunction cloneASTElement(el) {\r\n    return createASTElement(el.tag, el.attrsList.slice(), el.parent);\r\n}\r\nvar model = {\r\n    preTransformNode: preTransformNode\r\n};\n\nvar modules = [klass, style, model];\n\nfunction text(el, dir) {\r\n    if (dir.value) {\r\n        addProp(el, 'textContent', \"_s(\".concat(dir.value, \")\"), dir);\r\n    }\r\n}\n\nfunction html(el, dir) {\r\n    if (dir.value) {\r\n        addProp(el, 'innerHTML', \"_s(\".concat(dir.value, \")\"), dir);\r\n    }\r\n}\n\nvar directives = {\r\n    model: model$1,\r\n    text: text,\r\n    html: html\r\n};\n\nvar baseOptions = {\r\n    expectHTML: true,\r\n    modules: modules,\r\n    directives: directives,\r\n    isPreTag: isPreTag,\r\n    isUnaryTag: isUnaryTag,\r\n    mustUseProp: mustUseProp,\r\n    canBeLeftOpenTag: canBeLeftOpenTag,\r\n    isReservedTag: isReservedTag,\r\n    getTagNamespace: getTagNamespace,\r\n    staticKeys: genStaticKeys$1(modules)\r\n};\n\nvar isStaticKey;\r\nvar isPlatformReservedTag;\r\nvar genStaticKeysCached = cached(genStaticKeys);\r\n/**\r\n * Goal of the optimizer: walk the generated template AST tree\r\n * and detect sub-trees that are purely static, i.e. parts of\r\n * the DOM that never needs to change.\r\n *\r\n * Once we detect these sub-trees, we can:\r\n *\r\n * 1. Hoist them into constants, so that we no longer need to\r\n *    create fresh nodes for them on each re-render;\r\n * 2. Completely skip them in the patching process.\r\n */\r\nfunction optimize(root, options) {\r\n    if (!root)\r\n        return;\r\n    isStaticKey = genStaticKeysCached(options.staticKeys || '');\r\n    isPlatformReservedTag = options.isReservedTag || no;\r\n    // first pass: mark all non-static nodes.\r\n    markStatic(root);\r\n    // second pass: mark static roots.\r\n    markStaticRoots(root, false);\r\n}\r\nfunction genStaticKeys(keys) {\r\n    return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +\r\n        (keys ? ',' + keys : ''));\r\n}\r\nfunction markStatic(node) {\r\n    node.static = isStatic(node);\r\n    if (node.type === 1) {\r\n        // do not make component slot content static. this avoids\r\n        // 1. components not able to mutate slot nodes\r\n        // 2. static slot content fails for hot-reloading\r\n        if (!isPlatformReservedTag(node.tag) &&\r\n            node.tag !== 'slot' &&\r\n            node.attrsMap['inline-template'] == null) {\r\n            return;\r\n        }\r\n        for (var i = 0, l = node.children.length; i < l; i++) {\r\n            var child = node.children[i];\r\n            markStatic(child);\r\n            if (!child.static) {\r\n                node.static = false;\r\n            }\r\n        }\r\n        if (node.ifConditions) {\r\n            for (var i = 1, l = node.ifConditions.length; i < l; i++) {\r\n                var block = node.ifConditions[i].block;\r\n                markStatic(block);\r\n                if (!block.static) {\r\n                    node.static = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction markStaticRoots(node, isInFor) {\r\n    if (node.type === 1) {\r\n        if (node.static || node.once) {\r\n            node.staticInFor = isInFor;\r\n        }\r\n        // For a node to qualify as a static root, it should have children that\r\n        // are not just static text. Otherwise the cost of hoisting out will\r\n        // outweigh the benefits and it's better off to just always render it fresh.\r\n        if (node.static &&\r\n            node.children.length &&\r\n            !(node.children.length === 1 && node.children[0].type === 3)) {\r\n            node.staticRoot = true;\r\n            return;\r\n        }\r\n        else {\r\n            node.staticRoot = false;\r\n        }\r\n        if (node.children) {\r\n            for (var i = 0, l = node.children.length; i < l; i++) {\r\n                markStaticRoots(node.children[i], isInFor || !!node.for);\r\n            }\r\n        }\r\n        if (node.ifConditions) {\r\n            for (var i = 1, l = node.ifConditions.length; i < l; i++) {\r\n                markStaticRoots(node.ifConditions[i].block, isInFor);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction isStatic(node) {\r\n    if (node.type === 2) {\r\n        // expression\r\n        return false;\r\n    }\r\n    if (node.type === 3) {\r\n        // text\r\n        return true;\r\n    }\r\n    return !!(node.pre ||\r\n        (!node.hasBindings && // no dynamic bindings\r\n            !node.if &&\r\n            !node.for && // not v-if or v-for or v-else\r\n            !isBuiltInTag(node.tag) && // not a built-in\r\n            isPlatformReservedTag(node.tag) && // not a component\r\n            !isDirectChildOfTemplateFor(node) &&\r\n            Object.keys(node).every(isStaticKey)));\r\n}\r\nfunction isDirectChildOfTemplateFor(node) {\r\n    while (node.parent) {\r\n        node = node.parent;\r\n        if (node.tag !== 'template') {\r\n            return false;\r\n        }\r\n        if (node.for) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n\nvar fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function(?:\\s+[\\w$]+)?\\s*\\(/;\r\nvar fnInvokeRE = /\\([^)]*?\\);*$/;\r\nvar simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\r\n// KeyboardEvent.keyCode aliases\r\nvar keyCodes = {\r\n    esc: 27,\r\n    tab: 9,\r\n    enter: 13,\r\n    space: 32,\r\n    up: 38,\r\n    left: 37,\r\n    right: 39,\r\n    down: 40,\r\n    delete: [8, 46]\r\n};\r\n// KeyboardEvent.key aliases\r\nvar keyNames = {\r\n    // #7880: IE11 and Edge use `Esc` for Escape key name.\r\n    esc: ['Esc', 'Escape'],\r\n    tab: 'Tab',\r\n    enter: 'Enter',\r\n    // #9112: IE11 uses `Spacebar` for Space key name.\r\n    space: [' ', 'Spacebar'],\r\n    // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\r\n    up: ['Up', 'ArrowUp'],\r\n    left: ['Left', 'ArrowLeft'],\r\n    right: ['Right', 'ArrowRight'],\r\n    down: ['Down', 'ArrowDown'],\r\n    // #9112: IE11 uses `Del` for Delete key name.\r\n    delete: ['Backspace', 'Delete', 'Del']\r\n};\r\n// #4868: modifiers that prevent the execution of the listener\r\n// need to explicitly return null so that we can determine whether to remove\r\n// the listener for .once\r\nvar genGuard = function (condition) { return \"if(\".concat(condition, \")return null;\"); };\r\nvar modifierCode = {\r\n    stop: '$event.stopPropagation();',\r\n    prevent: '$event.preventDefault();',\r\n    self: genGuard(\"$event.target !== $event.currentTarget\"),\r\n    ctrl: genGuard(\"!$event.ctrlKey\"),\r\n    shift: genGuard(\"!$event.shiftKey\"),\r\n    alt: genGuard(\"!$event.altKey\"),\r\n    meta: genGuard(\"!$event.metaKey\"),\r\n    left: genGuard(\"'button' in $event && $event.button !== 0\"),\r\n    middle: genGuard(\"'button' in $event && $event.button !== 1\"),\r\n    right: genGuard(\"'button' in $event && $event.button !== 2\")\r\n};\r\nfunction genHandlers(events, isNative) {\r\n    var prefix = isNative ? 'nativeOn:' : 'on:';\r\n    var staticHandlers = \"\";\r\n    var dynamicHandlers = \"\";\r\n    for (var name_1 in events) {\r\n        var handlerCode = genHandler(events[name_1]);\r\n        //@ts-expect-error\r\n        if (events[name_1] && events[name_1].dynamic) {\r\n            dynamicHandlers += \"\".concat(name_1, \",\").concat(handlerCode, \",\");\r\n        }\r\n        else {\r\n            staticHandlers += \"\\\"\".concat(name_1, \"\\\":\").concat(handlerCode, \",\");\r\n        }\r\n    }\r\n    staticHandlers = \"{\".concat(staticHandlers.slice(0, -1), \"}\");\r\n    if (dynamicHandlers) {\r\n        return prefix + \"_d(\".concat(staticHandlers, \",[\").concat(dynamicHandlers.slice(0, -1), \"])\");\r\n    }\r\n    else {\r\n        return prefix + staticHandlers;\r\n    }\r\n}\r\nfunction genHandler(handler) {\r\n    if (!handler) {\r\n        return 'function(){}';\r\n    }\r\n    if (Array.isArray(handler)) {\r\n        return \"[\".concat(handler.map(function (handler) { return genHandler(handler); }).join(','), \"]\");\r\n    }\r\n    var isMethodPath = simplePathRE.test(handler.value);\r\n    var isFunctionExpression = fnExpRE.test(handler.value);\r\n    var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));\r\n    if (!handler.modifiers) {\r\n        if (isMethodPath || isFunctionExpression) {\r\n            return handler.value;\r\n        }\r\n        return \"function($event){\".concat(isFunctionInvocation ? \"return \".concat(handler.value) : handler.value, \"}\"); // inline statement\r\n    }\r\n    else {\r\n        var code = '';\r\n        var genModifierCode = '';\r\n        var keys = [];\r\n        var _loop_1 = function (key) {\r\n            if (modifierCode[key]) {\r\n                genModifierCode += modifierCode[key];\r\n                // left/right\r\n                if (keyCodes[key]) {\r\n                    keys.push(key);\r\n                }\r\n            }\r\n            else if (key === 'exact') {\r\n                var modifiers_1 = handler.modifiers;\r\n                genModifierCode += genGuard(['ctrl', 'shift', 'alt', 'meta']\r\n                    .filter(function (keyModifier) { return !modifiers_1[keyModifier]; })\r\n                    .map(function (keyModifier) { return \"$event.\".concat(keyModifier, \"Key\"); })\r\n                    .join('||'));\r\n            }\r\n            else {\r\n                keys.push(key);\r\n            }\r\n        };\r\n        for (var key in handler.modifiers) {\r\n            _loop_1(key);\r\n        }\r\n        if (keys.length) {\r\n            code += genKeyFilter(keys);\r\n        }\r\n        // Make sure modifiers like prevent and stop get executed after key filtering\r\n        if (genModifierCode) {\r\n            code += genModifierCode;\r\n        }\r\n        var handlerCode = isMethodPath\r\n            ? \"return \".concat(handler.value, \".apply(null, arguments)\")\r\n            : isFunctionExpression\r\n                ? \"return (\".concat(handler.value, \").apply(null, arguments)\")\r\n                : isFunctionInvocation\r\n                    ? \"return \".concat(handler.value)\r\n                    : handler.value;\r\n        return \"function($event){\".concat(code).concat(handlerCode, \"}\");\r\n    }\r\n}\r\nfunction genKeyFilter(keys) {\r\n    return (\r\n    // make sure the key filters only apply to KeyboardEvents\r\n    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake\r\n    // key events that do not have keyCode property...\r\n    \"if(!$event.type.indexOf('key')&&\" +\r\n        \"\".concat(keys.map(genFilterCode).join('&&'), \")return null;\"));\r\n}\r\nfunction genFilterCode(key) {\r\n    var keyVal = parseInt(key, 10);\r\n    if (keyVal) {\r\n        return \"$event.keyCode!==\".concat(keyVal);\r\n    }\r\n    var keyCode = keyCodes[key];\r\n    var keyName = keyNames[key];\r\n    return (\"_k($event.keyCode,\" +\r\n        \"\".concat(JSON.stringify(key), \",\") +\r\n        \"\".concat(JSON.stringify(keyCode), \",\") +\r\n        \"$event.key,\" +\r\n        \"\".concat(JSON.stringify(keyName)) +\r\n        \")\");\r\n}\n\nfunction on(el, dir) {\r\n    if ( true && dir.modifiers) {\r\n        warn$2(\"v-on without argument does not support modifiers.\");\r\n    }\r\n    el.wrapListeners = function (code) { return \"_g(\".concat(code, \",\").concat(dir.value, \")\"); };\r\n}\n\nfunction bind(el, dir) {\r\n    el.wrapData = function (code) {\r\n        return \"_b(\".concat(code, \",'\").concat(el.tag, \"',\").concat(dir.value, \",\").concat(dir.modifiers && dir.modifiers.prop ? 'true' : 'false').concat(dir.modifiers && dir.modifiers.sync ? ',true' : '', \")\");\r\n    };\r\n}\n\nvar baseDirectives = {\r\n    on: on,\r\n    bind: bind,\r\n    cloak: noop\r\n};\n\nvar CodegenState = /** @class */ (function () {\r\n    function CodegenState(options) {\r\n        this.options = options;\r\n        this.warn = options.warn || baseWarn;\r\n        this.transforms = pluckModuleFunction(options.modules, 'transformCode');\r\n        this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\r\n        this.directives = extend(extend({}, baseDirectives), options.directives);\r\n        var isReservedTag = options.isReservedTag || no;\r\n        this.maybeComponent = function (el) {\r\n            return !!el.component || !isReservedTag(el.tag);\r\n        };\r\n        this.onceId = 0;\r\n        this.staticRenderFns = [];\r\n        this.pre = false;\r\n    }\r\n    return CodegenState;\r\n}());\r\nfunction generate(ast, options) {\r\n    var state = new CodegenState(options);\r\n    // fix #11483, Root level <script> tags should not be rendered.\r\n    var code = ast\r\n        ? ast.tag === 'script'\r\n            ? 'null'\r\n            : genElement(ast, state)\r\n        : '_c(\"div\")';\r\n    return {\r\n        render: \"with(this){return \".concat(code, \"}\"),\r\n        staticRenderFns: state.staticRenderFns\r\n    };\r\n}\r\nfunction genElement(el, state) {\r\n    if (el.parent) {\r\n        el.pre = el.pre || el.parent.pre;\r\n    }\r\n    if (el.staticRoot && !el.staticProcessed) {\r\n        return genStatic(el, state);\r\n    }\r\n    else if (el.once && !el.onceProcessed) {\r\n        return genOnce(el, state);\r\n    }\r\n    else if (el.for && !el.forProcessed) {\r\n        return genFor(el, state);\r\n    }\r\n    else if (el.if && !el.ifProcessed) {\r\n        return genIf(el, state);\r\n    }\r\n    else if (el.tag === 'template' && !el.slotTarget && !state.pre) {\r\n        return genChildren(el, state) || 'void 0';\r\n    }\r\n    else if (el.tag === 'slot') {\r\n        return genSlot(el, state);\r\n    }\r\n    else {\r\n        // component or element\r\n        var code = void 0;\r\n        if (el.component) {\r\n            code = genComponent(el.component, el, state);\r\n        }\r\n        else {\r\n            var data = void 0;\r\n            var maybeComponent = state.maybeComponent(el);\r\n            if (!el.plain || (el.pre && maybeComponent)) {\r\n                data = genData(el, state);\r\n            }\r\n            var tag \r\n            // check if this is a component in <script setup>\r\n            = void 0;\r\n            // check if this is a component in <script setup>\r\n            var bindings = state.options.bindings;\r\n            if (maybeComponent && bindings && bindings.__isScriptSetup !== false) {\r\n                tag = checkBindingType(bindings, el.tag);\r\n            }\r\n            if (!tag)\r\n                tag = \"'\".concat(el.tag, \"'\");\r\n            var children = el.inlineTemplate ? null : genChildren(el, state, true);\r\n            code = \"_c(\".concat(tag).concat(data ? \",\".concat(data) : '' // data\r\n            ).concat(children ? \",\".concat(children) : '' // children\r\n            , \")\");\r\n        }\r\n        // module transforms\r\n        for (var i = 0; i < state.transforms.length; i++) {\r\n            code = state.transforms[i](el, code);\r\n        }\r\n        return code;\r\n    }\r\n}\r\nfunction checkBindingType(bindings, key) {\r\n    var camelName = camelize(key);\r\n    var PascalName = capitalize(camelName);\r\n    var checkType = function (type) {\r\n        if (bindings[key] === type) {\r\n            return key;\r\n        }\r\n        if (bindings[camelName] === type) {\r\n            return camelName;\r\n        }\r\n        if (bindings[PascalName] === type) {\r\n            return PascalName;\r\n        }\r\n    };\r\n    var fromConst = checkType(\"setup-const\" /* BindingTypes.SETUP_CONST */) ||\r\n        checkType(\"setup-reactive-const\" /* BindingTypes.SETUP_REACTIVE_CONST */);\r\n    if (fromConst) {\r\n        return fromConst;\r\n    }\r\n    var fromMaybeRef = checkType(\"setup-let\" /* BindingTypes.SETUP_LET */) ||\r\n        checkType(\"setup-ref\" /* BindingTypes.SETUP_REF */) ||\r\n        checkType(\"setup-maybe-ref\" /* BindingTypes.SETUP_MAYBE_REF */);\r\n    if (fromMaybeRef) {\r\n        return fromMaybeRef;\r\n    }\r\n}\r\n// hoist static sub-trees out\r\nfunction genStatic(el, state) {\r\n    el.staticProcessed = true;\r\n    // Some elements (templates) need to behave differently inside of a v-pre\r\n    // node.  All pre nodes are static roots, so we can use this as a location to\r\n    // wrap a state change and reset it upon exiting the pre node.\r\n    var originalPreState = state.pre;\r\n    if (el.pre) {\r\n        state.pre = el.pre;\r\n    }\r\n    state.staticRenderFns.push(\"with(this){return \".concat(genElement(el, state), \"}\"));\r\n    state.pre = originalPreState;\r\n    return \"_m(\".concat(state.staticRenderFns.length - 1).concat(el.staticInFor ? ',true' : '', \")\");\r\n}\r\n// v-once\r\nfunction genOnce(el, state) {\r\n    el.onceProcessed = true;\r\n    if (el.if && !el.ifProcessed) {\r\n        return genIf(el, state);\r\n    }\r\n    else if (el.staticInFor) {\r\n        var key = '';\r\n        var parent_1 = el.parent;\r\n        while (parent_1) {\r\n            if (parent_1.for) {\r\n                key = parent_1.key;\r\n                break;\r\n            }\r\n            parent_1 = parent_1.parent;\r\n        }\r\n        if (!key) {\r\n             true &&\r\n                state.warn(\"v-once can only be used inside v-for that is keyed. \", el.rawAttrsMap['v-once']);\r\n            return genElement(el, state);\r\n        }\r\n        return \"_o(\".concat(genElement(el, state), \",\").concat(state.onceId++, \",\").concat(key, \")\");\r\n    }\r\n    else {\r\n        return genStatic(el, state);\r\n    }\r\n}\r\nfunction genIf(el, state, altGen, altEmpty) {\r\n    el.ifProcessed = true; // avoid recursion\r\n    return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);\r\n}\r\nfunction genIfConditions(conditions, state, altGen, altEmpty) {\r\n    if (!conditions.length) {\r\n        return altEmpty || '_e()';\r\n    }\r\n    var condition = conditions.shift();\r\n    if (condition.exp) {\r\n        return \"(\".concat(condition.exp, \")?\").concat(genTernaryExp(condition.block), \":\").concat(genIfConditions(conditions, state, altGen, altEmpty));\r\n    }\r\n    else {\r\n        return \"\".concat(genTernaryExp(condition.block));\r\n    }\r\n    // v-if with v-once should generate code like (a)?_m(0):_m(1)\r\n    function genTernaryExp(el) {\r\n        return altGen\r\n            ? altGen(el, state)\r\n            : el.once\r\n                ? genOnce(el, state)\r\n                : genElement(el, state);\r\n    }\r\n}\r\nfunction genFor(el, state, altGen, altHelper) {\r\n    var exp = el.for;\r\n    var alias = el.alias;\r\n    var iterator1 = el.iterator1 ? \",\".concat(el.iterator1) : '';\r\n    var iterator2 = el.iterator2 ? \",\".concat(el.iterator2) : '';\r\n    if ( true &&\r\n        state.maybeComponent(el) &&\r\n        el.tag !== 'slot' &&\r\n        el.tag !== 'template' &&\r\n        !el.key) {\r\n        state.warn(\"<\".concat(el.tag, \" v-for=\\\"\").concat(alias, \" in \").concat(exp, \"\\\">: component lists rendered with \") +\r\n            \"v-for should have explicit keys. \" +\r\n            \"See https://vuejs.org/guide/list.html#key for more info.\", el.rawAttrsMap['v-for'], true /* tip */);\r\n    }\r\n    el.forProcessed = true; // avoid recursion\r\n    return (\"\".concat(altHelper || '_l', \"((\").concat(exp, \"),\") +\r\n        \"function(\".concat(alias).concat(iterator1).concat(iterator2, \"){\") +\r\n        \"return \".concat((altGen || genElement)(el, state)) +\r\n        '})');\r\n}\r\nfunction genData(el, state) {\r\n    var data = '{';\r\n    // directives first.\r\n    // directives may mutate the el's other properties before they are generated.\r\n    var dirs = genDirectives(el, state);\r\n    if (dirs)\r\n        data += dirs + ',';\r\n    // key\r\n    if (el.key) {\r\n        data += \"key:\".concat(el.key, \",\");\r\n    }\r\n    // ref\r\n    if (el.ref) {\r\n        data += \"ref:\".concat(el.ref, \",\");\r\n    }\r\n    if (el.refInFor) {\r\n        data += \"refInFor:true,\";\r\n    }\r\n    // pre\r\n    if (el.pre) {\r\n        data += \"pre:true,\";\r\n    }\r\n    // record original tag name for components using \"is\" attribute\r\n    if (el.component) {\r\n        data += \"tag:\\\"\".concat(el.tag, \"\\\",\");\r\n    }\r\n    // module data generation functions\r\n    for (var i = 0; i < state.dataGenFns.length; i++) {\r\n        data += state.dataGenFns[i](el);\r\n    }\r\n    // attributes\r\n    if (el.attrs) {\r\n        data += \"attrs:\".concat(genProps(el.attrs), \",\");\r\n    }\r\n    // DOM props\r\n    if (el.props) {\r\n        data += \"domProps:\".concat(genProps(el.props), \",\");\r\n    }\r\n    // event handlers\r\n    if (el.events) {\r\n        data += \"\".concat(genHandlers(el.events, false), \",\");\r\n    }\r\n    if (el.nativeEvents) {\r\n        data += \"\".concat(genHandlers(el.nativeEvents, true), \",\");\r\n    }\r\n    // slot target\r\n    // only for non-scoped slots\r\n    if (el.slotTarget && !el.slotScope) {\r\n        data += \"slot:\".concat(el.slotTarget, \",\");\r\n    }\r\n    // scoped slots\r\n    if (el.scopedSlots) {\r\n        data += \"\".concat(genScopedSlots(el, el.scopedSlots, state), \",\");\r\n    }\r\n    // component v-model\r\n    if (el.model) {\r\n        data += \"model:{value:\".concat(el.model.value, \",callback:\").concat(el.model.callback, \",expression:\").concat(el.model.expression, \"},\");\r\n    }\r\n    // inline-template\r\n    if (el.inlineTemplate) {\r\n        var inlineTemplate = genInlineTemplate(el, state);\r\n        if (inlineTemplate) {\r\n            data += \"\".concat(inlineTemplate, \",\");\r\n        }\r\n    }\r\n    data = data.replace(/,$/, '') + '}';\r\n    // v-bind dynamic argument wrap\r\n    // v-bind with dynamic arguments must be applied using the same v-bind object\r\n    // merge helper so that class/style/mustUseProp attrs are handled correctly.\r\n    if (el.dynamicAttrs) {\r\n        data = \"_b(\".concat(data, \",\\\"\").concat(el.tag, \"\\\",\").concat(genProps(el.dynamicAttrs), \")\");\r\n    }\r\n    // v-bind data wrap\r\n    if (el.wrapData) {\r\n        data = el.wrapData(data);\r\n    }\r\n    // v-on data wrap\r\n    if (el.wrapListeners) {\r\n        data = el.wrapListeners(data);\r\n    }\r\n    return data;\r\n}\r\nfunction genDirectives(el, state) {\r\n    var dirs = el.directives;\r\n    if (!dirs)\r\n        return;\r\n    var res = 'directives:[';\r\n    var hasRuntime = false;\r\n    var i, l, dir, needRuntime;\r\n    for (i = 0, l = dirs.length; i < l; i++) {\r\n        dir = dirs[i];\r\n        needRuntime = true;\r\n        var gen = state.directives[dir.name];\r\n        if (gen) {\r\n            // compile-time directive that manipulates AST.\r\n            // returns true if it also needs a runtime counterpart.\r\n            needRuntime = !!gen(el, dir, state.warn);\r\n        }\r\n        if (needRuntime) {\r\n            hasRuntime = true;\r\n            res += \"{name:\\\"\".concat(dir.name, \"\\\",rawName:\\\"\").concat(dir.rawName, \"\\\"\").concat(dir.value\r\n                ? \",value:(\".concat(dir.value, \"),expression:\").concat(JSON.stringify(dir.value))\r\n                : '').concat(dir.arg ? \",arg:\".concat(dir.isDynamicArg ? dir.arg : \"\\\"\".concat(dir.arg, \"\\\"\")) : '').concat(dir.modifiers ? \",modifiers:\".concat(JSON.stringify(dir.modifiers)) : '', \"},\");\r\n        }\r\n    }\r\n    if (hasRuntime) {\r\n        return res.slice(0, -1) + ']';\r\n    }\r\n}\r\nfunction genInlineTemplate(el, state) {\r\n    var ast = el.children[0];\r\n    if ( true && (el.children.length !== 1 || ast.type !== 1)) {\r\n        state.warn('Inline-template components must have exactly one child element.', { start: el.start });\r\n    }\r\n    if (ast && ast.type === 1) {\r\n        var inlineRenderFns = generate(ast, state.options);\r\n        return \"inlineTemplate:{render:function(){\".concat(inlineRenderFns.render, \"},staticRenderFns:[\").concat(inlineRenderFns.staticRenderFns\r\n            .map(function (code) { return \"function(){\".concat(code, \"}\"); })\r\n            .join(','), \"]}\");\r\n    }\r\n}\r\nfunction genScopedSlots(el, slots, state) {\r\n    // by default scoped slots are considered \"stable\", this allows child\r\n    // components with only scoped slots to skip forced updates from parent.\r\n    // but in some cases we have to bail-out of this optimization\r\n    // for example if the slot contains dynamic names, has v-if or v-for on them...\r\n    var needsForceUpdate = el.for ||\r\n        Object.keys(slots).some(function (key) {\r\n            var slot = slots[key];\r\n            return (slot.slotTargetDynamic || slot.if || slot.for || containsSlotChild(slot) // is passing down slot from parent which may be dynamic\r\n            );\r\n        });\r\n    // #9534: if a component with scoped slots is inside a conditional branch,\r\n    // it's possible for the same component to be reused but with different\r\n    // compiled slot content. To avoid that, we generate a unique key based on\r\n    // the generated code of all the slot contents.\r\n    var needsKey = !!el.if;\r\n    // OR when it is inside another scoped slot or v-for (the reactivity may be\r\n    // disconnected due to the intermediate scope variable)\r\n    // #9438, #9506\r\n    // TODO: this can be further optimized by properly analyzing in-scope bindings\r\n    // and skip force updating ones that do not actually use scope variables.\r\n    if (!needsForceUpdate) {\r\n        var parent_2 = el.parent;\r\n        while (parent_2) {\r\n            if ((parent_2.slotScope && parent_2.slotScope !== emptySlotScopeToken) ||\r\n                parent_2.for) {\r\n                needsForceUpdate = true;\r\n                break;\r\n            }\r\n            if (parent_2.if) {\r\n                needsKey = true;\r\n            }\r\n            parent_2 = parent_2.parent;\r\n        }\r\n    }\r\n    var generatedSlots = Object.keys(slots)\r\n        .map(function (key) { return genScopedSlot(slots[key], state); })\r\n        .join(',');\r\n    return \"scopedSlots:_u([\".concat(generatedSlots, \"]\").concat(needsForceUpdate ? \",null,true\" : \"\").concat(!needsForceUpdate && needsKey ? \",null,false,\".concat(hash(generatedSlots)) : \"\", \")\");\r\n}\r\nfunction hash(str) {\r\n    var hash = 5381;\r\n    var i = str.length;\r\n    while (i) {\r\n        hash = (hash * 33) ^ str.charCodeAt(--i);\r\n    }\r\n    return hash >>> 0;\r\n}\r\nfunction containsSlotChild(el) {\r\n    if (el.type === 1) {\r\n        if (el.tag === 'slot') {\r\n            return true;\r\n        }\r\n        return el.children.some(containsSlotChild);\r\n    }\r\n    return false;\r\n}\r\nfunction genScopedSlot(el, state) {\r\n    var isLegacySyntax = el.attrsMap['slot-scope'];\r\n    if (el.if && !el.ifProcessed && !isLegacySyntax) {\r\n        return genIf(el, state, genScopedSlot, \"null\");\r\n    }\r\n    if (el.for && !el.forProcessed) {\r\n        return genFor(el, state, genScopedSlot);\r\n    }\r\n    var slotScope = el.slotScope === emptySlotScopeToken ? \"\" : String(el.slotScope);\r\n    var fn = \"function(\".concat(slotScope, \"){\") +\r\n        \"return \".concat(el.tag === 'template'\r\n            ? el.if && isLegacySyntax\r\n                ? \"(\".concat(el.if, \")?\").concat(genChildren(el, state) || 'undefined', \":undefined\")\r\n                : genChildren(el, state) || 'undefined'\r\n            : genElement(el, state), \"}\");\r\n    // reverse proxy v-slot without scope on this.$slots\r\n    var reverseProxy = slotScope ? \"\" : \",proxy:true\";\r\n    return \"{key:\".concat(el.slotTarget || \"\\\"default\\\"\", \",fn:\").concat(fn).concat(reverseProxy, \"}\");\r\n}\r\nfunction genChildren(el, state, checkSkip, altGenElement, altGenNode) {\r\n    var children = el.children;\r\n    if (children.length) {\r\n        var el_1 = children[0];\r\n        // optimize single v-for\r\n        if (children.length === 1 &&\r\n            el_1.for &&\r\n            el_1.tag !== 'template' &&\r\n            el_1.tag !== 'slot') {\r\n            var normalizationType_1 = checkSkip\r\n                ? state.maybeComponent(el_1)\r\n                    ? \",1\"\r\n                    : \",0\"\r\n                : \"\";\r\n            return \"\".concat((altGenElement || genElement)(el_1, state)).concat(normalizationType_1);\r\n        }\r\n        var normalizationType = checkSkip\r\n            ? getNormalizationType(children, state.maybeComponent)\r\n            : 0;\r\n        var gen_1 = altGenNode || genNode;\r\n        return \"[\".concat(children.map(function (c) { return gen_1(c, state); }).join(','), \"]\").concat(normalizationType ? \",\".concat(normalizationType) : '');\r\n    }\r\n}\r\n// determine the normalization needed for the children array.\r\n// 0: no normalization needed\r\n// 1: simple normalization needed (possible 1-level deep nested array)\r\n// 2: full normalization needed\r\nfunction getNormalizationType(children, maybeComponent) {\r\n    var res = 0;\r\n    for (var i = 0; i < children.length; i++) {\r\n        var el = children[i];\r\n        if (el.type !== 1) {\r\n            continue;\r\n        }\r\n        if (needsNormalization(el) ||\r\n            (el.ifConditions &&\r\n                el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\r\n            res = 2;\r\n            break;\r\n        }\r\n        if (maybeComponent(el) ||\r\n            (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\r\n            res = 1;\r\n        }\r\n    }\r\n    return res;\r\n}\r\nfunction needsNormalization(el) {\r\n    return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';\r\n}\r\nfunction genNode(node, state) {\r\n    if (node.type === 1) {\r\n        return genElement(node, state);\r\n    }\r\n    else if (node.type === 3 && node.isComment) {\r\n        return genComment(node);\r\n    }\r\n    else {\r\n        return genText(node);\r\n    }\r\n}\r\nfunction genText(text) {\r\n    return \"_v(\".concat(text.type === 2\r\n        ? text.expression // no need for () because already wrapped in _s()\r\n        : transformSpecialNewlines(JSON.stringify(text.text)), \")\");\r\n}\r\nfunction genComment(comment) {\r\n    return \"_e(\".concat(JSON.stringify(comment.text), \")\");\r\n}\r\nfunction genSlot(el, state) {\r\n    var slotName = el.slotName || '\"default\"';\r\n    var children = genChildren(el, state);\r\n    var res = \"_t(\".concat(slotName).concat(children ? \",function(){return \".concat(children, \"}\") : '');\r\n    var attrs = el.attrs || el.dynamicAttrs\r\n        ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({\r\n            // slot props are camelized\r\n            name: camelize(attr.name),\r\n            value: attr.value,\r\n            dynamic: attr.dynamic\r\n        }); }))\r\n        : null;\r\n    var bind = el.attrsMap['v-bind'];\r\n    if ((attrs || bind) && !children) {\r\n        res += \",null\";\r\n    }\r\n    if (attrs) {\r\n        res += \",\".concat(attrs);\r\n    }\r\n    if (bind) {\r\n        res += \"\".concat(attrs ? '' : ',null', \",\").concat(bind);\r\n    }\r\n    return res + ')';\r\n}\r\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\r\nfunction genComponent(componentName, el, state) {\r\n    var children = el.inlineTemplate ? null : genChildren(el, state, true);\r\n    return \"_c(\".concat(componentName, \",\").concat(genData(el, state)).concat(children ? \",\".concat(children) : '', \")\");\r\n}\r\nfunction genProps(props) {\r\n    var staticProps = \"\";\r\n    var dynamicProps = \"\";\r\n    for (var i = 0; i < props.length; i++) {\r\n        var prop = props[i];\r\n        var value = transformSpecialNewlines(prop.value);\r\n        if (prop.dynamic) {\r\n            dynamicProps += \"\".concat(prop.name, \",\").concat(value, \",\");\r\n        }\r\n        else {\r\n            staticProps += \"\\\"\".concat(prop.name, \"\\\":\").concat(value, \",\");\r\n        }\r\n    }\r\n    staticProps = \"{\".concat(staticProps.slice(0, -1), \"}\");\r\n    if (dynamicProps) {\r\n        return \"_d(\".concat(staticProps, \",[\").concat(dynamicProps.slice(0, -1), \"])\");\r\n    }\r\n    else {\r\n        return staticProps;\r\n    }\r\n}\r\n// #3895, #4268\r\nfunction transformSpecialNewlines(text) {\r\n    return text.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\r\n}\n\n// these keywords should not appear inside expressions, but operators like\r\n// typeof, instanceof and in are allowed\r\nvar prohibitedKeywordRE = new RegExp('\\\\b' +\r\n    ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\r\n        'super,throw,while,yield,delete,export,import,return,switch,default,' +\r\n        'extends,finally,continue,debugger,function,arguments')\r\n        .split(',')\r\n        .join('\\\\b|\\\\b') +\r\n    '\\\\b');\r\n// these unary operators should not be used as property/method names\r\nvar unaryOperatorsRE = new RegExp('\\\\b' +\r\n    'delete,typeof,void'.split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') +\r\n    '\\\\s*\\\\([^\\\\)]*\\\\)');\r\n// strip strings in expressions\r\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\r\n// detect problematic expressions in a template\r\nfunction detectErrors(ast, warn) {\r\n    if (ast) {\r\n        checkNode(ast, warn);\r\n    }\r\n}\r\nfunction checkNode(node, warn) {\r\n    if (node.type === 1) {\r\n        for (var name_1 in node.attrsMap) {\r\n            if (dirRE.test(name_1)) {\r\n                var value = node.attrsMap[name_1];\r\n                if (value) {\r\n                    var range = node.rawAttrsMap[name_1];\r\n                    if (name_1 === 'v-for') {\r\n                        checkFor(node, \"v-for=\\\"\".concat(value, \"\\\"\"), warn, range);\r\n                    }\r\n                    else if (name_1 === 'v-slot' || name_1[0] === '#') {\r\n                        checkFunctionParameterExpression(value, \"\".concat(name_1, \"=\\\"\").concat(value, \"\\\"\"), warn, range);\r\n                    }\r\n                    else if (onRE.test(name_1)) {\r\n                        checkEvent(value, \"\".concat(name_1, \"=\\\"\").concat(value, \"\\\"\"), warn, range);\r\n                    }\r\n                    else {\r\n                        checkExpression(value, \"\".concat(name_1, \"=\\\"\").concat(value, \"\\\"\"), warn, range);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (node.children) {\r\n            for (var i = 0; i < node.children.length; i++) {\r\n                checkNode(node.children[i], warn);\r\n            }\r\n        }\r\n    }\r\n    else if (node.type === 2) {\r\n        checkExpression(node.expression, node.text, warn, node);\r\n    }\r\n}\r\nfunction checkEvent(exp, text, warn, range) {\r\n    var stripped = exp.replace(stripStringRE, '');\r\n    var keywordMatch = stripped.match(unaryOperatorsRE);\r\n    if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {\r\n        warn(\"avoid using JavaScript unary operator as property name: \" +\r\n            \"\\\"\".concat(keywordMatch[0], \"\\\" in expression \").concat(text.trim()), range);\r\n    }\r\n    checkExpression(exp, text, warn, range);\r\n}\r\nfunction checkFor(node, text, warn, range) {\r\n    checkExpression(node.for || '', text, warn, range);\r\n    checkIdentifier(node.alias, 'v-for alias', text, warn, range);\r\n    checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);\r\n    checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);\r\n}\r\nfunction checkIdentifier(ident, type, text, warn, range) {\r\n    if (typeof ident === 'string') {\r\n        try {\r\n            new Function(\"var \".concat(ident, \"=_\"));\r\n        }\r\n        catch (e) {\r\n            warn(\"invalid \".concat(type, \" \\\"\").concat(ident, \"\\\" in expression: \").concat(text.trim()), range);\r\n        }\r\n    }\r\n}\r\nfunction checkExpression(exp, text, warn, range) {\r\n    try {\r\n        new Function(\"return \".concat(exp));\r\n    }\r\n    catch (e) {\r\n        var keywordMatch = exp\r\n            .replace(stripStringRE, '')\r\n            .match(prohibitedKeywordRE);\r\n        if (keywordMatch) {\r\n            warn(\"avoid using JavaScript keyword as property name: \" +\r\n                \"\\\"\".concat(keywordMatch[0], \"\\\"\\n  Raw expression: \").concat(text.trim()), range);\r\n        }\r\n        else {\r\n            warn(\"invalid expression: \".concat(e.message, \" in\\n\\n\") +\r\n                \"    \".concat(exp, \"\\n\\n\") +\r\n                \"  Raw expression: \".concat(text.trim(), \"\\n\"), range);\r\n        }\r\n    }\r\n}\r\nfunction checkFunctionParameterExpression(exp, text, warn, range) {\r\n    try {\r\n        new Function(exp, '');\r\n    }\r\n    catch (e) {\r\n        warn(\"invalid function parameter expression: \".concat(e.message, \" in\\n\\n\") +\r\n            \"    \".concat(exp, \"\\n\\n\") +\r\n            \"  Raw expression: \".concat(text.trim(), \"\\n\"), range);\r\n    }\r\n}\n\nvar range = 2;\r\nfunction generateCodeFrame(source, start, end) {\r\n    if (start === void 0) { start = 0; }\r\n    if (end === void 0) { end = source.length; }\r\n    var lines = source.split(/\\r?\\n/);\r\n    var count = 0;\r\n    var res = [];\r\n    for (var i = 0; i < lines.length; i++) {\r\n        count += lines[i].length + 1;\r\n        if (count >= start) {\r\n            for (var j = i - range; j <= i + range || end > count; j++) {\r\n                if (j < 0 || j >= lines.length)\r\n                    continue;\r\n                res.push(\"\".concat(j + 1).concat(repeat(\" \", 3 - String(j + 1).length), \"|  \").concat(lines[j]));\r\n                var lineLength = lines[j].length;\r\n                if (j === i) {\r\n                    // push underline\r\n                    var pad = start - (count - lineLength) + 1;\r\n                    var length_1 = end > count ? lineLength - pad : end - start;\r\n                    res.push(\"   |  \" + repeat(\" \", pad) + repeat(\"^\", length_1));\r\n                }\r\n                else if (j > i) {\r\n                    if (end > count) {\r\n                        var length_2 = Math.min(end - count, lineLength);\r\n                        res.push(\"   |  \" + repeat(\"^\", length_2));\r\n                    }\r\n                    count += lineLength + 1;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return res.join('\\n');\r\n}\r\nfunction repeat(str, n) {\r\n    var result = '';\r\n    if (n > 0) {\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n            // eslint-disable-line\r\n            if (n & 1)\r\n                result += str;\r\n            n >>>= 1;\r\n            if (n <= 0)\r\n                break;\r\n            str += str;\r\n        }\r\n    }\r\n    return result;\r\n}\n\nfunction createFunction(code, errors) {\r\n    try {\r\n        return new Function(code);\r\n    }\r\n    catch (err) {\r\n        errors.push({ err: err, code: code });\r\n        return noop;\r\n    }\r\n}\r\nfunction createCompileToFunctionFn(compile) {\r\n    var cache = Object.create(null);\r\n    return function compileToFunctions(template, options, vm) {\r\n        options = extend({}, options);\r\n        var warn = options.warn || warn$2;\r\n        delete options.warn;\r\n        /* istanbul ignore if */\r\n        if (true) {\r\n            // detect possible CSP restriction\r\n            try {\r\n                new Function('return 1');\r\n            }\r\n            catch (e) {\r\n                if (e.toString().match(/unsafe-eval|CSP/)) {\r\n                    warn('It seems you are using the standalone build of Vue.js in an ' +\r\n                        'environment with Content Security Policy that prohibits unsafe-eval. ' +\r\n                        'The template compiler cannot work in this environment. Consider ' +\r\n                        'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\r\n                        'templates into render functions.');\r\n                }\r\n            }\r\n        }\r\n        // check cache\r\n        var key = options.delimiters\r\n            ? String(options.delimiters) + template\r\n            : template;\r\n        if (cache[key]) {\r\n            return cache[key];\r\n        }\r\n        // compile\r\n        var compiled = compile(template, options);\r\n        // check compilation errors/tips\r\n        if (true) {\r\n            if (compiled.errors && compiled.errors.length) {\r\n                if (options.outputSourceRange) {\r\n                    compiled.errors.forEach(function (e) {\r\n                        warn(\"Error compiling template:\\n\\n\".concat(e.msg, \"\\n\\n\") +\r\n                            generateCodeFrame(template, e.start, e.end), vm);\r\n                    });\r\n                }\r\n                else {\r\n                    warn(\"Error compiling template:\\n\\n\".concat(template, \"\\n\\n\") +\r\n                        compiled.errors.map(function (e) { return \"- \".concat(e); }).join('\\n') +\r\n                        '\\n', vm);\r\n                }\r\n            }\r\n            if (compiled.tips && compiled.tips.length) {\r\n                if (options.outputSourceRange) {\r\n                    compiled.tips.forEach(function (e) { return tip(e.msg, vm); });\r\n                }\r\n                else {\r\n                    compiled.tips.forEach(function (msg) { return tip(msg, vm); });\r\n                }\r\n            }\r\n        }\r\n        // turn code into functions\r\n        var res = {};\r\n        var fnGenErrors = [];\r\n        res.render = createFunction(compiled.render, fnGenErrors);\r\n        res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\r\n            return createFunction(code, fnGenErrors);\r\n        });\r\n        // check function generation errors.\r\n        // this should only happen if there is a bug in the compiler itself.\r\n        // mostly for codegen development use\r\n        /* istanbul ignore if */\r\n        if (true) {\r\n            if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\r\n                warn(\"Failed to generate render function:\\n\\n\" +\r\n                    fnGenErrors\r\n                        .map(function (_a) {\r\n                        var err = _a.err, code = _a.code;\r\n                        return \"\".concat(err.toString(), \" in\\n\\n\").concat(code, \"\\n\");\r\n                    })\r\n                        .join('\\n'), vm);\r\n            }\r\n        }\r\n        return (cache[key] = res);\r\n    };\r\n}\n\nfunction createCompilerCreator(baseCompile) {\r\n    return function createCompiler(baseOptions) {\r\n        function compile(template, options) {\r\n            var finalOptions = Object.create(baseOptions);\r\n            var errors = [];\r\n            var tips = [];\r\n            var warn = function (msg, range, tip) {\r\n                (tip ? tips : errors).push(msg);\r\n            };\r\n            if (options) {\r\n                if ( true && options.outputSourceRange) {\r\n                    // $flow-disable-line\r\n                    var leadingSpaceLength_1 = template.match(/^\\s*/)[0].length;\r\n                    warn = function (msg, range, tip) {\r\n                        var data = typeof msg === 'string' ? { msg: msg } : msg;\r\n                        if (range) {\r\n                            if (range.start != null) {\r\n                                data.start = range.start + leadingSpaceLength_1;\r\n                            }\r\n                            if (range.end != null) {\r\n                                data.end = range.end + leadingSpaceLength_1;\r\n                            }\r\n                        }\r\n                        (tip ? tips : errors).push(data);\r\n                    };\r\n                }\r\n                // merge custom modules\r\n                if (options.modules) {\r\n                    finalOptions.modules = (baseOptions.modules || []).concat(options.modules);\r\n                }\r\n                // merge custom directives\r\n                if (options.directives) {\r\n                    finalOptions.directives = extend(Object.create(baseOptions.directives || null), options.directives);\r\n                }\r\n                // copy other options\r\n                for (var key in options) {\r\n                    if (key !== 'modules' && key !== 'directives') {\r\n                        finalOptions[key] = options[key];\r\n                    }\r\n                }\r\n            }\r\n            finalOptions.warn = warn;\r\n            var compiled = baseCompile(template.trim(), finalOptions);\r\n            if (true) {\r\n                detectErrors(compiled.ast, warn);\r\n            }\r\n            compiled.errors = errors;\r\n            compiled.tips = tips;\r\n            return compiled;\r\n        }\r\n        return {\r\n            compile: compile,\r\n            compileToFunctions: createCompileToFunctionFn(compile)\r\n        };\r\n    };\r\n}\n\n// `createCompilerCreator` allows creating compilers that use alternative\r\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\r\n// Here we just export a default compiler using the default parts.\r\nvar createCompiler = createCompilerCreator(function baseCompile(template, options) {\r\n    var ast = parse(template.trim(), options);\r\n    if (options.optimize !== false) {\r\n        optimize(ast, options);\r\n    }\r\n    var code = generate(ast, options);\r\n    return {\r\n        ast: ast,\r\n        render: code.render,\r\n        staticRenderFns: code.staticRenderFns\r\n    };\r\n});\n\nvar _a = createCompiler(baseOptions), compileToFunctions = _a.compileToFunctions;\n\n// check whether current browser encodes a char inside attribute values\r\nvar div;\r\nfunction getShouldDecode(href) {\r\n    div = div || document.createElement('div');\r\n    div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\r\n    return div.innerHTML.indexOf('&#10;') > 0;\r\n}\r\n// #3663: IE encodes newlines inside attribute values while other browsers don't\r\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\r\n// #6828: chrome encodes content in a[href]\r\nvar shouldDecodeNewlinesForHref = inBrowser\r\n    ? getShouldDecode(true)\r\n    : false;\n\nvar idToTemplate = cached(function (id) {\r\n    var el = query(id);\r\n    return el && el.innerHTML;\r\n});\r\nvar mount = Vue.prototype.$mount;\r\nVue.prototype.$mount = function (el, hydrating) {\r\n    el = el && query(el);\r\n    /* istanbul ignore if */\r\n    if (el === document.body || el === document.documentElement) {\r\n         true &&\r\n            warn$2(\"Do not mount Vue to <html> or <body> - mount to normal elements instead.\");\r\n        return this;\r\n    }\r\n    var options = this.$options;\r\n    // resolve template/el and convert to render function\r\n    if (!options.render) {\r\n        var template = options.template;\r\n        if (template) {\r\n            if (typeof template === 'string') {\r\n                if (template.charAt(0) === '#') {\r\n                    template = idToTemplate(template);\r\n                    /* istanbul ignore if */\r\n                    if ( true && !template) {\r\n                        warn$2(\"Template element not found or is empty: \".concat(options.template), this);\r\n                    }\r\n                }\r\n            }\r\n            else if (template.nodeType) {\r\n                template = template.innerHTML;\r\n            }\r\n            else {\r\n                if (true) {\r\n                    warn$2('invalid template option:' + template, this);\r\n                }\r\n                return this;\r\n            }\r\n        }\r\n        else if (el) {\r\n            // @ts-expect-error\r\n            template = getOuterHTML(el);\r\n        }\r\n        if (template) {\r\n            /* istanbul ignore if */\r\n            if ( true && config.performance && mark) {\r\n                mark('compile');\r\n            }\r\n            var _a = compileToFunctions(template, {\r\n                outputSourceRange: \"development\" !== 'production',\r\n                shouldDecodeNewlines: shouldDecodeNewlines,\r\n                shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\r\n                delimiters: options.delimiters,\r\n                comments: options.comments\r\n            }, this), render = _a.render, staticRenderFns = _a.staticRenderFns;\r\n            options.render = render;\r\n            options.staticRenderFns = staticRenderFns;\r\n            /* istanbul ignore if */\r\n            if ( true && config.performance && mark) {\r\n                mark('compile end');\r\n                measure(\"vue \".concat(this._name, \" compile\"), 'compile', 'compile end');\r\n            }\r\n        }\r\n    }\r\n    return mount.call(this, el, hydrating);\r\n};\r\n/**\r\n * Get outerHTML of elements, taking care\r\n * of SVG elements in IE as well.\r\n */\r\nfunction getOuterHTML(el) {\r\n    if (el.outerHTML) {\r\n        return el.outerHTML;\r\n    }\r\n    else {\r\n        var container = document.createElement('div');\r\n        container.appendChild(el.cloneNode(true));\r\n        return container.innerHTML;\r\n    }\r\n}\r\nVue.compile = compileToFunctions;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue/dist/vue.esm.js\n");

/***/ }),

/***/ "./resources/js/layouts sync .*\\.vue$":
/*!**********************************************************!*\
  !*** ./resources/js/layouts/ sync nonrecursive .*\.vue$ ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./default.vue": "./resources/js/layouts/default.vue"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./resources/js/layouts sync .*\\.vue$";

/***/ }),

/***/ "./resources/js/middleware sync .*\\.js$":
/*!************************************************************!*\
  !*** ./resources/js/middleware/ sync nonrecursive .*\.js$ ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./example.js": "./resources/js/middleware/example.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./resources/js/middleware sync .*\\.js$";

/***/ }),

/***/ "./resources/js/pages lazy recursive ^\\.\\/.*$":
/*!************************************************************!*\
  !*** ./resources/js/pages/ lazy ^\.\/.*$ namespace object ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./welcome": [
		"./resources/js/pages/welcome.vue",
		"resources_js_pages_welcome_vue"
	],
	"./welcome.vue": [
		"./resources/js/pages/welcome.vue",
		"resources_js_pages_welcome_vue"
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(() => {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return __webpack_require__.e(ids[1]).then(() => {
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = () => (Object.keys(map));
webpackAsyncContext.id = "./resources/js/pages lazy recursive ^\\.\\/.*$";
module.exports = webpackAsyncContext;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "dist/js/" + "17a204db5c411807" + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get mini-css chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference all chunks
/******/ 		__webpack_require__.miniCssF = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".css";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		// data-webpack is not used as build has no uniqueName
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "/";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/dist/js/app": 0,
/******/ 			"dist/css/app": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if("dist/css/app" != chunkId) {
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						} else installedChunks[chunkId] = 0;
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["dist/css/app"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["dist/css/app"], () => (__webpack_require__("./resources/sass/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;